!function(I){var g={};function C(A){if(g[A])return g[A].exports;var n=g[A]={i:A,l:!1,exports:{}};return I[A].call(n.exports,n,n.exports,C),n.l=!0,n.exports}C.m=I,C.c=g,C.d=function(I,g,A){C.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:A})},C.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},C.t=function(I,g){if(1&g&&(I=C(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var A=Object.create(null);if(C.r(A),Object.defineProperty(A,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var n in I)C.d(A,n,function(g){return I[g]}.bind(null,n));return A},C.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return C.d(g,"a",g),g},C.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},C.p="",C(C.s=4)}([function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(setImmediate) {/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file San 主文件\n */\n\n(function (root) {\n    // 人工调整打包代码顺序，通过注释手工写一些依赖\n//     // require('./util/guid');\n//     // require('./util/empty');\n//     // require('./util/extend');\n//     // require('./util/inherits');\n//     // require('./util/each');\n//     // require('./util/contains');\n//     // require('./util/bind');\n//     // require('./browser/on');\n//     // require('./browser/un');\n//     // require('./browser/svg-tags');\n//     // require('./browser/create-el');\n//     // require('./browser/remove-el');\n//     // require('./util/next-tick');\n//     // require('./browser/ie');\n//     // require('./browser/ie-old-than-9');\n//     // require('./browser/input-event-compatible');\n//     // require('./browser/auto-close-tags');\n//     // require('./util/data-types.js');\n//     // require('./util/create-data-types-checker.js');\n//     // require('./parser/walker');\n//     // require('./parser/parse-template');\n//     // require('./runtime/change-expr-compare');\n//     // require('./runtime/data-change-type');\n//     // require('./runtime/default-filters');\n//     // require('./view/life-cycle');\n//     // require('./view/node-type');\n//     // require('./view/get-prop-handler');\n//     // require('./view/is-data-change-by-element');\n//     // require('./view/get-event-listener');\n//     // require('./view/create-node');\n\n\n    /**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 唯一id\n */\n\n\n/**\n * 获取唯一id\n *\n * @type {number} 唯一id\n */\nvar guid = 1;\n\n// exports = module.exports = guid;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 空函数\n */\n\n\n/**\n * 啥都不干\n */\nfunction empty() {}\n\n// exports = module.exports = empty;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 属性拷贝\n */\n\n/**\n * 对象属性拷贝\n *\n * @param {Object} target 目标对象\n * @param {Object} source 源对象\n * @return {Object} 返回目标对象\n */\nfunction extend(target, source) {\n    for (var key in source) {\n        /* istanbul ignore else  */\n        if (source.hasOwnProperty(key)) {\n            var value = source[key];\n            if (typeof value !== 'undefined') {\n                target[key] = value;\n            }\n        }\n    }\n\n    return target;\n}\n\n// exports = module.exports = extend;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 构建类之间的继承关系\n */\n\n// var extend = require('./extend');\n\n/**\n * 构建类之间的继承关系\n *\n * @param {Function} subClass 子类函数\n * @param {Function} superClass 父类函数\n */\nfunction inherits(subClass, superClass) {\n    /* jshint -W054 */\n    var subClassProto = subClass.prototype;\n    var F = new Function();\n    F.prototype = superClass.prototype;\n    subClass.prototype = new F();\n    subClass.prototype.constructor = subClass;\n    extend(subClass.prototype, subClassProto);\n    /* jshint +W054 */\n}\n\n// exports = module.exports = inherits;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 遍历数组\n */\n\n\n/**\n * 遍历数组集合\n *\n * @param {Array} array 数组源\n * @param {function(Any,number):boolean} iterator 遍历函数\n */\nfunction each(array, iterator) {\n    if (array && array.length > 0) {\n        for (var i = 0, l = array.length; i < l; i++) {\n            if (iterator(array[i], i) === false) {\n                break;\n            }\n        }\n    }\n}\n\n// exports = module.exports = each;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 判断数组中是否包含某项\n */\n\n// var each = require('./each');\n\n/**\n * 判断数组中是否包含某项\n *\n * @param {Array} array 数组\n * @param {*} value 包含的项\n * @return {boolean}\n */\nfunction contains(array, value) {\n    var result = false;\n    each(array, function (item) {\n        result = item === value;\n        return !result;\n    });\n\n    return result;\n}\n\n// exports = module.exports = contains;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file bind函数\n */\n\n/**\n * Function.prototype.bind 方法的兼容性封装\n *\n * @param {Function} func 要bind的函数\n * @param {Object} thisArg this指向对象\n * @param {...*} args 预设的初始参数\n * @return {Function}\n */\nfunction bind(func, thisArg) {\n    var nativeBind = Function.prototype.bind;\n    var slice = Array.prototype.slice;\n    // #[begin] allua\n    if (nativeBind && func.bind === nativeBind) {\n    // #[end]\n        return nativeBind.apply(func, slice.call(arguments, 1));\n    // #[begin] allua\n    }\n\n    /* istanbul ignore next */\n    var args = slice.call(arguments, 2);\n    /* istanbul ignore next */\n    return function () {\n        return func.apply(thisArg, args.concat(slice.call(arguments)));\n    };\n    // #[end]\n}\n\n// exports = module.exports = bind;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file DOM 事件挂载\n */\n\n/**\n * DOM 事件挂载\n *\n * @inner\n * @param {HTMLElement} el DOM元素\n * @param {string} eventName 事件名\n * @param {Function} listener 监听函数\n * @param {boolean} capture 是否是捕获阶段\n */\nfunction on(el, eventName, listener, capture) {\n    // #[begin] allua\n    /* istanbul ignore else */\n    if (el.addEventListener) {\n    // #[end]\n        el.addEventListener(eventName, listener, capture);\n    // #[begin] allua\n    }\n    else {\n        el.attachEvent('on' + eventName, listener);\n    }\n    // #[end]\n}\n\n// exports = module.exports = on;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file DOM 事件卸载\n */\n\n/**\n * DOM 事件卸载\n *\n * @inner\n * @param {HTMLElement} el DOM元素\n * @param {string} eventName 事件名\n * @param {Function} listener 监听函数\n * @param {boolean} capture 是否是捕获阶段\n */\nfunction un(el, eventName, listener, capture) {\n    // #[begin] allua\n    /* istanbul ignore else */\n    if (el.addEventListener) {\n    // #[end]\n        el.removeEventListener(eventName, listener, capture);\n    // #[begin] allua\n    }\n    else {\n        el.detachEvent('on' + eventName, listener);\n    }\n    // #[end]\n}\n\n// exports = module.exports = un;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 将字符串逗号切分返回对象\n */\n\n// var each = require('../util/each');\n\n/**\n * 将字符串逗号切分返回对象\n *\n * @param {string} source 源字符串\n * @return {Object}\n */\nfunction splitStr2Obj(source) {\n    var result = {};\n    each(\n        source.split(','),\n        function (key) {\n            result[key] = key;\n        }\n    );\n    return result;\n}\n\n// exports = module.exports = splitStr2Obj;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file SVG标签表\n */\n\n// var splitStr2Obj = require('../util/split-str-2-obj');\n\n/**\n * svgTags\n *\n * @see https://www.w3.org/TR/SVG/svgdtd.html 只取常用\n * @type {Object}\n */\nvar svgTags = splitStr2Obj(''\n    // structure\n    + 'svg,g,defs,desc,metadata,symbol,use,'\n    // image & shape\n    + 'image,path,rect,circle,line,ellipse,polyline,polygon,'\n    // text\n    + 'text,tspan,tref,textpath,'\n    // other\n    + 'marker,pattern,clippath,mask,filter,cursor,view,animate,'\n    // font\n    + 'font,font-face,glyph,missing-glyph,'\n    // camel\n    + 'animateColor,animateMotion,animateTransform,textPath,foreignObject'\n);\n\n// exports = module.exports = svgTags;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file DOM创建\n */\n\n// var svgTags = require('./svg-tags');\n\n/**\n * 创建 DOM 元素\n *\n * @param  {string} tagName tagName\n * @return {HTMLElement}\n */\nfunction createEl(tagName) {\n    if (svgTags[tagName]) {\n        return document.createElementNS('http://www.w3.org/2000/svg', tagName);\n    }\n\n    return document.createElement(tagName);\n}\n\n// exports = module.exports = createEl;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 移除DOM\n */\n\n/**\n * 将 DOM 从页面中移除\n *\n * @param {HTMLElement} el DOM元素\n */\nfunction removeEl(el) {\n    if (el && el.parentNode) {\n        el.parentNode.removeChild(el);\n    }\n}\n\n// exports = module.exports = removeEl;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 在下一个时间周期运行任务\n */\n\n// 该方法参照了vue2.5.0的实现，感谢vue团队\n// SEE: https://github.com/vuejs/vue/blob/0948d999f2fddf9f90991956493f976273c5da1f/src/core/util/env.js#L68\n\n\n// var bind = require('./bind');\n\n/**\n * 下一个周期要执行的任务列表\n *\n * @inner\n * @type {Array}\n */\nvar nextTasks = [];\n\n/**\n * 执行下一个周期任务的函数\n *\n * @inner\n * @type {Function}\n */\nvar nextHandler;\n\n/**\n * 浏览器是否支持原生Promise\n * 对Promise做判断，是为了禁用一些不严谨的Promise的polyfill\n *\n * @inner\n * @type {boolean}\n */\nvar isNativePromise = typeof Promise === 'function' && /native code/.test(Promise);\n\n/**\n * 在下一个时间周期运行任务\n *\n * @inner\n * @param {Function} fn 要运行的任务函数\n * @param {Object=} thisArg this指向对象\n */\nfunction nextTick(fn, thisArg) {\n    if (thisArg) {\n        fn = bind(fn, thisArg);\n    }\n    nextTasks.push(fn);\n\n    if (nextHandler) {\n        return;\n    }\n\n    nextHandler = function () {\n        var tasks = nextTasks.slice(0);\n        nextTasks = [];\n        nextHandler = null;\n\n        for (var i = 0, l = tasks.length; i < l; i++) {\n            tasks[i]();\n        }\n    };\n\n    // 非标准方法，但是此方法非常吻合要求。\n    /* istanbul ignore next */\n    if (typeof setImmediate === 'function') {\n        setImmediate(nextHandler);\n    }\n    // 用MessageChannel去做setImmediate的polyfill\n    // 原理是将新的message事件加入到原有的dom events之后\n    else if (typeof MessageChannel === 'function') {\n        var channel = new MessageChannel();\n        var port = channel.port2;\n        channel.port1.onmessage = nextHandler;\n        port.postMessage(1);\n    }\n    // for native app\n    else if (isNativePromise) {\n        Promise.resolve().then(nextHandler);\n    }\n    else {\n        setTimeout(nextHandler, 0);\n    }\n}\n\n// exports = module.exports = nextTick;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file ie版本号\n */\n\n// #[begin] allua\n/**\n * 从userAgent中ie版本号的匹配信息\n *\n * @type {Array}\n */\nvar ieVersionMatch = typeof navigator !== 'undefined'\n    && navigator.userAgent.match(/msie\\s*([0-9]+)/i);\n\n/**\n * ie版本号，非ie时为0\n *\n * @type {number}\n */\nvar ie = ieVersionMatch ? /* istanbul ignore next */ ieVersionMatch[1] - 0 : 0;\n// #[end]\n\n// exports = module.exports = ie;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 是否 IE 并且小于 9\n */\n\n// var ie = require('./ie');\n\n// HACK:\n// 1. IE8下，设置innerHTML时如果以html comment开头，comment会被自动滤掉\n//    为了保证stump存在，需要设置完html后，createComment并appendChild/insertBefore\n// 2. IE8下，innerHTML还不支持custom element，所以需要用div替代，不用createElement\n// 3. 虽然IE8已经优化了字符串+连接，碎片化连接性能不再退化\n//    但是由于上面多个兼容场景都用 < 9 判断，所以字符串连接也沿用\n//    所以结果是IE8下字符串连接用的是数组join的方式\n\n// #[begin] allua\n/**\n * 是否 IE 并且小于 9\n */\nvar ieOldThan9 = ie && /* istanbul ignore next */ ie < 9;\n// #[end]\n\n// exports = module.exports = ieOldThan9;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 触发元素事件\n */\n\n/**\n * 触发元素事件\n *\n * @inner\n * @param {HTMLElement} el DOM元素\n * @param {string} eventName 事件名\n */\nfunction trigger(el, eventName) {\n    var event = document.createEvent('HTMLEvents');\n    event.initEvent(eventName, true, true);\n    el.dispatchEvent(event);\n}\n\n// exports = module.exports = trigger;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解决 IE9 在表单元素中删除字符时不触发事件的问题\n */\n\n// var ie = require('./ie');\n// var on = require('./on');\n// var trigger = require('./trigger');\n\n// #[begin] allua\n/* istanbul ignore if */\nif (ie === 9) {\n    on(document, 'selectionchange', function () {\n        var el = document.activeElement;\n        if (el.tagName === 'TEXTAREA' || el.tagName === 'INPUT') {\n            trigger(el, 'input');\n        }\n    });\n}\n// #[end]\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 自闭合标签表\n */\n\n// var splitStr2Obj = require('../util/split-str-2-obj');\n\n/**\n * 自闭合标签列表\n *\n * @type {Object}\n */\nvar autoCloseTags = splitStr2Obj('area,base,br,col,embed,hr,img,input,keygen,param,source,track,wbr');\n\n// exports = module.exports = autoCloseTags;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file data types\n */\n\n// var bind = require('./bind');\n// var empty = require('./empty');\n// var extend = require('./extend');\n\n// #[begin] error\nvar ANONYMOUS_CLASS_NAME = '<<anonymous>>';\n\n/**\n * 获取精确的类型\n *\n * @NOTE 如果 obj 是一个 DOMElement，我们会返回 `element`；\n *\n * @param  {*} obj 目标\n * @return {string}\n */\nfunction getDataType(obj) {\n    // 不支持element了。data应该是纯数据\n    // if (obj && obj.nodeType === 1) {\n    //     return 'element';\n    // }\n\n    return Object.prototype.toString\n        .call(obj)\n        .slice(8, -1)\n        .toLowerCase();\n}\n// #[end]\n\n/**\n * 创建链式的数据类型校验器\n *\n * @param  {Function} validate 真正的校验器\n * @return {Function}\n */\nfunction createChainableChecker(validate) {\n    /* istanbul ignore next */\n    var chainedChecker = function () {};\n    chainedChecker.isRequired = empty;\n\n    // 只在 error 功能启用时才有实际上的 dataTypes 检测\n    // #[begin] error\n    validate = validate || empty;\n    var checkType = function (isRequired, data, dataName, componentName, fullDataName) {\n\n        var dataValue = data[dataName];\n        var dataType = getDataType(dataValue);\n\n        /* istanbul ignore next */\n        componentName = componentName || ANONYMOUS_CLASS_NAME;\n\n        // 如果是 null 或 undefined，那么要提前返回啦\n        if (dataValue == null) {\n            // 是 required 就报错\n            if (isRequired) {\n                throw new Error('[SAN ERROR] '\n                    + 'The `' + dataName + '` '\n                    + 'is marked as required in `' + componentName + '`, '\n                    + 'but its value is ' + dataType\n                );\n            }\n            // 不是 required，那就是 ok 的\n            return;\n        }\n\n        validate(data, dataName, componentName, fullDataName);\n\n    };\n\n    chainedChecker = bind(checkType, null, false);\n    chainedChecker.isRequired = bind(checkType, null, true);\n    // #[end]\n\n    return chainedChecker;\n\n}\n\n// #[begin] error\n/**\n * 生成主要类型数据校验器\n *\n * @param  {string} type 主类型\n * @return {Function}\n */\nfunction createPrimaryTypeChecker(type) {\n\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n\n        var dataValue = data[dataName];\n        var dataType = getDataType(dataValue);\n\n        if (dataType !== type) {\n            throw new Error('[SAN ERROR] '\n                + 'Invalid ' + componentName + ' data `' + fullDataName + '` of type'\n                + '(' + dataType + ' supplied to ' + componentName + ', '\n                + 'expected ' + type + ')'\n            );\n        }\n\n    });\n\n}\n\n\n\n/**\n * 生成 arrayOf 校验器\n *\n * @param  {Function} arrayItemChecker 数组中每项数据的校验器\n * @return {Function}\n */\nfunction createArrayOfChecker(arrayItemChecker) {\n\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n\n        if (typeof arrayItemChecker !== 'function') {\n            throw new Error('[SAN ERROR] '\n                + 'Data `' + dataName + '` of `' + componentName + '` has invalid '\n                + 'DataType notation inside `arrayOf`, expected `function`'\n            );\n        }\n\n        var dataValue = data[dataName];\n        var dataType = getDataType(dataValue);\n\n        if (dataType !== 'array') {\n            throw new Error('[SAN ERROR] '\n                + 'Invalid ' + componentName + ' data `' + fullDataName + '` of type'\n                + '(' + dataType + ' supplied to ' + componentName + ', '\n                + 'expected array)'\n            );\n        }\n\n        for (var i = 0, len = dataValue.length; i < len; i++) {\n            arrayItemChecker(dataValue, i, componentName, fullDataName + '[' + i + ']');\n        }\n\n    });\n\n}\n\n/**\n * 生成 instanceOf 检测器\n *\n * @param  {Function|Class} expectedClass 期待的类\n * @return {Function}\n */\nfunction createInstanceOfChecker(expectedClass) {\n\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n\n        var dataValue = data[dataName];\n\n        if (dataValue instanceof expectedClass) {\n            return;\n        }\n\n        var dataValueClassName = dataValue.constructor && dataValue.constructor.name\n            ? dataValue.constructor.name\n            : /* istanbul ignore next */ ANONYMOUS_CLASS_NAME;\n\n        /* istanbul ignore next */\n        var expectedClassName = expectedClass.name || ANONYMOUS_CLASS_NAME;\n\n        throw new Error('[SAN ERROR] '\n            + 'Invalid ' + componentName + ' data `' + fullDataName + '` of type'\n            + '(' + dataValueClassName + ' supplied to ' + componentName + ', '\n            + 'expected instance of ' + expectedClassName + ')'\n        );\n\n\n    });\n\n}\n\n/**\n * 生成 shape 校验器\n *\n * @param  {Object} shapeTypes shape 校验规则\n * @return {Function}\n */\nfunction createShapeChecker(shapeTypes) {\n\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n\n        if (getDataType(shapeTypes) !== 'object') {\n            throw new Error('[SAN ERROR] '\n                + 'Data `' + fullDataName + '` of `' + componentName + '` has invalid '\n                + 'DataType notation inside `shape`, expected `object`'\n            );\n        }\n\n        var dataValue = data[dataName];\n        var dataType = getDataType(dataValue);\n\n        if (dataType !== 'object') {\n            throw new Error('[SAN ERROR] '\n                + 'Invalid ' + componentName + ' data `' + fullDataName + '` of type'\n                + '(' + dataType + ' supplied to ' + componentName + ', '\n                + 'expected object)'\n            );\n        }\n\n        for (var shapeKeyName in shapeTypes) {\n            /* istanbul ignore else  */\n            if (shapeTypes.hasOwnProperty(shapeKeyName)) {\n                var checker = shapeTypes[shapeKeyName];\n                if (typeof checker === 'function') {\n                    checker(dataValue, shapeKeyName, componentName, fullDataName + '.' + shapeKeyName);\n                }\n            }\n        }\n\n    });\n\n}\n\n/**\n * 生成 oneOf 校验器\n *\n * @param  {Array} expectedEnumValues 期待的枚举值\n * @return {Function}\n */\nfunction createOneOfChecker(expectedEnumValues) {\n\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n\n        if (getDataType(expectedEnumValues) !== 'array') {\n            throw new Error('[SAN ERROR] '\n                + 'Data `' + fullDataName + '` of `' + componentName + '` has invalid '\n                + 'DataType notation inside `oneOf`, array is expected.'\n            );\n        }\n\n        var dataValue = data[dataName];\n\n        for (var i = 0, len = expectedEnumValues.length; i < len; i++) {\n            if (dataValue === expectedEnumValues[i]) {\n                return;\n            }\n        }\n\n        throw new Error('[SAN ERROR] '\n            + 'Invalid ' + componentName + ' data `' + fullDataName + '` of value'\n            + '(`' + dataValue + '` supplied to ' + componentName + ', '\n            + 'expected one of ' + expectedEnumValues.join(',') + ')'\n        );\n\n    });\n\n}\n\n/**\n * 生成 oneOfType 校验器\n *\n * @param  {Array<Function>} expectedEnumOfTypeValues 期待的枚举类型\n * @return {Function}\n */\nfunction createOneOfTypeChecker(expectedEnumOfTypeValues) {\n\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n\n        if (getDataType(expectedEnumOfTypeValues) !== 'array') {\n            throw new Error('[SAN ERROR] '\n                + 'Data `' + dataName + '` of `' + componentName + '` has invalid '\n                + 'DataType notation inside `oneOf`, array is expected.'\n            );\n        }\n\n        var dataValue = data[dataName];\n\n        for (var i = 0, len = expectedEnumOfTypeValues.length; i < len; i++) {\n\n            var checker = expectedEnumOfTypeValues[i];\n\n            if (typeof checker !== 'function') {\n                continue;\n            }\n\n            try {\n                checker(data, dataName, componentName, fullDataName);\n                // 如果 checker 完成校验没报错，那就返回了\n                return;\n            }\n            catch (e) {\n                // 如果有错误，那么应该把错误吞掉\n            }\n\n        }\n\n        // 所有的可接受 type 都失败了，才丢一个异常\n        throw new Error('[SAN ERROR] '\n            + 'Invalid ' + componentName + ' data `' + dataName + '` of value'\n            + '(`' + dataValue + '` supplied to ' + componentName + ')'\n        );\n\n    });\n\n}\n\n/**\n * 生成 objectOf 校验器\n *\n * @param  {Function} typeChecker 对象属性值校验器\n * @return {Function}\n */\nfunction createObjectOfChecker(typeChecker) {\n\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n\n        if (typeof typeChecker !== 'function') {\n            throw new Error('[SAN ERROR] '\n                + 'Data `' + dataName + '` of `' + componentName + '` has invalid '\n                + 'DataType notation inside `objectOf`, expected function'\n            );\n        }\n\n        var dataValue = data[dataName];\n        var dataType = getDataType(dataValue);\n\n        if (dataType !== 'object') {\n            throw new Error('[SAN ERROR] '\n                + 'Invalid ' + componentName + ' data `' + dataName + '` of type'\n                + '(' + dataType + ' supplied to ' + componentName + ', '\n                + 'expected object)'\n            );\n        }\n\n        for (var dataKeyName in dataValue) {\n            /* istanbul ignore else  */\n            if (dataValue.hasOwnProperty(dataKeyName)) {\n                typeChecker(\n                    dataValue,\n                    dataKeyName,\n                    componentName,\n                    fullDataName + '.' + dataKeyName\n                );\n            }\n        }\n\n\n    });\n\n}\n\n/**\n * 生成 exact 校验器\n *\n * @param  {Object} shapeTypes object 形态定义\n * @return {Function}\n */\nfunction createExactChecker(shapeTypes) {\n\n    return createChainableChecker(function (data, dataName, componentName, fullDataName, secret) {\n\n        if (getDataType(shapeTypes) !== 'object') {\n            throw new Error('[SAN ERROR] '\n                + 'Data `' + dataName + '` of `' + componentName + '` has invalid '\n                + 'DataType notation inside `exact`'\n            );\n        }\n\n        var dataValue = data[dataName];\n        var dataValueType = getDataType(dataValue);\n\n        if (dataValueType !== 'object') {\n            throw new Error('[SAN ERROR] '\n                + 'Invalid data `' + fullDataName + '` of type `' + dataValueType + '`'\n                + '(supplied to ' + componentName + ', expected `object`)'\n            );\n        }\n\n        var allKeys = {};\n\n        // 先合入 shapeTypes\n        extend(allKeys, shapeTypes);\n        // 再合入 dataValue\n        extend(allKeys, dataValue);\n        // 保证 allKeys 的类型正确\n\n        for (var key in allKeys) {\n            /* istanbul ignore else  */\n            if (allKeys.hasOwnProperty(key)) {\n                var checker = shapeTypes[key];\n\n                // dataValue 中有一个多余的数据项\n                if (!checker) {\n                    throw new Error('[SAN ERROR] '\n                        + 'Invalid data `' + fullDataName + '` key `' + key + '` '\n                        + 'supplied to `' + componentName + '`. '\n                        + '(`' + key + '` is not defined in `DataTypes.exact`)'\n                    );\n                }\n\n                if (!(key in dataValue)) {\n                    throw new Error('[SAN ERROR] '\n                        + 'Invalid data `' + fullDataName + '` key `' + key + '` '\n                        + 'supplied to `' + componentName + '`. '\n                        + '(`' + key + '` is marked `required` in `DataTypes.exact`)'\n                    );\n                }\n\n                checker(\n                    dataValue,\n                    key,\n                    componentName,\n                    fullDataName + '.' + key,\n                    secret\n                );\n\n            }\n        }\n\n    });\n\n}\n// #[end]\n\n\n\n/* eslint-disable fecs-valid-var-jsdoc */\nvar DataTypes = {\n    array: createChainableChecker(),\n    object: createChainableChecker(),\n    func: createChainableChecker(),\n    string: createChainableChecker(),\n    number: createChainableChecker(),\n    bool: createChainableChecker(),\n    symbol: createChainableChecker(),\n    any: createChainableChecker,\n    arrayOf: createChainableChecker,\n    instanceOf: createChainableChecker,\n    shape: createChainableChecker,\n    oneOf: createChainableChecker,\n    oneOfType: createChainableChecker,\n    objectOf: createChainableChecker,\n    exact: createChainableChecker\n};\n\n// #[begin] error\nDataTypes = {\n\n    any: createChainableChecker(),\n\n    // 类型检测\n    array: createPrimaryTypeChecker('array'),\n    object: createPrimaryTypeChecker('object'),\n    func: createPrimaryTypeChecker('function'),\n    string: createPrimaryTypeChecker('string'),\n    number: createPrimaryTypeChecker('number'),\n    bool: createPrimaryTypeChecker('boolean'),\n    symbol: createPrimaryTypeChecker('symbol'),\n\n    // 复合类型检测\n    arrayOf: createArrayOfChecker,\n    instanceOf: createInstanceOfChecker,\n    shape: createShapeChecker,\n    oneOf: createOneOfChecker,\n    oneOfType: createOneOfTypeChecker,\n    objectOf: createObjectOfChecker,\n    exact: createExactChecker\n\n};\n/* eslint-enable fecs-valid-var-jsdoc */\n// #[end]\n\n\n// module.exports = DataTypes;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 创建数据检测函数\n */\n\n\n// #[begin] error\n\n/**\n * 创建数据检测函数\n *\n * @param  {Object} dataTypes     数据格式\n * @param  {string} componentName 组件名\n * @return {Function}\n */\nfunction createDataTypesChecker(dataTypes, componentName) {\n\n    /**\n     * 校验 data 是否满足 data types 的格式\n     *\n     * @param  {*} data 数据\n     */\n    return function (data) {\n\n        for (var dataTypeName in dataTypes) {\n            /* istanbul ignore else  */\n            if (dataTypes.hasOwnProperty(dataTypeName)) {\n\n                var dataTypeChecker = dataTypes[dataTypeName];\n\n                if (typeof dataTypeChecker !== 'function') {\n                    throw new Error('[SAN ERROR] '\n                        + componentName + ':' + dataTypeName + ' is invalid; '\n                        + 'it must be a function, usually from san.DataTypes'\n                    );\n                }\n\n                dataTypeChecker(\n                    data,\n                    dataTypeName,\n                    componentName,\n                    dataTypeName\n                );\n\n\n            }\n        }\n\n    };\n\n}\n\n// #[end]\n\n// module.exports = createDataTypesChecker;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 字符串源码读取类\n */\n\n\n/**\n * 字符串源码读取类，用于模板字符串解析过程\n *\n * @class\n * @param {string} source 要读取的字符串\n */\nfunction Walker(source) {\n    this.source = source;\n    this.len = this.source.length;\n    this.index = 0;\n}\n\n/**\n * 获取当前字符码\n *\n * @return {number}\n */\nWalker.prototype.currentCode = function () {\n    return this.source.charCodeAt(this.index);\n};\n\n/**\n * 截取字符串片段\n *\n * @param {number} start 起始位置\n * @param {number} end 结束位置\n * @return {string}\n */\nWalker.prototype.cut = function (start, end) {\n    return this.source.slice(start, end);\n};\n\n/**\n * 向前读取字符\n *\n * @param {number} distance 读取字符数\n */\nWalker.prototype.go = function (distance) {\n    this.index += distance;\n};\n\n/**\n * 读取下一个字符，返回下一个字符的 code\n *\n * @return {number}\n */\nWalker.prototype.nextCode = function () {\n    this.go(1);\n    return this.currentCode();\n};\n\n/**\n * 获取相应位置字符的 code\n *\n * @param {number} index 字符位置\n * @return {number}\n */\nWalker.prototype.charCode = function (index) {\n    return this.source.charCodeAt(index);\n};\n\n/**\n * 向前读取字符，直到遇到指定字符再停止\n * 未指定字符时，当遇到第一个非空格、制表符的字符停止\n *\n * @param {number=} charCode 指定字符的code\n * @return {boolean} 当指定字符时，返回是否碰到指定的字符\n */\nWalker.prototype.goUntil = function (charCode) {\n    var code;\n    while (this.index < this.len && (code = this.currentCode())) {\n        switch (code) {\n            case 32: // 空格 space\n            case 9: // 制表符 tab\n            case 13: // \\r\n            case 10: // \\n\n                this.index++;\n                break;\n\n            default:\n                if (code === charCode) {\n                    this.index++;\n                    return 1;\n                }\n                return;\n        }\n    }\n};\n\n/**\n * 向前读取符合规则的字符片段，并返回规则匹配结果\n *\n * @param {RegExp} reg 字符片段的正则表达式\n * @param {boolean} isMatchStart 是否必须匹配当前位置\n * @return {Array?}\n */\nWalker.prototype.match = function (reg, isMatchStart) {\n    reg.lastIndex = this.index;\n\n    var match = reg.exec(this.source);\n    if (match && (!isMatchStart || this.index === match.index)) {\n        this.index = reg.lastIndex;\n        return match;\n    }\n};\n\n// exports = module.exports = Walker;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 把 kebab case 字符串转换成 camel case\n */\n\n/**\n * 把 kebab case 字符串转换成 camel case\n *\n * @param {string} source 源字符串\n * @return {string}\n */\nfunction kebab2camel(source) {\n    return source.replace(/-+(.)/ig, function (match, alpha) {\n        return alpha.toUpperCase();\n    });\n}\n\n// exports = module.exports = kebab2camel;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 表达式类型\n */\n\n/**\n * 表达式类型\n *\n * @const\n * @type {Object}\n */\nvar ExprType = {\n    STRING: 1,\n    NUMBER: 2,\n    BOOL: 3,\n    ACCESSOR: 4,\n    INTERP: 5,\n    CALL: 6,\n    TEXT: 7,\n    BINARY: 8,\n    UNARY: 9,\n    TERTIARY: 10,\n    OBJECT: 11,\n    ARRAY: 12,\n    NULL: 13\n};\n\n// exports = module.exports = ExprType;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 创建访问表达式对象\n */\n\n// var ExprType = require('./expr-type');\n\n/**\n * 创建访问表达式对象\n *\n * @param {Array} paths 访问路径\n * @return {Object}\n */\nfunction createAccessor(paths) {\n    return {\n        type: 4,\n        paths: paths\n    };\n}\n\n// exports = module.exports = createAccessor;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取字符串\n */\n\n\n// var ExprType = require('./expr-type');\n\n/**\n * 读取字符串\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readString(walker) {\n    var startCode = walker.currentCode();\n    var startIndex = walker.index;\n    var charCode;\n\n    walkLoop: while ((charCode = walker.nextCode())) {\n        switch (charCode) {\n            case 92: // \\\n                walker.go(1);\n                break;\n            case startCode:\n                walker.go(1);\n                break walkLoop;\n        }\n    }\n\n    var literal = walker.cut(startIndex, walker.index);\n    return {\n        type: 1,\n        // 处理字符转义\n        value: (new Function('return ' + literal))()\n    };\n}\n\n// exports = module.exports = readString;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取一元表达式\n */\n\n// var ExprType = require('./expr-type');\n// var readString = require('./read-string');\n// var readNumber = require('./read-number');\n// var readCall = require('./read-call');\n// var readParenthesizedExpr = require('./read-parenthesized-expr');\n// var readTertiaryExpr = require('./read-tertiary-expr');\n\n\n/**\n * 读取一元表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readUnaryExpr(walker) {\n    walker.goUntil();\n\n    switch (walker.currentCode()) {\n        case 33: // !\n            walker.go(1);\n            return {\n                type: 9,\n                expr: readUnaryExpr(walker),\n                operator: 33\n            };\n\n        case 34: // \"\n        case 39: // '\n            return readString(walker);\n\n        case 45: // -\n        case 48: // number\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n            return readNumber(walker);\n\n        case 40: // (\n            return readParenthesizedExpr(walker);\n\n        // array literal\n        case 91: // [\n            walker.go(1);\n            var arrItems = [];\n            while (!walker.goUntil(93)) { // ]\n                var item = {};\n                arrItems.push(item);\n\n                if (walker.currentCode() === 46 && walker.match(/\\.\\.\\.\\s*/g)) {\n                    item.spread = true;\n                }\n\n                item.expr = readTertiaryExpr(walker);\n                walker.goUntil(44); // ,\n            }\n\n            return {\n                type: 12,\n                items: arrItems\n            };\n\n        // object literal\n        case 123: // {\n            walker.go(1);\n            var objItems = [];\n\n            while (!walker.goUntil(125)) { // }\n                var item = {};\n                objItems.push(item);\n\n                if (walker.currentCode() === 46 && walker.match(/\\.\\.\\.\\s*/g)) {\n                    item.spread = true;\n                    item.expr = readTertiaryExpr(walker);\n                }\n                else {\n                    // #[begin] error\n                    var walkerIndexBeforeName = walker.index;\n                    // #[end]\n\n                    item.name = readUnaryExpr(walker);\n\n                    // #[begin] error\n                    if (item.name.type > 4) {\n                        throw new Error(\n                            '[SAN FATAL] unexpect object name: '\n                            + walker.cut(walkerIndexBeforeName, walker.index)\n                        );\n                    }\n                    // #[end]\n\n                    if (walker.goUntil(58)) { // :\n                        item.expr = readTertiaryExpr(walker);\n                    }\n                    else {\n                        item.expr = item.name;\n                    }\n\n                    if (item.name.type === 4) {\n                        item.name = item.name.paths[0];\n                    }\n                }\n\n                walker.goUntil(44); // ,\n            }\n\n            return {\n                type: 11,\n                items: objItems\n            };\n    }\n\n    return readCall(walker);\n}\n\n// exports = module.exports = readUnaryExpr;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取数字\n */\n\n\n// var ExprType = require('./expr-type');\n// var readUnaryExpr = require('./read-unary-expr');\n\n/**\n * 读取数字\n *\n * @inner\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readNumber(walker) {\n    var match = walker.match(/\\s*(-?[0-9]+(\\.[0-9]+)?)/g, 1);\n\n    if (match) {\n        return {\n            type: 2,\n            value: +match[1]\n        };\n    }\n    else if (walker.currentCode() === 45) {\n        walker.go(1);\n        return {\n            type: 9,\n            expr: readUnaryExpr(walker),\n            operator: 45\n        };\n    }\n}\n\n// exports = module.exports = readNumber;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取ident\n */\n\n/**\n * 读取ident\n * 这里的 ident 指标识符(identifier)，也就是通常意义上的变量名\n * 这里默认的变量名规则为：由美元符号($)、数字、字母或者下划线(_)构成的字符串\n *\n * @inner\n * @param {Walker} walker 源码读取对象\n * @return {string}\n */\nfunction readIdent(walker) {\n    var match = walker.match(/\\s*([\\$0-9a-z_]+)/ig, 1);\n\n    // #[begin] error\n    if (!match) {\n        throw new Error('[SAN FATAL] expect an ident: ' + walker.cut(walker.index));\n    }\n    // #[end]\n\n    return match[1];\n}\n\n// exports = module.exports = readIdent;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取三元表达式\n */\n\n// var ExprType = require('./expr-type');\n// var readLogicalORExpr = require('./read-logical-or-expr');\n\n/**\n * 读取三元表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readTertiaryExpr(walker) {\n    var conditional = readLogicalORExpr(walker);\n    walker.goUntil();\n\n    if (walker.currentCode() === 63) { // ?\n        walker.go(1);\n        var yesExpr = readTertiaryExpr(walker);\n        walker.goUntil();\n\n        if (walker.currentCode() === 58) { // :\n            walker.go(1);\n            return {\n                type: 10,\n                segs: [\n                    conditional,\n                    yesExpr,\n                    readTertiaryExpr(walker)\n                ]\n            };\n        }\n    }\n\n    return conditional;\n}\n\n// exports = module.exports = readTertiaryExpr;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取访问表达式\n */\n\n// var ExprType = require('./expr-type');\n// var createAccessor = require('./create-accessor');\n// var readIdent = require('./read-ident');\n// var readTertiaryExpr = require('./read-tertiary-expr');\n\n/**\n * 读取访问表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readAccessor(walker) {\n    var firstSeg = readIdent(walker);\n    switch (firstSeg) {\n        case 'true':\n        case 'false':\n            return {\n                type: 3,\n                value: firstSeg === 'true'\n            };\n        case 'null':\n            return {\n                type: 13\n            };\n    }\n\n    var result = createAccessor([\n        {\n            type: 1,\n            value: firstSeg\n        }\n    ]);\n\n    /* eslint-disable no-constant-condition */\n    accessorLoop: while (1) {\n    /* eslint-enable no-constant-condition */\n\n        switch (walker.currentCode()) {\n            case 46: // .\n                walker.go(1);\n\n                // ident as string\n                result.paths.push({\n                    type: 1,\n                    value: readIdent(walker)\n                });\n                break;\n\n            case 91: // [\n                walker.go(1);\n                result.paths.push(readTertiaryExpr(walker));\n                walker.goUntil(93); // ]\n                break;\n\n            default:\n                break accessorLoop;\n        }\n    }\n\n    return result;\n}\n\n// exports = module.exports = readAccessor;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取调用\n */\n\n// var ExprType = require('./expr-type');\n// var readAccessor = require('./read-accessor');\n// var readTertiaryExpr = require('./read-tertiary-expr');\n\n/**\n * 读取调用\n *\n * @param {Walker} walker 源码读取对象\n * @param {Array=} defaultArgs 默认参数\n * @return {Object}\n */\nfunction readCall(walker, defaultArgs) {\n    walker.goUntil();\n    var result = readAccessor(walker);\n\n    var args;\n    if (walker.goUntil(40)) { // (\n        args = [];\n\n        while (!walker.goUntil(41)) { // )\n            args.push(readTertiaryExpr(walker));\n            walker.goUntil(44); // ,\n        }\n    }\n    else if (defaultArgs) {\n        args = defaultArgs;\n    }\n\n    if (args) {\n        result = {\n            type: 6,\n            name: result,\n            args: args\n        };\n    }\n\n    return result;\n}\n\n// exports = module.exports = readCall;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取括号表达式\n */\n\n// var readTertiaryExpr = require('./read-tertiary-expr');\n\n/**\n * 读取括号表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readParenthesizedExpr(walker) {\n    walker.go(1);\n    var expr = readTertiaryExpr(walker);\n    walker.goUntil(41); // )\n\n    expr.parenthesized = true;\n    return expr;\n}\n\n// exports = module.exports = readParenthesizedExpr;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取乘法表达式\n */\n\n// var ExprType = require('./expr-type');\n// var readUnaryExpr = require('./read-unary-expr');\n\n/**\n * 读取乘法表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readMultiplicativeExpr(walker) {\n    var expr = readUnaryExpr(walker);\n\n    while (1) {\n        walker.goUntil();\n\n        var code = walker.currentCode();\n        switch (code) {\n            case 37: // %\n            case 42: // *\n            case 47: // /\n                walker.go(1);\n                expr = {\n                    type: 8,\n                    operator: code,\n                    segs: [expr, readUnaryExpr(walker)]\n                };\n                continue;\n        }\n\n        break;\n    }\n\n\n    return expr;\n}\n\n// exports = module.exports = readMultiplicativeExpr;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取加法表达式\n */\n\n// var ExprType = require('./expr-type');\n// var readMultiplicativeExpr = require('./read-multiplicative-expr');\n\n\n/**\n * 读取加法表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readAdditiveExpr(walker) {\n    var expr = readMultiplicativeExpr(walker);\n\n    while (1) {\n        walker.goUntil();\n        var code = walker.currentCode();\n\n        switch (code) {\n            case 43: // +\n            case 45: // -\n                walker.go(1);\n                expr = {\n                    type: 8,\n                    operator: code,\n                    segs: [expr, readMultiplicativeExpr(walker)]\n                };\n                continue;\n        }\n\n        break;\n    }\n\n    return expr;\n}\n\n// exports = module.exports = readAdditiveExpr;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取关系判断表达式\n */\n\n// var ExprType = require('./expr-type');\n// var readAdditiveExpr = require('./read-additive-expr');\n\n/**\n * 读取关系判断表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readRelationalExpr(walker) {\n    var expr = readAdditiveExpr(walker);\n    walker.goUntil();\n\n    var code = walker.currentCode();\n    switch (code) {\n        case 60: // <\n        case 62: // >\n            if (walker.nextCode() === 61) {\n                code += 61;\n                walker.go(1);\n            }\n\n            return {\n                type: 8,\n                operator: code,\n                segs: [expr, readAdditiveExpr(walker)]\n            };\n    }\n\n    return expr;\n}\n\n// exports = module.exports = readRelationalExpr;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取相等比对表达式\n */\n\n// var ExprType = require('./expr-type');\n// var readRelationalExpr = require('./read-relational-expr');\n\n/**\n * 读取相等比对表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readEqualityExpr(walker) {\n    var expr = readRelationalExpr(walker);\n    walker.goUntil();\n\n    var code = walker.currentCode();\n    switch (code) {\n        case 61: // =\n        case 33: // !\n            if (walker.nextCode() === 61) {\n                code += 61;\n                if (walker.nextCode() === 61) {\n                    code += 61;\n                    walker.go(1);\n                }\n\n                return {\n                    type: 8,\n                    operator: code,\n                    segs: [expr, readRelationalExpr(walker)]\n                };\n            }\n\n            walker.go(-1);\n    }\n\n    return expr;\n}\n\n// exports = module.exports = readEqualityExpr;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取逻辑与表达式\n */\n\n// var ExprType = require('./expr-type');\n// var readEqualityExpr = require('./read-equality-expr');\n\n/**\n * 读取逻辑与表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readLogicalANDExpr(walker) {\n    var expr = readEqualityExpr(walker);\n    walker.goUntil();\n\n    if (walker.currentCode() === 38) { // &\n        if (walker.nextCode() === 38) {\n            walker.go(1);\n            return {\n                type: 8,\n                operator: 76,\n                segs: [expr, readLogicalANDExpr(walker)]\n            };\n        }\n\n        walker.go(-1);\n    }\n\n    return expr;\n}\n\n// exports = module.exports = readLogicalANDExpr;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取逻辑或表达式\n */\n\n// var ExprType = require('./expr-type');\n// var readLogicalANDExpr = require('./read-logical-and-expr');\n\n/**\n * 读取逻辑或表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readLogicalORExpr(walker) {\n    var expr = readLogicalANDExpr(walker);\n    walker.goUntil();\n\n    if (walker.currentCode() === 124) { // |\n        if (walker.nextCode() === 124) {\n            walker.go(1);\n            return {\n                type: 8,\n                operator: 248,\n                segs: [expr, readLogicalORExpr(walker)]\n            };\n        }\n\n        walker.go(-1);\n    }\n\n    return expr;\n}\n\n// exports = module.exports = readLogicalORExpr;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解析表达式\n */\n\n// var Walker = require('./walker');\n// var readTertiaryExpr = require('./read-tertiary-expr');\n\n/**\n * 解析表达式\n *\n * @param {string} source 源码\n * @return {Object}\n */\nfunction parseExpr(source) {\n    if (!source) {\n        return;\n    }\n\n    if (typeof source === 'object' && source.type) {\n        return source;\n    }\n\n    var expr = readTertiaryExpr(new Walker(source));\n    expr.raw = source;\n    return expr;\n}\n\n// exports = module.exports = parseExpr;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解析调用\n */\n\n\n// var Walker = require('./walker');\n// var ExprType = require('./expr-type');\n// var readCall = require('./read-call');\n\n/**\n * 解析调用\n *\n * @param {string} source 源码\n * @param {Array=} defaultArgs 默认参数\n * @return {Object}\n */\nfunction parseCall(source, defaultArgs) {\n    var expr = readCall(new Walker(source), defaultArgs);\n\n    if (expr.type !== 6) {\n        expr = {\n            type: 6,\n            name: expr,\n            args: defaultArgs || []\n        };\n    }\n\n    expr.raw = source;\n    return expr;\n}\n\n// exports = module.exports = parseCall;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解析插值替换\n */\n\n// var Walker = require('./walker');\n// var readTertiaryExpr = require('./read-tertiary-expr');\n// var ExprType = require('./expr-type');\n// var readCall = require('./read-call');\n\n/**\n * 解析插值替换\n *\n * @param {string} source 源码\n * @return {Object}\n */\nfunction parseInterp(source) {\n    var walker = new Walker(source);\n\n    var interp = {\n        type: 5,\n        expr: readTertiaryExpr(walker),\n        filters: [],\n        raw: source\n    };\n\n    while (walker.goUntil(124)) { // |\n        var callExpr = readCall(walker, []);\n        switch (callExpr.name.paths[0].value) {\n            case 'html':\n                break;\n            case 'raw':\n                interp.original = 1;\n                break;\n            default:\n                interp.filters.push(callExpr);\n        }\n    }\n\n    return interp;\n}\n\n// exports = module.exports = parseInterp;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解码 HTML 字符实体\n */\n\nvar ENTITY_DECODE_MAP = {\n    lt: '<',\n    gt: '>',\n    nbsp: ' ',\n    quot: '\\\"',\n    emsp: '\\u2003',\n    ensp: '\\u2002',\n    thinsp: '\\u2009',\n    copy: '\\xa9',\n    reg: '\\xae',\n    zwnj: '\\u200c',\n    zwj: '\\u200d',\n    amp: '&'\n};\n\n/**\n * 解码 HTML 字符实体\n *\n * @param {string} source 要解码的字符串\n * @return {string}\n */\nfunction decodeHTMLEntity(source) {\n    return source\n        .replace(/&#([0-9]+);/g, function (match, code) {\n            return String.fromCharCode(+code);\n        })\n        .replace(/&#x([0-9a-f]+);/ig, function (match, code) {\n            return String.fromCharCode(parseInt(code, 16));\n        })\n        .replace(/&([a-z]+);/ig, function (match, code) {\n            return ENTITY_DECODE_MAP[code] || match;\n        });\n}\n\n// exports = module.exports = decodeHTMLEntity;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解析文本\n */\n\n// var Walker = require('./walker');\n// var ExprType = require('./expr-type');\n// var parseInterp = require('./parse-interp');\n// var decodeHTMLEntity = require('../util/decode-html-entity');\n\n/**\n * 对字符串进行可用于new RegExp的字面化\n *\n * @inner\n * @param {string} source 需要字面化的字符串\n * @return {string} 字符串字面化结果\n */\nfunction regexpLiteral(source) {\n    return source.replace(/[\\^\\[\\]\\$\\(\\)\\{\\}\\?\\*\\.\\+\\\\]/g, function (c) {\n        return '\\\\' + c;\n    });\n}\n\nvar delimRegCache = {};\n\n/**\n * 解析文本\n *\n * @param {string} source 源码\n * @param {Array?} delimiters 分隔符。默认为 ['{{', '}}']\n * @return {Object}\n */\nfunction parseText(source, delimiters) {\n    delimiters = delimiters || ['{{', '}}'];\n\n    var regCacheKey = delimiters[0] + '>..<' + delimiters[1];\n    var exprStartReg = delimRegCache[regCacheKey];\n    if (!exprStartReg) {\n        exprStartReg = new RegExp(\n            regexpLiteral(delimiters[0])\n                + '\\\\s*([\\\\s\\\\S]+?)\\\\s*'\n                + regexpLiteral(delimiters[1]),\n            'g'\n        );\n        delimRegCache[regCacheKey] = exprStartReg;\n    }\n\n    var exprMatch;\n\n    var walker = new Walker(source);\n    var beforeIndex = 0;\n\n    var expr = {\n        type: 7,\n        segs: []\n    };\n\n    function pushStringToSeg(text) {\n        text && expr.segs.push({\n            type: 1,\n            literal: text,\n            value: decodeHTMLEntity(text)\n        });\n    }\n\n    var delimEndLen = delimiters[1].length;\n    while ((exprMatch = walker.match(exprStartReg)) != null) {\n        var interpSource = exprMatch[1];\n        var interpLen = exprMatch[0].length;\n        if (walker.cut(walker.index + 1 - delimEndLen, walker.index + 1) === delimiters[1]) {\n            interpSource += walker.cut(walker.index, walker.index + 1);\n            walker.go(1);\n            interpLen++;\n        }\n\n        pushStringToSeg(walker.cut(\n            beforeIndex,\n            walker.index - interpLen\n        ));\n\n        var interp = parseInterp(interpSource);\n        expr.original = expr.original || interp.original;\n        expr.segs.push(interp);\n\n        beforeIndex = walker.index;\n    }\n\n    pushStringToSeg(walker.cut(beforeIndex));\n\n\n\n    if (expr.segs.length === 1 && expr.segs[0].type === 1) {\n        expr.value = expr.segs[0].value;\n    }\n\n    return expr;\n}\n\n// exports = module.exports = parseText;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解析指令\n */\n\n\n// var Walker = require('./walker');\n// var parseExpr = require('./parse-expr');\n// var parseCall = require('./parse-call');\n// var parseText = require('./parse-text');\n// var readAccessor = require('./read-accessor');\n// var readUnaryExpr = require('./read-unary-expr');\n\n/**\n * 指令解析器\n *\n * @inner\n * @type {Object}\n */\nvar directiveParsers = {\n    'for': function (value) {\n        var walker = new Walker(value);\n        var match = walker.match(/^\\s*([$0-9a-z_]+)(\\s*,\\s*([$0-9a-z_]+))?\\s+in\\s+/ig, 1);\n\n        if (match) {\n            var directive = {\n                item: match[1],\n                value: readUnaryExpr(walker)\n            };\n\n            if (match[3]) {\n                directive.index = match[3];\n            }\n\n            if (walker.match(/\\s*trackby\\s+/ig, 1)) {\n                var start = walker.index;\n                directive.trackBy = readAccessor(walker);\n                directive.trackBy.raw = walker.cut(start, walker.index);\n            }\n            return directive;\n        }\n\n        // #[begin] error\n        throw new Error('[SAN FATAL] for syntax error: ' + value);\n        // #[end]\n    },\n\n    'ref': function (value, options) {\n        return {\n            value: parseText(value, options.delimiters)\n        };\n    },\n\n    'if': function (value) {\n        return {\n            value: parseExpr(value.replace(/(^\\{\\{|\\}\\}$)/g, ''))\n        };\n    },\n\n    'elif': function (value) {\n        return {\n            value: parseExpr(value.replace(/(^\\{\\{|\\}\\}$)/g, ''))\n        };\n    },\n\n    'else': function () {\n        return {\n            value: {}\n        };\n    },\n\n    'bind': function (value) {\n        return {\n            value: parseExpr(value.replace(/(^\\{\\{|\\}\\}$)/g, ''))\n        };\n    },\n\n    'html': function (value) {\n        return {\n            value: parseExpr(value.replace(/(^\\{\\{|\\}\\}$)/g, ''))\n        };\n    },\n\n    'transition': function (value) {\n        return {\n            value: parseCall(value)\n        };\n    }\n};\n\n/**\n * 解析指令\n *\n * @param {ANode} aNode 抽象节点\n * @param {string} name 指令名称\n * @param {string} value 指令值\n * @param {Object} options 解析参数\n * @param {Array?} options.delimiters 插值分隔符列表\n */\nfunction parseDirective(aNode, name, value, options) {\n    if (name === 'else-if') {\n        name = 'elif';\n    }\n\n    var parser = directiveParsers[name];\n    if (parser) {\n        (aNode.directives[name] = parser(value, options)).raw = value;\n    }\n}\n\n// exports = module.exports = parseDirective;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 对属性信息进行处理\n */\n\n// var ExprType = require('../parser/expr-type');\n\n/**\n * 对属性信息进行处理\n * 对组件的 binds 或者特殊的属性（比如 input 的 checked）需要处理\n *\n * 扁平化：\n * 当 text 解析只有一项时，要么就是 string，要么就是 interp\n * interp 有可能是绑定到组件属性的表达式，不希望被 eval text 成 string\n * 所以这里做个处理，只有一项时直接抽出来\n *\n * bool属性：\n * 当绑定项没有值时，默认为true\n *\n * @param {Object} prop 属性对象\n */\nfunction postProp(prop) {\n    var expr = prop.expr;\n\n    if (expr.type === 7) {\n        switch (expr.segs.length) {\n            case 0:\n                if (prop.raw == null) {\n                    prop.expr = {\n                        type: 3,\n                        value: true\n                    };\n                }\n                break;\n\n            case 1:\n                expr = prop.expr = expr.segs[0];\n                if (expr.type === 5 && expr.filters.length === 0) {\n                    prop.expr = expr.expr;\n                }\n        }\n    }\n}\n\n// exports = module.exports = postProp;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解析抽象节点属性\n */\n\n// var each = require('../util/each');\n// var kebab2camel = require('../util/kebab2camel');\n// var ExprType = require('./expr-type');\n// var createAccessor = require('./create-accessor');\n// var parseExpr = require('./parse-expr');\n// var parseCall = require('./parse-call');\n// var parseText = require('./parse-text');\n// var parseDirective = require('./parse-directive');\n// var postProp = require('./post-prop');\n\n\n/**\n * 解析抽象节点属性\n *\n * @param {ANode} aNode 抽象节点\n * @param {string} name 属性名称\n * @param {string} value 属性值\n * @param {Object} options 解析参数\n * @param {Array?} options.delimiters 插值分隔符列表\n */\nfunction integrateAttr(aNode, name, value, options) {\n    var prefixIndex = name.indexOf('-');\n    var realName;\n    var prefix;\n\n    if (prefixIndex > 0) {\n        prefix = name.slice(0, prefixIndex);\n        realName = name.slice(prefixIndex + 1);\n    }\n\n    switch (prefix) {\n        case 'on':\n            var event = {\n                name: realName,\n                modifier: {}\n            };\n            aNode.events.push(event);\n\n            var colonIndex;\n            while ((colonIndex = value.indexOf(':')) > 0) {\n                var modifier = value.slice(0, colonIndex);\n\n                // eventHandler(\"dd:aa\") 这种情况不能算modifier，需要辨识\n                if (!/^[a-z]+$/i.test(modifier)) {\n                    break;\n                }\n\n                event.modifier[modifier] = true;\n                value = value.slice(colonIndex + 1);\n            }\n\n            event.expr = parseCall(value, [\n                createAccessor([\n                    {type: 1, value: '$event'}\n                ])\n            ]);\n            break;\n\n        case 'san':\n        case 's':\n            parseDirective(aNode, realName, value, options);\n            break;\n\n        case 'prop':\n            integrateProp(aNode, realName, value, options);\n            break;\n\n        case 'var':\n            if (!aNode.vars) {\n                aNode.vars = [];\n            }\n\n            realName = kebab2camel(realName);\n            aNode.vars.push({\n                name: realName,\n                expr: parseExpr(value.replace(/(^\\{\\{|\\}\\}$)/g, ''))\n            });\n            break;\n\n        default:\n            integrateProp(aNode, name, value, options);\n    }\n}\n\n/**\n * 解析抽象节点绑定属性\n *\n * @inner\n * @param {ANode} aNode 抽象节点\n * @param {string} name 属性名称\n * @param {string} rawValue 属性值\n * @param {Object} options 解析参数\n * @param {Array?} options.delimiters 插值分隔符列表\n */\nfunction integrateProp(aNode, name, rawValue, options) {\n    // parse two way binding, e.g. value=\"{=ident=}\"\n    var value = rawValue || '';\n    var xMatch = value.match(/^\\{=\\s*(.*?)\\s*=\\}$/);\n\n    if (xMatch) {\n        aNode.props.push({\n            name: name,\n            expr: parseExpr(xMatch[1]),\n            x: 1,\n            raw: value\n        });\n\n        return;\n    }\n\n    // parse normal prop\n    var prop = {\n        name: name,\n        expr: parseText(value, options.delimiters),\n        raw: rawValue\n    };\n\n    // 这里不能把只有一个插值的属性抽取\n    // 因为插值里的值可能是html片段，容易被注入\n    // 组件的数据绑定在组件init时做抽取\n    switch (name) {\n        case 'class':\n        case 'style':\n            each(prop.expr.segs, function (seg) {\n                if (seg.type === 5) {\n                    seg.filters.push({\n                        type: 6,\n                        name: createAccessor([\n                            {\n                                type: 1,\n                                value: '_' + prop.name\n                            }\n                        ]),\n                        args: []\n                    });\n                }\n            });\n            break;\n\n        case 'checked':\n            if (aNode.tagName === 'input') {\n                postProp(prop);\n            }\n            break;\n    }\n\n    aNode.props.push(prop);\n}\n\n\n// exports = module.exports = integrateAttr;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解析模板\n */\n\n\n// var Walker = require('./walker');\n// var integrateAttr = require('./integrate-attr');\n// var parseText = require('./parse-text');\n// var svgTags = require('../browser/svg-tags');\n// var autoCloseTags = require('../browser/auto-close-tags');\n\n// #[begin] error\nfunction getXPath(stack, currentTagName) {\n    var path = ['ROOT'];\n    for (var i = 1, len = stack.length; i < len; i++) {\n        path.push(stack[i].tagName);\n    }\n    if (currentTagName) {\n        path.push(currentTagName);\n    }\n    return path.join('>');\n}\n// #[end]\n\n/* eslint-disable fecs-max-statements */\n\n/**\n * 解析 template\n *\n * @param {string} source template源码\n * @param {Object?} options 解析参数\n * @param {string?} options.trimWhitespace 空白文本的处理策略。none|blank|all\n * @param {Array?} options.delimiters 插值分隔符列表\n * @return {ANode}\n */\nfunction parseTemplate(source, options) {\n    options = options || {};\n    options.trimWhitespace = options.trimWhitespace || 'none';\n\n    var rootNode = {\n        directives: {},\n        props: [],\n        events: [],\n        children: []\n    };\n\n    if (typeof source !== 'string') {\n        return rootNode;\n    }\n\n    source = source.replace(/\x3c!--([\\s\\S]*?)--\x3e/mg, '').replace(/(^\\s+|\\s+$)/g, '');\n    var walker = new Walker(source);\n\n    var tagReg = /<(\\/)?([a-z][a-z0-9-]*)\\s*/ig;\n    var attrReg = /([-:0-9a-z\\[\\]_]+)(\\s*=\\s*(['\"])([^\\3]*?)\\3)?\\s*/ig;\n\n    var tagMatch;\n    var currentNode = rootNode;\n    var stack = [rootNode];\n    var stackIndex = 0;\n    var beforeLastIndex = 0;\n\n    while ((tagMatch = walker.match(tagReg)) != null) {\n        var tagMatchStart = walker.index - tagMatch[0].length;\n        var tagEnd = tagMatch[1];\n        var tagName = tagMatch[2];\n        if (!svgTags[tagName]) {\n            tagName = tagName.toLowerCase();\n        }\n\n        // 62: >\n        // 47: /\n        // 处理 </xxxx >\n        if (tagEnd) {\n            if (walker.currentCode() === 62) {\n                // 满足关闭标签的条件时，关闭标签\n                // 向上查找到对应标签，找不到时忽略关闭\n                var closeIndex = stackIndex;\n\n                // #[begin] error\n                // 如果正在闭合一个自闭合的标签，例如 </input>，报错\n                if (autoCloseTags[tagName]) {\n                    throw new Error(''\n                        + '[SAN ERROR] ' + getXPath(stack, tagName) + ' is a `auto closed` tag, '\n                        + 'so it cannot be closed with </' + tagName + '>'\n                    );\n                }\n\n                // 如果关闭的 tag 和当前打开的不一致，报错\n                if (\n                    stack[closeIndex].tagName !== tagName\n                    // 这里要把 table 自动添加 tbody 的情况给去掉\n                    && !(tagName === 'table' && stack[closeIndex].tagName === 'tbody')\n                ) {\n                    throw new Error('[SAN ERROR] ' + getXPath(stack) + ' is closed with ' + tagName);\n                }\n                // #[end]\n\n\n                pushTextNode(source.slice(beforeLastIndex, tagMatchStart));\n                while (closeIndex > 0 && stack[closeIndex].tagName !== tagName) {\n                    closeIndex--;\n                }\n\n                if (closeIndex > 0) {\n                    stackIndex = closeIndex - 1;\n                    currentNode = stack[stackIndex];\n                }\n                walker.go(1);\n            }\n            // #[begin] error\n            else {\n                // 处理 </xxx 非正常闭合标签\n\n                // 如果闭合标签时，匹配后的下一个字符是 <，即下一个标签的开始，那么当前闭合标签未闭合\n                if (walker.currentCode() === 60) {\n                    throw new Error(''\n                        + '[SAN ERROR] ' + getXPath(stack)\n                        + '\\'s close tag not closed'\n                    );\n                }\n\n                // 闭合标签有属性\n                throw new Error(''\n                    + '[SAN ERROR] ' + getXPath(stack)\n                    + '\\'s close tag has attributes'\n                );\n            }\n            // #[end]\n        }\n        else {\n            var aElement = {\n                directives: {},\n                props: [],\n                events: [],\n                children: [],\n                tagName: tagName\n            };\n            var tagClose = autoCloseTags[tagName];\n\n            // 解析 attributes\n\n            /* eslint-disable no-constant-condition */\n            while (1) {\n            /* eslint-enable no-constant-condition */\n\n                var nextCharCode = walker.currentCode();\n\n                // 标签结束时跳出 attributes 读取\n                // 标签可能直接结束或闭合结束\n                if (nextCharCode === 62) {\n                    walker.go(1);\n                    break;\n                }\n\n                // 遇到 /> 按闭合处理\n                if (nextCharCode === 47\n                    && walker.charCode(walker.index + 1) === 62\n                ) {\n                    walker.go(2);\n                    tagClose = 1;\n                    break;\n                }\n\n                // template 串结束了\n                // 这时候，说明这个读取周期的所有内容，都是text\n                if (!nextCharCode) {\n                    pushTextNode(walker.cut(beforeLastIndex));\n                    aElement = null;\n                    break;\n                }\n\n                // #[begin] error\n                // 在处理一个 open 标签时，如果遇到了 <， 即下一个标签的开始，则当前标签未能正常闭合，报错\n                if (nextCharCode === 60) {\n                    throw new Error('[SAN ERROR] ' + getXPath(stack, tagName) + ' is not closed');\n                }\n                // #[end]\n\n                // 读取 attribute\n                var attrMatch = walker.match(attrReg);\n                if (attrMatch) {\n\n                    // #[begin] error\n                    // 如果属性有 =，但没取到 value，报错\n                    if (\n                        walker.charCode(attrMatch.index + attrMatch[1].length) === 61\n                        && !attrMatch[2]\n                    ) {\n                        throw new Error(''\n                            + '[SAN ERROR] ' + getXPath(stack, tagName) + ' attribute `'\n                            + attrMatch[1] + '` is not wrapped with \"\"'\n                        );\n                    }\n                    // #[end]\n\n                    integrateAttr(\n                        aElement,\n                        attrMatch[1],\n                        attrMatch[3] ? attrMatch[4] : void(0),\n                        options\n                    );\n                }\n\n            }\n\n            if (aElement) {\n                pushTextNode(source.slice(beforeLastIndex, tagMatchStart));\n\n                // match if directive for else/elif directive\n                var elseDirective = aElement.directives['else'] // eslint-disable-line dot-notation\n                    || aElement.directives.elif;\n\n                if (elseDirective) {\n                    var parentChildrenLen = currentNode.children.length;\n                    var ifANode = null;\n\n                    while (parentChildrenLen--) {\n                        var parentChild = currentNode.children[parentChildrenLen];\n                        if (parentChild.textExpr) {\n                            currentNode.children.splice(parentChildrenLen, 1);\n                            continue;\n                        }\n\n                        ifANode = parentChild;\n                        break;\n                    }\n\n                    // #[begin] error\n                    if (!ifANode || !parentChild.directives['if']) { // eslint-disable-line dot-notation\n                        throw new Error('[SAN FATEL] else not match if.');\n                    }\n                    // #[end]\n\n                    if (ifANode) {\n                        ifANode.elses = ifANode.elses || [];\n                        ifANode.elses.push(aElement);\n                    }\n                }\n                else {\n                    if (aElement.tagName === 'tr' && currentNode.tagName === 'table') {\n                        var tbodyNode = {\n                            directives: {},\n                            props: [],\n                            events: [],\n                            children: [],\n                            tagName: 'tbody'\n                        };\n                        currentNode.children.push(tbodyNode);\n                        currentNode = tbodyNode;\n                        stack[++stackIndex] = tbodyNode;\n                    }\n\n                    currentNode.children.push(aElement);\n                }\n\n                if (!tagClose) {\n                    currentNode = aElement;\n                    stack[++stackIndex] = aElement;\n                }\n            }\n\n        }\n\n        beforeLastIndex = walker.index;\n    }\n\n    pushTextNode(walker.cut(beforeLastIndex));\n\n    return rootNode;\n\n    /**\n     * 在读取栈中添加文本节点\n     *\n     * @inner\n     * @param {string} text 文本内容\n     */\n    function pushTextNode(text) {\n        switch (options.trimWhitespace) {\n            case 'blank':\n                if (/^\\s+$/.test(text)) {\n                    text = null;\n                }\n                break;\n\n            case 'all':\n                text = text.replace(/(^\\s+|\\s+$)/g, '');\n                break;\n        }\n\n        if (text) {\n            currentNode.children.push({\n                textExpr: parseText(text, options.delimiters)\n            });\n        }\n    }\n}\n\n/* eslint-enable fecs-max-statements */\n\n// exports = module.exports = parseTemplate;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 默认filter\n */\n\n\n/* eslint-disable fecs-camelcase */\n\n\nfunction defaultStyleFilter(source) {\n    if (typeof source === 'object') {\n        var result = '';\n        for (var key in source) {\n            /* istanbul ignore else  */\n            if (source.hasOwnProperty(key)) {\n                result += key + ':' + source[key] + ';';\n            }\n        }\n\n        return result;\n    }\n\n    return source;\n}\n\n/**\n * 默认filter\n *\n * @const\n * @type {Object}\n */\nvar DEFAULT_FILTERS = {\n\n    /**\n     * URL编码filter\n     *\n     * @param {string} source 源串\n     * @return {string} 替换结果串\n     */\n    url: encodeURIComponent,\n\n    _class: function (source) {\n        if (source instanceof Array) {\n            return source.join(' ');\n        }\n\n        return source;\n    },\n    _style: defaultStyleFilter,\n\n    _xclass: function (outer, inner) {\n        if (outer instanceof Array) {\n            outer = outer.join(' ');\n        }\n\n        if (outer) {\n            if (inner) {\n                return inner + ' ' + outer;\n            }\n\n            return outer;\n        }\n\n        return inner;\n    },\n\n    _xstyle: function (outer, inner) {\n        outer = outer && defaultStyleFilter(outer);\n        if (outer) {\n            if (inner) {\n                return inner + ';' + outer;\n            }\n\n            return outer;\n        }\n\n        return inner;\n    }\n};\n/* eslint-enable fecs-camelcase */\n\n// exports = module.exports = DEFAULT_FILTERS;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 表达式计算\n */\n\n// var ExprType = require('../parser/expr-type');\n// var extend = require('../util/extend');\n// var DEFAULT_FILTERS = require('./default-filters');\n// var evalArgs = require('./eval-args');\n\n/**\n * 计算表达式的值\n *\n * @param {Object} expr 表达式对象\n * @param {Data} data 数据容器对象\n * @param {Component=} owner 所属组件环境\n * @return {*}\n */\nfunction evalExpr(expr, data, owner) {\n    if (expr.value != null) {\n        return expr.value;\n    }\n\n    var value;\n\n    switch (expr.type) {\n        case 13:\n            return null;\n\n        case 9:\n            value = evalExpr(expr.expr, data, owner);\n            switch (expr.operator) {\n                case 33:\n                    value = !value;\n                    break;\n\n                case 45:\n                    value = 0 - value;\n                    break;\n            }\n            return value;\n\n        case 8:\n            value = evalExpr(expr.segs[0], data, owner);\n            var rightValue = evalExpr(expr.segs[1], data, owner);\n\n            /* eslint-disable eqeqeq */\n            switch (expr.operator) {\n                case 37:\n                    value = value % rightValue;\n                    break;\n\n                case 43:\n                    value = value + rightValue;\n                    break;\n\n                case 45:\n                    value = value - rightValue;\n                    break;\n\n                case 42:\n                    value = value * rightValue;\n                    break;\n\n                case 47:\n                    value = value / rightValue;\n                    break;\n\n                case 60:\n                    value = value < rightValue;\n                    break;\n\n                case 62:\n                    value = value > rightValue;\n                    break;\n\n                case 76:\n                    value = value && rightValue;\n                    break;\n\n                case 94:\n                    value = value != rightValue;\n                    break;\n\n                case 121:\n                    value = value <= rightValue;\n                    break;\n\n                case 122:\n                    value = value == rightValue;\n                    break;\n\n                case 123:\n                    value = value >= rightValue;\n                    break;\n\n                case 155:\n                    value = value !== rightValue;\n                    break;\n\n                case 183:\n                    value = value === rightValue;\n                    break;\n\n                case 248:\n                    value = value || rightValue;\n                    break;\n\n            }\n            /* eslint-enable eqeqeq */\n            return value;\n\n        case 10:\n            return evalExpr(\n                expr.segs[evalExpr(expr.segs[0], data, owner) ? 1 : 2],\n                data,\n                owner\n            );\n\n\n        case 12:\n            value = [];\n            for (var i = 0, l = expr.items.length; i < l; i++) {\n                var item = expr.items[i];\n                var itemValue = evalExpr(item.expr, data, owner);\n\n                if (item.spread) {\n                    itemValue && (value = value.concat(itemValue));\n                }\n                else {\n                    value.push(itemValue);\n                }\n            }\n            return value;\n\n        case 11:\n            value = {};\n            for (var i = 0, l = expr.items.length; i < l; i++) {\n                var item = expr.items[i];\n                var itemValue = evalExpr(item.expr, data, owner);\n\n                if (item.spread) {\n                    itemValue && extend(value, itemValue);\n                }\n                else {\n                    value[evalExpr(item.name, data, owner)] = itemValue;\n                }\n            }\n            return value;\n\n        case 4:\n            return data.get(expr);\n\n\n        case 5:\n            value = evalExpr(expr.expr, data, owner);\n\n            if (owner) {\n                for (var i = 0, l = expr.filters.length; i < l; i++) {\n                    var filter = expr.filters[i];\n                    var filterName = filter.name.paths[0].value;\n\n                    switch (filterName) {\n                        case 'url':\n                        case '_class':\n                        case '_style':\n                            value = DEFAULT_FILTERS[filterName](value);\n                            break;\n\n                        case '_xclass':\n                        case '_xstyle':\n                            value = value = DEFAULT_FILTERS[filterName](value, evalExpr(filter.args[0], data, owner));\n                            break;\n\n                        default:\n                            value = owner.filters[filterName] && owner.filters[filterName].apply(\n                                owner,\n                                [value].concat(evalArgs(filter.args, data, owner))\n                            );\n                    }\n                }\n            }\n\n            if (value == null) {\n                value = '';\n            }\n\n            return value;\n\n        case 6:\n            if (owner && expr.name.type === 4) {\n                var method = owner;\n                var pathsLen = expr.name.paths.length;\n\n                for (var i = 0; method && i < pathsLen; i++) {\n                    method = method[evalExpr(expr.name.paths[i], data, owner)];\n                }\n\n                if (method) {\n                    value = method.apply(owner, evalArgs(expr.args, data, owner));\n                }\n            }\n\n            break;\n\n        /* eslint-disable no-redeclare */\n        case 7:\n            var buf = '';\n            for (var i = 0, l = expr.segs.length; i < l; i++) {\n                var seg = expr.segs[i];\n                buf += seg.value || evalExpr(seg, data, owner);\n            }\n            return buf;\n    }\n\n    return value;\n}\n\n// exports = module.exports = evalExpr;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 为函数调用计算参数数组的值\n */\n\n\n// var evalExpr = require('./eval-expr');\n\n/**\n * 为函数调用计算参数数组的值\n *\n * @param {Array} args 参数表达式列表\n * @param {Data} data 数据环境\n * @param {Component} owner 组件环境\n * @return {Array}\n */\nfunction evalArgs(args, data, owner) {\n    var result = [];\n    for (var i = 0; i < args.length; i++) {\n        result.push(evalExpr(args[i], data, owner));\n    }\n\n    return result;\n}\n\n// exports = module.exports = evalArgs;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 比较变更表达式与目标表达式之间的关系\n */\n\n// var ExprType = require('../parser/expr-type');\n// var evalExpr = require('./eval-expr');\n\n/**\n * 判断变更表达式与多个表达式之间的关系，0为完全没关系，1为有关系\n *\n * @inner\n * @param {Object} changeExpr 目标表达式\n * @param {Array} exprs 多个源表达式\n * @param {Data} data 表达式所属数据环境\n * @return {number}\n */\nfunction changeExprCompareExprs(changeExpr, exprs, data) {\n    for (var i = 0, l = exprs.length; i < l; i++) {\n        if (changeExprCompare(changeExpr, exprs[i], data)) {\n            return 1;\n        }\n    }\n\n    return 0;\n}\n\n/**\n * 比较变更表达式与目标表达式之间的关系，用于视图更新判断\n * 视图更新需要根据其关系，做出相应的更新行为\n *\n * 0: 完全没关系\n * 1: 变更表达式是目标表达式的母项(如a与a.b) 或 表示需要完全变化\n * 2: 变更表达式是目标表达式相等\n * >2: 变更表达式是目标表达式的子项，如a.b.c与a.b\n *\n * @param {Object} changeExpr 变更表达式\n * @param {Object} expr 要比较的目标表达式\n * @param {Data} data 表达式所属数据环境\n * @return {number}\n */\nfunction changeExprCompare(changeExpr, expr, data) {\n    var result = 0;\n    if (!expr.changeCache) {\n        expr.changeCache = {};\n    }\n\n    if (changeExpr.raw && !expr.dynamic) {\n        if (expr.changeCache[changeExpr.raw] != null) {\n            return expr.changeCache[changeExpr.raw];\n        }\n    }\n\n    switch (expr.type) {\n        case 4:\n            var paths = expr.paths;\n            var pathsLen = paths.length;\n            var changePaths = changeExpr.paths;\n            var changeLen = changePaths.length;\n\n            result = 1;\n            for (var i = 0; i < pathsLen; i++) {\n                var pathExpr = paths[i];\n                var pathExprValue = pathExpr.value;\n\n                if (pathExprValue == null && changeExprCompare(changeExpr, pathExpr, data)) {\n                    result = 1;\n                    break;\n                }\n\n                if (result && i < changeLen\n                    /* eslint-disable eqeqeq */\n                    && (pathExprValue || evalExpr(pathExpr, data)) != changePaths[i].value\n                    /* eslint-enable eqeqeq */\n                ) {\n                    result = 0;\n                }\n            }\n\n            if (result) {\n                result = Math.max(1, changeLen - pathsLen + 2);\n            }\n            break;\n\n        case 9:\n            result = changeExprCompare(changeExpr, expr.expr, data) ? 1 : 0;\n            break;\n\n        case 7:\n        case 8:\n        case 10:\n            result = changeExprCompareExprs(changeExpr, expr.segs, data);\n            break;\n\n        case 12:\n        case 11:\n            for (var i = 0; i < expr.items.length; i++) {\n                if (changeExprCompare(changeExpr, expr.items[i].expr, data)) {\n                    result = 1;\n                    break;\n                }\n            }\n\n            break;\n\n        case 5:\n            if (changeExprCompare(changeExpr, expr.expr, data)) {\n                result = 1;\n            }\n            else {\n                for (var i = 0; i < expr.filters.length; i++) {\n                    if (changeExprCompareExprs(changeExpr, expr.filters[i].args, data)) {\n                        result = 1;\n                        break;\n                    }\n                }\n            }\n\n            break;\n\n        case 6:\n            if (changeExprCompareExprs(changeExpr, expr.name.paths, data)\n                || changeExprCompareExprs(changeExpr, expr.args, data)\n            ) {\n                result = 1;\n            }\n            break;\n    }\n\n    if (changeExpr.raw && !expr.dynamic) {\n        expr.changeCache[changeExpr.raw] = result;\n    }\n\n    return result;\n}\n\n// exports = module.exports = changeExprCompare;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 数据变更类型枚举\n */\n\n/**\n * 数据变更类型枚举\n *\n * @const\n * @type {Object}\n */\nvar DataChangeType = {\n    SET: 1,\n    SPLICE: 2\n};\n\n// exports = module.exports = DataChangeType;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 生命周期类\n */\n\nfunction lifeCycleOwnIs(name) {\n    return this[name];\n}\n\n/* eslint-disable fecs-valid-var-jsdoc */\n/**\n * 节点生命周期信息\n *\n * @inner\n * @type {Object}\n */\nvar LifeCycle = {\n    start: {},\n\n    compiled: {\n        is: lifeCycleOwnIs,\n        compiled: true\n    },\n\n    inited: {\n        is: lifeCycleOwnIs,\n        compiled: true,\n        inited: true\n    },\n\n    created: {\n        is: lifeCycleOwnIs,\n        compiled: true,\n        inited: true,\n        created: true\n    },\n\n    attached: {\n        is: lifeCycleOwnIs,\n        compiled: true,\n        inited: true,\n        created: true,\n        attached: true\n    },\n\n    leaving: {\n        is: lifeCycleOwnIs,\n        compiled: true,\n        inited: true,\n        created: true,\n        attached: true,\n        leaving: true\n    },\n\n    detached: {\n        is: lifeCycleOwnIs,\n        compiled: true,\n        inited: true,\n        created: true,\n        detached: true\n    },\n\n    disposed: {\n        is: lifeCycleOwnIs,\n        disposed: true\n    }\n};\n/* eslint-enable fecs-valid-var-jsdoc */\n\n\n// exports = module.exports = LifeCycle;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 节点类型\n */\n\n/**\n * 节点类型\n *\n * @const\n * @type {Object}\n */\nvar NodeType = {\n    TEXT: 1,\n    IF: 2,\n    FOR: 3,\n    ELEM: 4,\n    CMPT: 5,\n    SLOT: 6,\n    TPL: 7,\n    LOADER: 8\n};\n\n// exports = module.exports = NodeType;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 获取 ANode props 数组中相应 name 的项\n */\n\n/**\n * 获取 ANode props 数组中相应 name 的项\n *\n * @param {Object} aNode ANode对象\n * @param {string} name name属性匹配串\n * @return {Object}\n */\nfunction getANodeProp(aNode, name) {\n    var index = aNode.hotspot.props[name];\n    if (index != null) {\n        return aNode.props[index];\n    }\n}\n\n// exports = module.exports = getANodeProp;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 获取属性处理对象\n */\n\n// var contains = require('../util/contains');\n// var empty = require('../util/empty');\n// var svgTags = require('../browser/svg-tags');\n// var ie = require('../browser/ie');\n// var evalExpr = require('../runtime/eval-expr');\n// var getANodeProp = require('./get-a-node-prop');\n// var NodeType = require('./node-type');\n\n\n/**\n * HTML 属性和 DOM 操作属性的对照表\n *\n * @inner\n * @const\n * @type {Object}\n */\nvar HTML_ATTR_PROP_MAP = {\n    'readonly': 'readOnly',\n    'cellpadding': 'cellPadding',\n    'cellspacing': 'cellSpacing',\n    'colspan': 'colSpan',\n    'rowspan': 'rowSpan',\n    'valign': 'vAlign',\n    'usemap': 'useMap',\n    'frameborder': 'frameBorder',\n    'for': 'htmlFor'\n};\n\n/**\n * 默认的元素的属性设置的变换方法\n *\n * @inner\n * @type {Object}\n */\n\n\nfunction defaultElementPropHandler(el, value, name) {\n    var propName = HTML_ATTR_PROP_MAP[name] || name;\n    value = value == null ? '' : value;\n    // input 的 type 是个特殊属性，其实也应该用 setAttribute\n    // 但是 type 不应该运行时动态改变，否则会有兼容性问题\n    // 所以这里直接就不管了\n    if (propName in el) {\n        el[propName] = value;\n    }\n    else {\n        el.setAttribute(name, value);\n    }\n\n    // attribute 绑定的是 text，所以不会出现 null 的情况，这里无需处理\n    // 换句话来说，san 是做不到 attribute 时有时无的\n    // if (value == null) {\n    //     el.removeAttribute(name);\n    // }\n}\n\nfunction svgPropHandler(el, value, name) {\n    el.setAttribute(name, value);\n}\n\nfunction boolPropHandler(el, value, name, element, prop) {\n    var propName = HTML_ATTR_PROP_MAP[name] || name;\n    el[propName] = !!(prop && prop.raw == null\n        || value && value !== 'false' && value !== '0');\n}\n\n/* eslint-disable fecs-properties-quote */\n/**\n * 默认的属性设置变换方法\n *\n * @inner\n * @type {Object}\n */\nvar defaultElementPropHandlers = {\n    style: function (el, value) {\n        el.style.cssText = value;\n    },\n\n    'class': function (el, value) { // eslint-disable-line\n        if (\n            // #[begin] allua\n            ie\n            ||\n            // #[end]\n            el.className !== value\n        ) {\n            el.className = value;\n        }\n    },\n\n    slot: empty,\n\n    draggable: boolPropHandler\n};\n/* eslint-enable fecs-properties-quote */\n\nvar analInputChecker = {\n    checkbox: contains,\n    radio: function (a, b) {\n        return a === b;\n    }\n};\n\nfunction analInputCheckedState(element, value) {\n    var bindValue = getANodeProp(element.aNode, 'value');\n    var bindType = getANodeProp(element.aNode, 'type');\n\n    if (bindValue && bindType) {\n        var type = evalExpr(bindType.expr, element.scope, element.owner);\n\n        if (analInputChecker[type]) {\n            var bindChecked = getANodeProp(element.aNode, 'checked');\n            if (bindChecked != null && !bindChecked.hintExpr) {\n                bindChecked.hintExpr = bindValue.expr;\n            }\n\n            return !!analInputChecker[type](\n                value,\n                element.data\n                    ? evalExpr(bindValue.expr, element.data, element)\n                    : evalExpr(bindValue.expr, element.scope, element.owner)\n            );\n        }\n    }\n}\n\nvar elementPropHandlers = {\n    input: {\n        multiple: boolPropHandler,\n        checked: function (el, value, name, element) {\n            var state = analInputCheckedState(element, value);\n\n            boolPropHandler(\n                el,\n                state != null ? state : value,\n                'checked',\n                element\n            );\n\n            // #[begin] allua\n            // 代码不用抽出来防重复，allua内的代码在现代浏览器版本会被编译时干掉，gzip也会处理重复问题\n            // see: #378\n            /* istanbul ignore if */\n            if (ie && ie < 8 && !element.lifeCycle.attached) {\n                boolPropHandler(\n                    el,\n                    state != null ? state : value,\n                    'defaultChecked',\n                    element\n                );\n            }\n            // #[end]\n        },\n        readonly: boolPropHandler,\n        disabled: boolPropHandler,\n        autofocus: boolPropHandler,\n        required: boolPropHandler\n    },\n\n    option: {\n        value: function (el, value, name, element) {\n            defaultElementPropHandler(el, value, name, element);\n\n            if (isOptionSelected(element, value)) {\n                el.selected = true;\n            }\n        }\n    },\n\n    select: {\n        value: function (el, value) {\n            el.value = value || '';\n        },\n        readonly: boolPropHandler,\n        disabled: boolPropHandler,\n        autofocus: boolPropHandler,\n        required: boolPropHandler\n    },\n\n    textarea: {\n        readonly: boolPropHandler,\n        disabled: boolPropHandler,\n        autofocus: boolPropHandler,\n        required: boolPropHandler\n    },\n\n    button: {\n        disabled: boolPropHandler,\n        autofocus: boolPropHandler,\n        type: function (el, value) {\n            el.setAttribute('type', value);\n        }\n    }\n};\n\nfunction isOptionSelected(element, value) {\n    var parentSelect = element.parent;\n    while (parentSelect) {\n        if (parentSelect.tagName === 'select') {\n            break;\n        }\n\n        parentSelect = parentSelect.parent;\n    }\n\n\n    if (parentSelect) {\n        var selectValue = null;\n        var prop;\n        var expr;\n\n        if ((prop = getANodeProp(parentSelect.aNode, 'value'))\n            && (expr = prop.expr)\n        ) {\n            selectValue = parentSelect.nodeType === 5\n                ? evalExpr(expr, parentSelect.data, parentSelect)\n                : evalExpr(expr, parentSelect.scope, parentSelect.owner)\n                || '';\n        }\n\n        if (selectValue === value) {\n            return 1;\n        }\n    }\n}\n\n\n/**\n * 获取属性处理对象\n *\n * @param {string} tagName 元素tag\n * @param {string} attrName 属性名\n * @return {Object}\n */\nfunction getPropHandler(tagName, attrName) {\n    if (svgTags[tagName]) {\n        return svgPropHandler;\n    }\n\n    var tagPropHandlers = elementPropHandlers[tagName];\n    if (!tagPropHandlers) {\n        tagPropHandlers = elementPropHandlers[tagName] = {};\n    }\n\n    var propHandler = tagPropHandlers[attrName];\n    if (!propHandler) {\n        propHandler = defaultElementPropHandlers[attrName] || defaultElementPropHandler;\n        tagPropHandlers[attrName] = propHandler;\n    }\n\n    return propHandler;\n}\n\n// exports = module.exports = getPropHandler;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 判断变更是否来源于元素\n */\n\n/**\n * 判断变更是否来源于元素，来源于元素时，视图更新需要阻断\n *\n * @param {Object} change 变更对象\n * @param {Element} element 元素\n * @param {string?} propName 属性名，可选。需要精确判断是否来源于此属性时传入\n * @return {boolean}\n */\nfunction isDataChangeByElement(change, element, propName) {\n    var changeTarget = change.option.target;\n    return changeTarget && changeTarget.node === element\n        && (!propName || changeTarget.prop === propName);\n}\n\n// exports = module.exports = isDataChangeByElement;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 在对象上使用accessor表达式查找方法\n */\n\n// var evalExpr = require('../runtime/eval-expr');\n\n/**\n * 在对象上使用accessor表达式查找方法\n *\n * @param {Object} source 源对象\n * @param {Object} nameExpr 表达式\n * @param {Data} data 所属数据环境\n * @return {Function}\n */\nfunction findMethod(source, nameExpr, data) {\n    var method = source;\n\n    for (var i = 0; method != null && i < nameExpr.paths.length; i++) {\n        method = method[evalExpr(nameExpr.paths[i], data)];\n    }\n\n    return method;\n}\n\n// exports = module.exports = findMethod;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 数据类\n */\n\n// var ExprType = require('../parser/expr-type');\n// var evalExpr = require('./eval-expr');\n// var DataChangeType = require('./data-change-type');\n// var createAccessor = require('../parser/create-accessor');\n// var parseExpr = require('../parser/parse-expr');\n\n/**\n * 数据类\n *\n * @class\n * @param {Object?} data 初始数据\n * @param {Model?} parent 父级数据容器\n */\nfunction Data(data, parent) {\n    this.parent = parent;\n    this.raw = data || {};\n    this.listeners = [];\n}\n\n// #[begin] error\n// 以下两个函数只在开发模式下可用，在生产模式下不存在\n/**\n * DataTypes 检测\n */\nData.prototype.checkDataTypes = function () {\n    if (this.typeChecker) {\n        this.typeChecker(this.raw);\n    }\n};\n\n/**\n * 设置 type checker\n *\n * @param  {Function} typeChecker 类型校验器\n */\nData.prototype.setTypeChecker = function (typeChecker) {\n    this.typeChecker = typeChecker;\n};\n\n// #[end]\n\n/**\n * 添加数据变更的事件监听器\n *\n * @param {Function} listener 监听函数\n */\nData.prototype.listen = function (listener) {\n    if (typeof listener === 'function') {\n        this.listeners.push(listener);\n    }\n};\n\n/**\n * 移除数据变更的事件监听器\n *\n * @param {Function} listener 监听函数\n */\nData.prototype.unlisten = function (listener) {\n    var len = this.listeners.length;\n    while (len--) {\n        if (!listener || this.listeners[len] === listener) {\n            this.listeners.splice(len, 1);\n        }\n    }\n};\n\n/**\n * 触发数据变更\n *\n * @param {Object} change 变更信息对象\n */\nData.prototype.fire = function (change) {\n    if (change.option.silent || change.option.silence || change.option.quiet) {\n        return;\n    }\n\n    for (var i = 0; i < this.listeners.length; i++) {\n        this.listeners[i].call(this, change);\n    }\n};\n\n/**\n * 获取数据项\n *\n * @param {string|Object?} expr 数据项路径\n * @param {Data?} callee 当前数据获取的调用环境\n * @return {*}\n */\nData.prototype.get = function (expr, callee) {\n    var value = this.raw;\n    if (!expr) {\n        return value;\n    }\n\n    if (typeof expr !== 'object') {\n        expr = parseExpr(expr);\n    }\n\n    var paths = expr.paths;\n    callee = callee || this;\n\n    value = value[paths[0].value];\n\n    if (value == null && this.parent) {\n        value = this.parent.get(expr, callee);\n    }\n    else {\n        for (var i = 1, l = paths.length; value != null && i < l; i++) {\n            value = value[paths[i].value || evalExpr(paths[i], callee)];\n        }\n    }\n\n    return value;\n};\n\n\n/**\n * 数据对象变更操作\n *\n * @inner\n * @param {Object|Array} source 要变更的源数据\n * @param {Array} exprPaths 属性路径\n * @param {number} pathsStart 当前处理的属性路径指针位置\n * @param {number} pathsLen 属性路径长度\n * @param {*} value 变更属性值\n * @param {Data} data 对应的Data对象\n * @return {*} 变更后的新数据\n */\nfunction immutableSet(source, exprPaths, pathsStart, pathsLen, value, data) {\n    if (pathsStart >= pathsLen) {\n        return value;\n    }\n\n    if (source == null) {\n        source = {};\n    }\n\n    var pathExpr = exprPaths[pathsStart];\n    var prop = evalExpr(pathExpr, data);\n    var result = source;\n\n    if (source instanceof Array) {\n        var index = +prop;\n        prop = isNaN(index) ? prop : index;\n\n        result = source.slice(0);\n        result[prop] = immutableSet(source[prop], exprPaths, pathsStart + 1, pathsLen, value, data);\n    }\n    else if (typeof source === 'object') {\n        result = {};\n\n        for (var key in source) {\n            /* istanbul ignore else  */\n            if (key !== prop && source.hasOwnProperty(key)) {\n                result[key] = source[key];\n            }\n        }\n\n        result[prop] = immutableSet(source[prop], exprPaths, pathsStart + 1, pathsLen, value, data);\n    }\n\n    if (pathExpr.value == null) {\n        exprPaths[pathsStart] = {\n            type: typeof prop === 'string' ? 1 : 2,\n            value: prop\n        };\n    }\n\n    return result;\n}\n\n/**\n * 设置数据项\n *\n * @param {string|Object} expr 数据项路径\n * @param {*} value 数据值\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n */\nData.prototype.set = function (expr, value, option) {\n    option = option || {};\n\n    // #[begin] error\n    var exprRaw = expr;\n    // #[end]\n\n    expr = parseExpr(expr);\n\n    // #[begin] error\n    if (expr.type !== 4) {\n        throw new Error('[SAN ERROR] Invalid Expression in Data set: ' + exprRaw);\n    }\n    // #[end]\n\n    if (this.get(expr) === value && !option.force) {\n        return;\n    }\n\n    var prop = expr.paths[0].value;\n    this.raw[prop] = immutableSet(this.raw[prop], expr.paths, 1, expr.paths.length, value, this);\n\n    this.fire({\n        type: 1,\n        expr: expr,\n        value: value,\n        option: option\n    });\n\n    // #[begin] error\n    this.checkDataTypes();\n    // #[end]\n\n};\n\n/**\n * 合并更新数据项\n *\n * @param {string|Object} expr 数据项路径\n * @param {Object} source 待合并的数据值\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n */\nData.prototype.merge = function (expr, source, option) {\n    option = option || {};\n\n    // #[begin] error\n    var exprRaw = expr;\n    // #[end]\n\n    expr = parseExpr(expr);\n\n    // #[begin] error\n    if (expr.type !== 4) {\n        throw new Error('[SAN ERROR] Invalid Expression in Data merge: ' + exprRaw);\n    }\n\n    if (typeof this.get(expr) !== 'object') {\n        throw new Error('[SAN ERROR] Merge Expects a Target of Type \\'object\\'; got ' + typeof oldValue);\n    }\n\n    if (typeof source !== 'object') {\n        throw new Error('[SAN ERROR] Merge Expects a Source of Type \\'object\\'; got ' + typeof source);\n    }\n    // #[end]\n\n    for (var key in source) { // eslint-disable-line\n        this.set(\n            createAccessor(\n                expr.paths.concat(\n                    [\n                        {\n                            type: 1,\n                            value: key\n                        }\n                    ]\n                )\n            ),\n            source[key],\n            option\n        );\n    }\n};\n\n/**\n * 基于更新函数更新数据项\n *\n * @param {string|Object} expr 数据项路径\n * @param {Function} fn 数据处理函数\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n */\nData.prototype.apply = function (expr, fn, option) {\n    // #[begin] error\n    var exprRaw = expr;\n    // #[end]\n\n    expr = parseExpr(expr);\n\n    // #[begin] error\n    if (expr.type !== 4) {\n        throw new Error('[SAN ERROR] Invalid Expression in Data apply: ' + exprRaw);\n    }\n    // #[end]\n\n    var oldValue = this.get(expr);\n\n    // #[begin] error\n    if (typeof fn !== 'function') {\n        throw new Error(\n            '[SAN ERROR] Invalid Argument\\'s Type in Data apply: '\n            + 'Expected Function but got ' + typeof fn\n        );\n    }\n    // #[end]\n\n    this.set(expr, fn(oldValue), option);\n};\n\n/**\n * 数组数据项splice操作\n *\n * @param {string|Object} expr 数据项路径\n * @param {Array} args splice 接受的参数列表，数组项与Array.prototype.splice的参数一致\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n * @return {Array} 新数组\n */\nData.prototype.splice = function (expr, args, option) {\n    option = option || {};\n    // #[begin] error\n    var exprRaw = expr;\n    // #[end]\n\n    expr = parseExpr(expr);\n\n    // #[begin] error\n    if (expr.type !== 4) {\n        throw new Error('[SAN ERROR] Invalid Expression in Data splice: ' + exprRaw);\n    }\n    // #[end]\n\n    var target = this.get(expr);\n    var returnValue = [];\n\n    if (target instanceof Array) {\n        var index = args[0];\n        var len = target.length;\n        if (index > len) {\n            index = len;\n        }\n        else if (index < 0) {\n            index = len + index;\n            if (index < 0) {\n                index = 0;\n            }\n        }\n\n        var newArray = target.slice(0);\n        returnValue = newArray.splice.apply(newArray, args);\n\n        this.raw = immutableSet(this.raw, expr.paths, 0, expr.paths.length, newArray, this);\n\n        this.fire({\n            expr: expr,\n            type: 2,\n            index: index,\n            deleteCount: returnValue.length,\n            value: returnValue,\n            insertions: args.slice(2),\n            option: option\n        });\n    }\n\n    // #[begin] error\n    this.checkDataTypes();\n    // #[end]\n\n    return returnValue;\n};\n\n/**\n * 数组数据项push操作\n *\n * @param {string|Object} expr 数据项路径\n * @param {*} item 要push的值\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n * @return {number} 新数组的length属性\n */\nData.prototype.push = function (expr, item, option) {\n    var target = this.get(expr);\n\n    if (target instanceof Array) {\n        this.splice(expr, [target.length, 0, item], option);\n        return target.length + 1;\n    }\n};\n\n/**\n * 数组数据项pop操作\n *\n * @param {string|Object} expr 数据项路径\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n * @return {*}\n */\nData.prototype.pop = function (expr, option) {\n    var target = this.get(expr);\n\n    if (target instanceof Array) {\n        var len = target.length;\n        if (len) {\n            return this.splice(expr, [len - 1, 1], option)[0];\n        }\n    }\n};\n\n/**\n * 数组数据项shift操作\n *\n * @param {string|Object} expr 数据项路径\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n * @return {*}\n */\nData.prototype.shift = function (expr, option) {\n    return this.splice(expr, [0, 1], option)[0];\n};\n\n/**\n * 数组数据项unshift操作\n *\n * @param {string|Object} expr 数据项路径\n * @param {*} item 要unshift的值\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n * @return {number} 新数组的length属性\n */\nData.prototype.unshift = function (expr, item, option) {\n    var target = this.get(expr);\n\n    if (target instanceof Array) {\n        this.splice(expr, [0, 0, item], option);\n        return target.length + 1;\n    }\n};\n\n/**\n * 数组数据项移除操作\n *\n * @param {string|Object} expr 数据项路径\n * @param {number} index 要移除项的索引\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n */\nData.prototype.removeAt = function (expr, index, option) {\n    this.splice(expr, [index, 1], option);\n};\n\n/**\n * 数组数据项移除操作\n *\n * @param {string|Object} expr 数据项路径\n * @param {*} value 要移除的项\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n */\nData.prototype.remove = function (expr, value, option) {\n    var target = this.get(expr);\n\n    if (target instanceof Array) {\n        var len = target.length;\n        while (len--) {\n            if (target[len] === value) {\n                this.splice(expr, [len, 1], option);\n                break;\n            }\n        }\n    }\n};\n\n// exports = module.exports = Data;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 获取声明式事件的监听函数\n */\n\n\n// var evalArgs = require('../runtime/eval-args');\n// var findMethod = require('../runtime/find-method');\n// var Data = require('../runtime/data');\n\n/**\n * 获取声明式事件的监听函数\n *\n * @param {Object} eventBind 绑定信息对象\n * @param {Component} owner 所属组件环境\n * @param {Data} data 数据环境\n * @param {boolean} isComponentEvent 是否组件自定义事件\n * @return {Function}\n */\nfunction getEventListener(eventBind, owner, data, isComponentEvent) {\n    var args = eventBind.expr.args;\n\n    return function (e) {\n        e = isComponentEvent ? e : e || window.event;\n\n        var method = findMethod(owner, eventBind.expr.name, data);\n        if (typeof method === 'function') {\n            method.apply(\n                owner,\n                args.length ? evalArgs(args, new Data({ $event: e }, data), owner) : []\n            );\n        }\n\n        if (eventBind.modifier.prevent) {\n            e.preventDefault && e.preventDefault();\n            return false;\n        }\n\n        if (eventBind.modifier.stop) {\n            if (e.stopPropagation) {\n                e.stopPropagation();\n            }\n            else {\n                e.cancelBubble = true;\n            }\n        }\n    };\n}\n\n// exports = module.exports = getEventListener;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 判断变更数组是否影响到数据引用摘要\n */\n\n\n/**\n * 判断变更数组是否影响到数据引用摘要\n *\n * @param {Array} changes 变更数组\n * @param {Object} dataRef 数据引用摘要\n * @return {boolean}\n */\nfunction changesIsInDataRef(changes, dataRef) {\n    if (dataRef) {\n        for (var i = 0; i < changes.length; i++) {\n            var change = changes[i];\n\n            if (!change.overview) {\n                var paths = change.expr.paths;\n                change.overview = paths[0].value;\n\n                if (paths.length > 1) {\n                    change.extOverview = paths[0].value + '.' + paths[1].value;\n                    change.wildOverview = paths[0].value + '.*';\n                }\n            }\n\n            if (dataRef[change.overview]\n                || change.wildOverview && dataRef[change.wildOverview]\n                || change.extOverview && dataRef[change.extOverview]\n            ) {\n                return true;\n            }\n        }\n    }\n}\n\n// exports = module.exports = changesIsInDataRef;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file insertBefore 方法的兼容性封装\n */\n\n/**\n * insertBefore 方法的兼容性封装\n *\n * @param {HTMLNode} targetEl 要插入的节点\n * @param {HTMLElement} parentEl 父元素\n * @param {HTMLElement?} beforeEl 在此元素之前插入\n */\nfunction insertBefore(targetEl, parentEl, beforeEl) {\n    if (parentEl) {\n        if (beforeEl) {\n            parentEl.insertBefore(targetEl, beforeEl);\n        }\n        else {\n            parentEl.appendChild(targetEl);\n        }\n    }\n}\n\n// exports = module.exports = insertBefore;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 元素的基本属性\n */\n\nvar baseProps = {\n    'class': 1,\n    'style': 1,\n    'id': 1\n};\n\n// exports = module.exports = baseProps;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 元素子节点遍历操作类\n */\n\n// var removeEl = require('../browser/remove-el');\n\n// #[begin] reverse\n/**\n * 元素子节点遍历操作类\n *\n * @inner\n * @class\n * @param {HTMLElement} el 要遍历的元素\n */\nfunction DOMChildrenWalker(el) {\n    this.raw = [];\n    this.index = 0;\n    this.target = el;\n\n    var child = el.firstChild;\n    var next;\n    while (child) {\n        next = child.nextSibling;\n\n        switch (child.nodeType) {\n            case 3:\n                if (/^\\s*$/.test(child.data || child.textContent)) {\n                    removeEl(child);\n                }\n                else {\n                    this.raw.push(child);\n                }\n                break;\n\n            case 1:\n            case 8:\n                this.raw.push(child);\n        }\n\n        child = next;\n    }\n\n    this.current = this.raw[this.index];\n    this.next = this.raw[this.index + 1];\n}\n\n/**\n * 往下走一个元素\n */\nDOMChildrenWalker.prototype.goNext = function () {\n    this.current = this.raw[++this.index];\n    this.next = this.raw[this.index + 1];\n};\n// #[end]\n\n// exports = module.exports = DOMChildrenWalker;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 元素节点类\n */\n\n\n// var changeExprCompare = require('../runtime/change-expr-compare');\n// var changesIsInDataRef = require('../runtime/changes-is-in-data-ref');\n// var evalExpr = require('../runtime/eval-expr');\n// var insertBefore = require('../browser/insert-before');\n// var LifeCycle = require('./life-cycle');\n// var NodeType = require('./node-type');\n// var baseProps = require('./base-props');\n// var reverseElementChildren = require('./reverse-element-children');\n// var isDataChangeByElement = require('./is-data-change-by-element');\n// var getPropHandler = require('./get-prop-handler');\n// var createNode = require('./create-node');\n// var elementOwnDetach = require('./element-own-detach');\n// var elementOwnDispose = require('./element-own-dispose');\n// var elementOwnOnEl = require('./element-own-on-el');\n// var elementOwnAttached = require('./element-own-attached');\n// var nodeSBindInit = require('./node-s-bind-init');\n// var nodeSBindUpdate = require('./node-s-bind-update');\n// var warnSetHTML = require('./warn-set-html');\n// var getNodePath = require('./get-node-path');\n\n/**\n * 元素节点类\n *\n * @class\n * @param {Object} aNode 抽象节点\n * @param {Node} parent 父亲节点\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n */\nfunction Element(aNode, parent, scope, owner, reverseWalker) {\n    this.aNode = aNode;\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n\n    this.lifeCycle = LifeCycle.start;\n    this.children = [];\n    this._elFns = [];\n    this.parentComponent = parent.nodeType === 5\n        ? parent\n        : parent.parentComponent;\n\n    this.tagName = aNode.tagName;\n\n    // #[begin] allua\n    // ie8- 不支持innerHTML输出自定义标签\n    /* istanbul ignore if */\n    if (ieOldThan9 && this.tagName.indexOf('-') > 0) {\n        this.tagName = 'div';\n    }\n    // #[end]\n\n    nodeSBindInit(this, aNode.directives.bind);\n    this.lifeCycle = LifeCycle.inited;\n\n    // #[begin] reverse\n    if (reverseWalker) {\n        var currentNode = reverseWalker.current;\n\n        /* istanbul ignore if */\n        if (!currentNode) {\n            throw new Error('[SAN REVERSE ERROR] Element not found. \\nPaths: '\n                + getNodePath(this).join(' > '));\n        }\n\n        /* istanbul ignore if */\n        if (currentNode.nodeType !== 1) {\n            throw new Error('[SAN REVERSE ERROR] Element type not match, expect 1 but '\n                + currentNode.nodeType + '.\\nPaths: '\n                + getNodePath(this).join(' > '));\n        }\n\n        /* istanbul ignore if */\n        if (currentNode.tagName.toLowerCase() !== this.tagName) {\n            throw new Error('[SAN REVERSE ERROR] Element tagName not match, expect '\n                + this.tagName + ' but meat ' + currentNode.tagName.toLowerCase() + '.\\nPaths: '\n                + getNodePath(this).join(' > '));\n        }\n\n        this.el = currentNode;\n        reverseWalker.goNext();\n\n        reverseElementChildren(this, this.scope, this.owner);\n\n        this.lifeCycle = LifeCycle.created;\n        this._attached();\n        this.lifeCycle = LifeCycle.attached;\n    }\n    // #[end]\n}\n\n\n\nElement.prototype.nodeType = 4;\n\n/**\n * 将元素attach到页面\n *\n * @param {HTMLElement} parentEl 要添加到的父元素\n * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n */\nElement.prototype.attach = function (parentEl, beforeEl) {\n    if (!this.lifeCycle.attached) {\n        if (!this.el) {\n            var sourceNode = this.aNode.hotspot.sourceNode;\n            var props = this.aNode.props;\n\n            if (sourceNode) {\n                this.el = sourceNode.cloneNode(false);\n                props = this.aNode.hotspot.dynamicProps;\n            }\n            else {\n                this.el = createEl(this.tagName);\n            }\n\n            if (this._sbindData) {\n                for (var key in this._sbindData) {\n                    if (this._sbindData.hasOwnProperty(key)) {\n                        getPropHandler(this.tagName, key)(\n                            this.el,\n                            this._sbindData[key],\n                            key,\n                            this\n                        );\n                    }\n                }\n            }\n\n            for (var i = 0, l = props.length; i < l; i++) {\n                var prop = props[i];\n                var propName = prop.name;\n                var value = evalExpr(prop.expr, this.scope, this.owner);\n\n                if (value || !baseProps[propName]) {\n                    prop.handler(this.el, value, propName, this, prop);\n                }\n            }\n\n            this.lifeCycle = LifeCycle.created;\n        }\n        insertBefore(this.el, parentEl, beforeEl);\n\n        if (!this._contentReady) {\n            var htmlDirective = this.aNode.directives.html;\n\n            if (htmlDirective) {\n                // #[begin] error\n                warnSetHTML(this.el);\n                // #[end]\n\n                this.el.innerHTML = evalExpr(htmlDirective.value, this.scope, this.owner);\n            }\n            else {\n                for (var i = 0, l = this.aNode.children.length; i < l; i++) {\n                    var childANode = this.aNode.children[i];\n                    var child = childANode.Clazz\n                        ? new childANode.Clazz(childANode, this, this.scope, this.owner)\n                        : createNode(childANode, this, this.scope, this.owner);\n                    this.children.push(child);\n                    child.attach(this.el);\n                }\n            }\n\n            this._contentReady = 1;\n        }\n\n        this._attached();\n\n        this.lifeCycle = LifeCycle.attached;\n    }\n};\n\nElement.prototype.detach = elementOwnDetach;\nElement.prototype.dispose = elementOwnDispose;\nElement.prototype._onEl = elementOwnOnEl;\nElement.prototype._leave = function () {\n    if (this.leaveDispose) {\n        if (!this.lifeCycle.disposed) {\n            var len = this.children.length;\n            while (len--) {\n                this.children[len].dispose(1, 1);\n            }\n\n            len = this._elFns.length;\n            while (len--) {\n                var fn = this._elFns[len];\n                un(this.el, fn[0], fn[1], fn[2]);\n            }\n            this._elFns = null;\n\n            // #[begin] allua\n            /* istanbul ignore if */\n            if (this._inputTimer) {\n                clearInterval(this._inputTimer);\n                this._inputTimer = null;\n            }\n            // #[end]\n\n            // 如果没有parent，说明是一个root component，一定要从dom树中remove\n            if (!this.disposeNoDetach || !this.parent) {\n                removeEl(this.el);\n            }\n\n            this.lifeCycle = LifeCycle.detached;\n\n            this.el = null;\n            this.owner = null;\n            this.scope = null;\n            this.children = null;\n            this.lifeCycle = LifeCycle.disposed;\n\n            if (this._ondisposed) {\n                this._ondisposed();\n            }\n        }\n    }\n};\n\n/**\n * 视图更新\n *\n * @param {Array} changes 数据变化信息\n */\nElement.prototype._update = function (changes) {\n    var dataHotspot = this.aNode.hotspot.data;\n    if (dataHotspot && changesIsInDataRef(changes, dataHotspot)) {\n\n        // update s-bind\n        var me = this;\n        nodeSBindUpdate(\n            this,\n            this.aNode.directives.bind,\n            changes,\n            function (name, value) {\n                if (name in me.aNode.hotspot.props) {\n                    return;\n                }\n\n                getPropHandler(me.tagName, name)(me.el, value, name, me);\n            }\n        );\n\n        // update prop\n        var dynamicProps = this.aNode.hotspot.dynamicProps;\n        for (var i = 0, l = dynamicProps.length; i < l; i++) {\n            var prop = dynamicProps[i];\n            var propName = prop.name;\n\n            for (var j = 0, changeLen = changes.length; j < changeLen; j++) {\n                var change = changes[j];\n\n                if (!isDataChangeByElement(change, this, propName)\n                    && (\n                        changeExprCompare(change.expr, prop.expr, this.scope)\n                        || prop.hintExpr && changeExprCompare(change.expr, prop.hintExpr, this.scope)\n                    )\n                ) {\n                    prop.handler(this.el, evalExpr(prop.expr, this.scope, this.owner), propName, this, prop);\n                    break;\n                }\n            }\n        }\n\n        // update content\n        var htmlDirective = this.aNode.directives.html;\n        if (htmlDirective) {\n            var len = changes.length;\n            while (len--) {\n                if (changeExprCompare(changes[len].expr, htmlDirective.value, this.scope)) {\n                    // #[begin] error\n                    warnSetHTML(this.el);\n                    // #[end]\n\n                    this.el.innerHTML = evalExpr(htmlDirective.value, this.scope, this.owner);\n                    break;\n                }\n            }\n        }\n        else {\n            for (var i = 0, l = this.children.length; i < l; i++) {\n                this.children[i]._update(changes);\n            }\n        }\n    }\n};\n\n/**\n * 执行完成attached状态的行为\n */\nElement.prototype._attached = elementOwnAttached;\n\n// exports = module.exports = Element;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 创建节点对应的 stump comment 元素\n */\n\n\n\n/**\n * 创建节点对应的 stump comment 主元素\n */\nfunction nodeOwnCreateStump() {\n    this.el = this.el || document.createComment(this.id);\n}\n\n// exports = module.exports = nodeOwnCreateStump;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 销毁释放元素的子元素\n */\n\n/**\n * 销毁释放元素的子元素\n *\n * @param {Array=} children 子元素数组\n * @param {boolean=} noDetach 是否不要把节点从dom移除\n * @param {boolean=} noTransition 是否不显示过渡动画效果\n */\nfunction elementDisposeChildren(children, noDetach, noTransition) {\n    var len = children && children.length;\n    while (len--) {\n        children[len].dispose(noDetach, noTransition);\n    }\n}\n\n// exports = module.exports = elementDisposeChildren;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 简单执行销毁节点的行为\n */\n\n// var removeEl = require('../browser/remove-el');\n// var LifeCycle = require('./life-cycle');\n// var elementDisposeChildren = require('./element-dispose-children');\n\n/**\n * 简单执行销毁节点的行为\n *\n * @param {boolean=} noDetach 是否不要把节点从dom移除\n */\nfunction nodeOwnSimpleDispose(noDetach) {\n    elementDisposeChildren(this.children, noDetach, 1);\n\n    if (!noDetach) {\n        removeEl(this.el);\n    }\n\n    this.el = null;\n    this.owner = null;\n    this.scope = null;\n    this.children = null;\n\n    this.lifeCycle = LifeCycle.disposed;\n    if (this._ondisposed) {\n        this._ondisposed();\n    }\n}\n\n// exports = module.exports = nodeOwnSimpleDispose;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 异步组件类\n */\n\n// var guid = require('../util/guid');\n// var each = require('../util/each');\n// var insertBefore = require('../browser/insert-before');\n// var nodeOwnCreateStump = require('./node-own-create-stump');\n// var nodeOwnSimpleDispose = require('./node-own-simple-dispose');\n\n\n/**\n * 异步组件类\n *\n * @class\n * @param {Object} options 初始化参数\n * @param {Object} loader 组件加载器\n */\nfunction AsyncComponent(options, loader) {\n    this.options = options;\n    this.loader = loader;\n    this.id = guid++;\n    this.children = [];\n\n    // #[begin] reverse\n    var reverseWalker = options.reverseWalker;\n    if (reverseWalker) {\n        var PlaceholderComponent = this.loader.placeholder;\n        if (PlaceholderComponent) {\n            this.children[0] = new PlaceholderComponent(options);\n        }\n\n        this._create();\n        insertBefore(this.el, reverseWalker.target, reverseWalker.current);\n\n        var me = this;\n        this.loader.start(function (ComponentClass) {\n            me.onload(ComponentClass);\n        });\n    }\n    options.reverseWalker = null;\n    // #[end]\n}\n\nAsyncComponent.prototype._create = nodeOwnCreateStump;\nAsyncComponent.prototype.dispose = nodeOwnSimpleDispose;\n\n/**\n * attach到页面\n *\n * @param {HTMLElement} parentEl 要添加到的父元素\n * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n */\nAsyncComponent.prototype.attach = function (parentEl, beforeEl) {\n    var PlaceholderComponent = this.loader.placeholder;\n    if (PlaceholderComponent) {\n        var component = new PlaceholderComponent(this.options);\n        this.children[0] = component;\n        component.attach(parentEl, beforeEl);\n    }\n\n    this._create();\n    insertBefore(this.el, parentEl, beforeEl);\n\n    var me = this;\n    this.loader.start(function (ComponentClass) {\n        me.onload(ComponentClass);\n    });\n};\n\n\n/**\n * loader加载完成，渲染组件\n *\n * @param {Function=} ComponentClass 组件类\n */\nAsyncComponent.prototype.onload = function (ComponentClass) {\n    if (this.el && ComponentClass) {\n        var component = new ComponentClass(this.options);\n        component.attach(this.el.parentNode, this.el);\n\n        var parentChildren = this.options.parent.children;\n        if (this.parentIndex == null || parentChildren[this.parentIndex] !== this) {\n            each(parentChildren, function (child, index) {\n                if (child instanceof AsyncComponent) {\n                    child.parentIndex = index;\n                }\n            });\n        }\n\n        parentChildren[this.parentIndex] = component;\n    }\n\n    this.dispose();\n};\n\n// exports = module.exports = AsyncComponent;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 通过组件反解创建节点的工厂方法\n */\n\n// var Element = require('./element');\n// var AsyncComponent = require('./async-component');\n\n// #[begin] reverse\n/**\n * 通过组件反解创建节点\n *\n * @param {ANode} aNode 抽象节点\n * @param {Node} parent 父亲节点\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @param {DOMChildrenWalker} reverseWalker 子元素遍历对象\n * @return {Node}\n */\nfunction createReverseNode(aNode, parent, scope, owner, reverseWalker) {\n    if (aNode.Clazz) {\n        return new aNode.Clazz(aNode, parent, scope, owner, reverseWalker);\n    }\n\n    var ComponentOrLoader = owner.getComponentType\n        ? owner.getComponentType(aNode, scope)\n        : owner.components[aNode.tagName];\n\n    if (ComponentOrLoader) {\n        return typeof ComponentOrLoader === 'function'\n            ? new ComponentOrLoader({\n                source: aNode,\n                owner: owner,\n                scope: scope,\n                parent: parent,\n                subTag: aNode.tagName,\n                reverseWalker: reverseWalker\n            })\n            : new AsyncComponent({\n                source: aNode,\n                owner: owner,\n                scope: scope,\n                parent: parent,\n                subTag: aNode.tagName,\n                reverseWalker: reverseWalker\n            }, ComponentOrLoader);\n    }\n\n    return new Element(aNode, parent, scope, owner, reverseWalker);\n}\n// #[end]\n\n// exports = module.exports = createReverseNode;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 对元素的子节点进行反解\n */\n\n\n// var each = require('../util/each');\n// var DOMChildrenWalker = require('./dom-children-walker');\n// var createReverseNode = require('./create-reverse-node');\n\n// #[begin] reverse\n\n/**\n * 对元素的子节点进行反解\n *\n * @param {Object} element 元素\n */\nfunction reverseElementChildren(element, scope, owner) {\n    var htmlDirective = element.aNode.directives.html;\n\n    if (!htmlDirective) {\n        var reverseWalker = new DOMChildrenWalker(element.el);\n\n        each(element.aNode.children, function (aNodeChild) {\n            element.children.push(\n                createReverseNode(aNodeChild, element, scope, owner, reverseWalker)\n            );\n        });\n    }\n}\n// #[end]\n\n// exports = module.exports = reverseElementChildren;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 创建节点的工厂方法\n */\n\n// var Element = require('./element');\n// var AsyncComponent = require('./async-component');\n\n\n/**\n * 创建节点\n *\n * @param {ANode} aNode 抽象节点\n * @param {Node} parent 父亲节点\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @return {Node}\n */\nfunction createNode(aNode, parent, scope, owner) {\n    if (aNode.Clazz) {\n        return new aNode.Clazz(aNode, parent, scope, owner);\n    }\n\n    var ComponentOrLoader = owner.getComponentType\n        ? owner.getComponentType(aNode, scope)\n        : owner.components[aNode.tagName];\n\n    if (ComponentOrLoader) {\n        return typeof ComponentOrLoader === 'function'\n            ? new ComponentOrLoader({\n                source: aNode,\n                owner: owner,\n                scope: scope,\n                parent: parent,\n                subTag: aNode.tagName\n            })\n            : new AsyncComponent({\n                source: aNode,\n                owner: owner,\n                scope: scope,\n                parent: parent,\n                subTag: aNode.tagName\n            }, ComponentOrLoader);\n    }\n\n    aNode.Clazz = Element;\n    return new Element(aNode, parent, scope, owner);\n}\n\n// exports = module.exports = createNode;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 获取 element 的 transition 控制对象\n */\n\n// var evalArgs = require('../runtime/eval-args');\n// var findMethod = require('../runtime/find-method');\n// var NodeType = require('./node-type');\n\n/**\n * 获取 element 的 transition 控制对象\n *\n * @param {Object} element 元素\n * @return {Object?}\n */\nfunction elementGetTransition(element) {\n    var directive = element.aNode.directives.transition;\n    var owner = element.owner;\n\n    if (element.nodeType === 5) {\n        var cmptGivenTransition = element.source && element.source.directives.transition;\n        if (cmptGivenTransition) {\n            directive = cmptGivenTransition;\n        }\n        else {\n            owner = element;\n        }\n    }\n\n    var transition;\n    if (directive && owner) {\n        transition = findMethod(owner, directive.value.name);\n\n        if (typeof transition === 'function') {\n            transition = transition.apply(\n                owner,\n                evalArgs(directive.value.args, element.scope, owner)\n            );\n        }\n    }\n\n    return transition || element.transition;\n}\n\n// exports = module.exports = elementGetTransition;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 将元素从页面上移除\n */\n\n// var elementGetTransition = require('./element-get-transition');\n\n/**\n * 将元素从页面上移除\n */\nfunction elementOwnDetach() {\n    var lifeCycle = this.lifeCycle;\n    if (lifeCycle.leaving) {\n        return;\n    }\n\n    if (!this.disposeNoTransition) {\n        var transition = elementGetTransition(this);\n\n        if (transition && transition.leave) {\n            if (this._toPhase) {\n                this._toPhase('leaving');\n            }\n            else {\n                this.lifeCycle = LifeCycle.leaving;\n            }\n\n            var me = this;\n            transition.leave(this.el, function () {\n                me._leave();\n            });\n\n            return;\n        }\n    }\n\n    this._leave();\n}\n\n\n// exports = module.exports = elementOwnDetach;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 销毁释放元素\n */\n\n/**\n * 销毁释放元素\n *\n * @param {boolean=} noDetach 是否不要把节点从dom移除\n * @param {boolean=} noTransition 是否不显示过渡动画效果\n */\nfunction elementOwnDispose(noDetach, noTransition) {\n    this.leaveDispose = 1;\n    this.disposeNoDetach = noDetach;\n    this.disposeNoTransition = noTransition;\n\n    this.detach();\n}\n\n// exports = module.exports = elementOwnDispose;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 为元素的 el 绑定事件\n */\n\n// var on = require('../browser/on');\n\n/**\n * 为元素的 el 绑定事件\n *\n * @param {string} name 事件名\n * @param {Function} listener 监听器\n * @param {boolean} capture 是否是捕获阶段触发\n */\nfunction elementOwnOnEl(name, listener, capture) {\n    capture = !!capture;\n    this._elFns.push([name, listener, capture]);\n    on(this.el, name, listener, capture);\n}\n\n// exports = module.exports = elementOwnOnEl;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 是否浏览器环境\n */\n\nvar isBrowser = typeof window !== 'undefined';\n\n// exports = module.exports = isBrowser;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 开发时的警告提示\n */\n\n// #[begin] error\n/**\n * 开发时的警告提示\n *\n * @param {string} message 警告信息\n */\nfunction warn(message) {\n    message = '[SAN WARNING] ' + message;\n\n    /* eslint-disable no-console */\n    /* istanbul ignore next */\n    if (typeof console === 'object' && console.warn) {\n        console.warn(message);\n    }\n    else {\n        // 防止警告中断调用堆栈\n        setTimeout(function () {\n            throw new Error(message);\n        }, 0);\n    }\n    /* eslint-enable no-console */\n}\n// #[end]\n\n// exports = module.exports = warn;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file  事件绑定不存在的 warning\n */\n\n// var each = require('../util/each');\n// var warn = require('../util/warn');\n\n// #[begin] error\n/**\n * 事件绑定不存在的 warning\n *\n * @param {Object} eventBind 事件绑定对象\n * @param {Component} owner 所属的组件对象\n */\nfunction warnEventListenMethod(eventBind, owner) {\n    var valid = true;\n    var method = owner;\n    each(eventBind.expr.name.paths, function (path) {\n        method = method[path.value];\n        valid = !!method;\n        return valid;\n    });\n\n    if (!valid) {\n        var paths = [];\n        each(eventBind.expr.name.paths, function (path) {\n            paths.push(path.value);\n        });\n\n        warn(eventBind.name + ' listen fail,\"' + paths.join('.') + '\" not exist');\n    }\n}\n// #[end]\n\n// exports = module.exports = warnEventListenMethod;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 完成元素 attached 后的行为\n */\n\n\n// var empty = require('../util/empty');\n// var isBrowser = require('../browser/is-browser');\n// var trigger = require('../browser/trigger');\n// var NodeType = require('./node-type');\n// var elementGetTransition = require('./element-get-transition');\n// var getEventListener = require('./get-event-listener');\n// var warnEventListenMethod = require('./warn-event-listen-method');\n\n/**\n * 双绑输入框CompositionEnd事件监听函数\n *\n * @inner\n */\nfunction inputOnCompositionEnd() {\n    if (!this.composing) {\n        return;\n    }\n\n    this.composing = 0;\n    trigger(this, 'input');\n}\n\n/**\n * 双绑输入框CompositionStart事件监听函数\n *\n * @inner\n */\nfunction inputOnCompositionStart() {\n    this.composing = 1;\n}\n\nfunction getXPropOutputer(element, xProp, data) {\n    return function () {\n        xPropOutput(element, xProp, data);\n    };\n}\n\nfunction getInputXPropOutputer(element, xProp, data) {\n    return function () {\n        if (!this.composing) {\n            xPropOutput(element, xProp, data);\n        }\n    };\n}\n\n// #[begin] allua\n/* istanbul ignore next */\nfunction getInputFocusXPropHandler(element, xProp, data) {\n    return function () {\n        element._inputTimer = setInterval(function () {\n            xPropOutput(element, xProp, data);\n        }, 16);\n    };\n}\n\n/* istanbul ignore next */\nfunction getInputBlurXPropHandler(element) {\n    return function () {\n        clearInterval(element._inputTimer);\n        element._inputTimer = null;\n    };\n}\n// #[end]\n\nfunction xPropOutput(element, bindInfo, data) {\n    /* istanbul ignore if */\n    if (!element.lifeCycle.created) {\n        return;\n    }\n\n    var el = element.el;\n\n    if (element.tagName === 'input' && bindInfo.name === 'checked') {\n        var bindValue = getANodeProp(element.aNode, 'value');\n        var bindType = getANodeProp(element.aNode, 'type');\n\n        if (bindValue && bindType) {\n            switch (el.type.toLowerCase()) {\n                case 'checkbox':\n                    data[el.checked ? 'push' : 'remove'](bindInfo.expr, el.value);\n                    return;\n\n                case 'radio':\n                    el.checked && data.set(bindInfo.expr, el.value, {\n                        target: {\n                            node: element,\n                            prop: bindInfo.name\n                        }\n                    });\n                    return;\n            }\n        }\n    }\n\n    data.set(bindInfo.expr, el[bindInfo.name], {\n        target: {\n            node: element,\n            prop: bindInfo.name\n        }\n    });\n}\n\n/**\n * 完成元素 attached 后的行为\n *\n * @param {Object} element 元素节点\n */\nfunction elementOwnAttached() {\n    if (this.el.nodeType === 1) {\n        var isComponent = this.nodeType === 5;\n        var data = isComponent ? this.data : this.scope;\n\n        /* eslint-disable no-redeclare */\n\n        // 处理自身变化时双向绑定的逻辑\n        var xProps = this.aNode.hotspot.xProps;\n        for (var i = 0, l = xProps.length; i < l; i++) {\n            var xProp = xProps[i];\n\n            switch (xProp.name) {\n                case 'value':\n                    switch (this.tagName) {\n                        case 'input':\n                        case 'textarea':\n                            if (isBrowser && window.CompositionEvent) {\n                                this._onEl('change', inputOnCompositionEnd);\n                                this._onEl('compositionstart', inputOnCompositionStart);\n                                this._onEl('compositionend', inputOnCompositionEnd);\n                            }\n\n                            // #[begin] allua\n                            /* istanbul ignore else */\n                            if ('oninput' in this.el) {\n                            // #[end]\n                                this._onEl('input', getInputXPropOutputer(this, xProp, data));\n                            // #[begin] allua\n                            }\n                            else {\n                                this._onEl('focusin', getInputFocusXPropHandler(this, xProp, data));\n                                this._onEl('focusout', getInputBlurXPropHandler(this));\n                            }\n                            // #[end]\n\n                            break;\n\n                        case 'select':\n                            this._onEl('change', getXPropOutputer(this, xProp, data));\n                            break;\n                    }\n                    break;\n\n                case 'checked':\n                    switch (this.tagName) {\n                        case 'input':\n                            switch (this.el.type) {\n                                case 'checkbox':\n                                case 'radio':\n                                    this._onEl('click', getXPropOutputer(this, xProp, data));\n                            }\n                    }\n                    break;\n            }\n        }\n\n        var owner = isComponent ? this : this.owner;\n        for (var i = 0, l = this.aNode.events.length; i < l; i++) {\n            var eventBind = this.aNode.events[i];\n\n            // #[begin] error\n            warnEventListenMethod(eventBind, owner);\n            // #[end]\n\n            this._onEl(\n                eventBind.name,\n                getEventListener(eventBind, owner, data, eventBind.modifier),\n                eventBind.modifier.capture\n            );\n        }\n\n        if (isComponent) {\n            for (var i = 0, l = this.nativeEvents.length; i < l; i++) {\n                var eventBind = this.nativeEvents[i];\n\n                // #[begin] error\n                warnEventListenMethod(eventBind, this.owner);\n                // #[end]\n\n                this._onEl(\n                    eventBind.name,\n                    getEventListener(eventBind, this.owner, this.scope),\n                    eventBind.modifier.capture\n                );\n            }\n        }\n    }\n\n    if (this.el.nodeType === 1) {\n        var transition = elementGetTransition(this);\n        if (transition && transition.enter) {\n            transition.enter(this.el, empty);\n        }\n    }\n}\n\n// exports = module.exports = elementOwnAttached;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 初始化节点的 s-bind 数据\n */\n\n\n// var evalExpr = require('../runtime/eval-expr');\n\n/**\n * 初始化节点的 s-bind 数据\n *\n * @param {Object} node 节点对象\n * @param {Object} sBind bind指令对象\n * @return {boolean}\n */\nfunction nodeSBindInit(node, sBind) {\n    if (sBind && node.scope) {\n        node._sbindData = evalExpr(sBind.value, node.scope, node.owner);\n        return true;\n    }\n}\n\n// exports = module.exports = nodeSBindInit;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 计算两个对象 key 的并集\n */\n\n/**\n * 计算两个对象 key 的并集\n *\n * @param {Object} obj1 目标对象\n * @param {Object} obj2 源对象\n * @return {Array}\n */\nfunction unionKeys(obj1, obj2) {\n    var result = [];\n    var key;\n\n    for (key in obj1) {\n        /* istanbul ignore else  */\n        if (obj1.hasOwnProperty(key)) {\n            result.push(key);\n        }\n    }\n\n    for (key in obj2) {\n        /* istanbul ignore else  */\n        if (obj2.hasOwnProperty(key)) {\n            !obj1[key] && result.push(key);\n        }\n    }\n\n    return result;\n}\n\n// exports = module.exports = unionKeys;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 更新节点的 s-bind 数据\n */\n\n// var unionKeys = require('../util/union-keys');\n// var evalExpr = require('../runtime/eval-expr');\n// var changeExprCompare = require('../runtime/change-expr-compare');\n\n/**\n * 初始化节点的 s-bind 数据\n *\n * @param {Object} node 节点对象\n * @param {Object} sBind bind指令对象\n * @param {Array} changes 变更数组\n * @param {Function} updater 绑定对象子项变更的更新函数\n */\nfunction nodeSBindUpdate(node, sBind, changes, updater) {\n    if (sBind) {\n        var len = changes.length;\n\n        while (len--) {\n            if (changeExprCompare(changes[len].expr, sBind.value, node.scope)) {\n                var newBindData = evalExpr(sBind.value, node.scope, node.owner);\n                var keys = unionKeys(newBindData, node._sbindData);\n\n                for (var i = 0, l = keys.length; i < l; i++) {\n                    var key = keys[i];\n                    var value = newBindData[key];\n\n                    if (value !== node._sbindData[key]) {\n                        updater(key, value);\n                    }\n                }\n\n                node._sbindData = newBindData;\n                break;\n            }\n\n        }\n    }\n}\n\n// exports = module.exports = nodeSBindUpdate;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 判断元素是否不允许设置HTML\n */\n\n// some html elements cannot set innerHTML in old ie\n// see: https://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx\n\n/**\n * 判断元素是否不允许设置HTML\n *\n * @param {HTMLElement} el 要判断的元素\n * @return {boolean}\n */\nfunction noSetHTML(el) {\n    return /^(col|colgroup|frameset|style|table|tbody|tfoot|thead|tr|select)$/i.test(el.tagName);\n}\n\n// exports = module.exports = noSetHTML;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file  获取节点 stump 的 comment\n */\n\n// var noSetHTML = require('../browser/no-set-html');\n// var warn = require('../util/warn');\n\n// #[begin] error\n/**\n * 获取节点 stump 的 comment\n *\n * @param {HTMLElement} el HTML元素\n */\nfunction warnSetHTML(el) {\n    // dont warn if not in browser runtime\n    /* istanbul ignore if */\n    if (!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document)) {\n        return;\n    }\n\n    // some html elements cannot set innerHTML in old ie\n    // see: https://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx\n    if (noSetHTML(el)) {\n        warn('set html for element \"' + el.tagName + '\" may cause an error in old IE');\n    }\n}\n// #[end]\n\n// exports = module.exports = warnSetHTML;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 获取节点在组件树中的路径\n */\n\n\n// var NodeType = require('./node-type');\n\n// #[begin] reverse\n/**\n * 获取节点在组件树中的路径\n *\n * @param {Node} node 节点对象\n * @return {Array}\n */\n/* istanbul ignore next */\nfunction getNodePath(node) {\n    var nodePaths = [];\n    var nodeParent = node;\n    while (nodeParent) {\n        switch (nodeParent.nodeType) {\n            case 4:\n                nodePaths.unshift(nodeParent.tagName);\n                break;\n\n            case 2:\n                nodePaths.unshift('if');\n                break;\n\n            case 3:\n                nodePaths.unshift('for[' + nodeParent.anode.directives['for'].raw + ']'); // eslint-disable-line dot-notation\n                break;\n\n            case 6:\n                nodePaths.unshift('slot[' + (nodeParent.name || 'default') + ']');\n                break;\n\n            case 7:\n                nodePaths.unshift('template');\n                break;\n\n            case 5:\n                nodePaths.unshift('component[' + (nodeParent.subTag || 'root') + ']');\n                break;\n\n            case 1:\n                nodePaths.unshift('text');\n                break;\n        }\n\n        nodeParent = nodeParent.parent;\n    }\n\n    return nodePaths;\n}\n// #[end]\n\n// exports = module.exports = getNodePath;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 给 devtool 发通知消息\n */\n\n// var isBrowser = require('../browser/is-browser');\n\n// #[begin] devtool\nvar san4devtool;\n\n/**\n * 给 devtool 发通知消息\n *\n * @param {string} name 消息名称\n * @param {*} arg 消息参数\n */\nfunction emitDevtool(name, arg) {\n    /* istanbul ignore if */\n    if (isBrowser && san4devtool && san4devtool.debug && window.__san_devtool__) {\n        window.__san_devtool__.emit(name, arg);\n    }\n}\n\nemitDevtool.start = function (main) {\n    san4devtool = main;\n    emitDevtool('san', main);\n};\n// #[end]\n\n// exports = module.exports = emitDevtool;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 组件类\n */\n\n// var bind = require('../util/bind');\n// var each = require('../util/each');\n// var guid = require('../util/guid');\n// var extend = require('../util/extend');\n// var nextTick = require('../util/next-tick');\n// var emitDevtool = require('../util/emit-devtool');\n// var ExprType = require('../parser/expr-type');\n// var parseExpr = require('../parser/parse-expr');\n// var parseTemplate = require('../parser/parse-template');\n// var createAccessor = require('../parser/create-accessor');\n// var postProp = require('../parser/post-prop');\n// var removeEl = require('../browser/remove-el');\n// var Data = require('../runtime/data');\n// var evalExpr = require('../runtime/eval-expr');\n// var changeExprCompare = require('../runtime/change-expr-compare');\n// var DataChangeType = require('../runtime/data-change-type');\n// var insertBefore = require('../browser/insert-before');\n// var un = require('../browser/un');\n// var createNode = require('./create-node');\n// var compileComponent = require('./compile-component');\n// var preheatANode = require('./preheat-a-node');\n// var LifeCycle = require('./life-cycle');\n// var getANodeProp = require('./get-a-node-prop');\n// var isDataChangeByElement = require('./is-data-change-by-element');\n// var getEventListener = require('./get-event-listener');\n// var reverseElementChildren = require('./reverse-element-children');\n// var camelComponentBinds = require('./camel-component-binds');\n// var NodeType = require('./node-type');\n// var baseProps = require('./base-props');\n// var nodeSBindInit = require('./node-s-bind-init');\n// var nodeSBindUpdate = require('./node-s-bind-update');\n// var elementOwnAttached = require('./element-own-attached');\n// var elementOwnOnEl = require('./element-own-on-el');\n// var elementOwnDetach = require('./element-own-detach');\n// var elementOwnDispose = require('./element-own-dispose');\n// var warnEventListenMethod = require('./warn-event-listen-method');\n// var elementDisposeChildren = require('./element-dispose-children');\n// var createDataTypesChecker = require('../util/create-data-types-checker');\n// var warn = require('../util/warn');\n\n\n\n\n/**\n * 组件类\n *\n * @class\n * @param {Object} options 初始化参数\n */\nfunction Component(options) { // eslint-disable-line\n\n    // #[begin] error\n    for (var key in Component.prototype) {\n        if (this[key] !== Component.prototype[key]) {\n            /* eslint-disable max-len */\n            warn('\\`' + key + '\\` is a reserved key of san components. Overriding this property may cause unknown exceptions.');\n            /* eslint-enable max-len */\n        }\n    }\n    // #[end]\n\n\n    options = options || {};\n\n    this.lifeCycle = LifeCycle.start;\n    this.children = [];\n    this._elFns = [];\n    this.listeners = {};\n    this.slotChildren = [];\n    this.implicitChildren = [];\n\n    var clazz = this.constructor;\n\n    this.filters = this.filters || clazz.filters || {};\n    this.computed = this.computed || clazz.computed || {};\n    this.messages = this.messages || clazz.messages || {};\n\n    if (options.transition) {\n        this.transition = options.transition;\n    }\n\n    this.subTag = options.subTag;\n\n    // compile\n    compileComponent(clazz);\n\n    var protoANode = clazz.prototype.aNode;\n    preheatANode(protoANode);\n\n\n    this.tagName = protoANode.tagName;\n    this.source = typeof options.source === 'string'\n        ? parseTemplate(options.source).children[0]\n        : options.source;\n    preheatANode(this.source);\n\n\n    this.sourceSlotNameProps = [];\n    this.sourceSlots = {\n        named: {}\n    };\n\n\n    this.owner = options.owner;\n    this.scope = options.scope;\n    this.el = options.el;\n\n    var parent = options.parent;\n    if (parent) {\n        this.parent = parent;\n        this.parentComponent = parent.nodeType === 5\n            ? parent\n            : parent && parent.parentComponent;\n    }\n    else if (this.owner) {\n        this.parentComponent = this.owner;\n        this.scope = this.owner.data;\n    }\n\n    this.id = guid++;\n\n    // #[begin] reverse\n    if (this.el) {\n        var firstCommentNode = this.el.firstChild;\n        if (firstCommentNode && firstCommentNode.nodeType === 3) {\n            firstCommentNode = firstCommentNode.nextSibling;\n        }\n\n        if (firstCommentNode && firstCommentNode.nodeType === 8) {\n            var stumpMatch = firstCommentNode.data.match(/^\\s*s-data:([\\s\\S]+)?$/);\n            if (stumpMatch) {\n                var stumpText = stumpMatch[1];\n\n                // fill component data\n                options.data = (new Function('return '\n                    + stumpText\n                        .replace(/^[\\s\\n]*/, '')\n                        .replace(\n                            /\"(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})\\.\\d+Z\"/g,\n                            function (match, y, mon, d, h, m, s) {\n                                return 'new Date(' + (+y) + ',' + (+mon) + ',' + (+d)\n                                    + ',' + (+h) + ',' + (+m) + ',' + (+s) + ')';\n                            }\n                        )\n                ))();\n\n                if (firstCommentNode.previousSibling) {\n                    removeEl(firstCommentNode.previousSibling);\n                }\n                removeEl(firstCommentNode);\n            }\n        }\n    }\n    // #[end]\n\n    // native事件数组\n    this.nativeEvents = [];\n\n    if (this.source) {\n        // 组件运行时传入的结构，做slot解析\n        this._initSourceSlots(1);\n\n        for (var i = 0, l = this.source.events.length; i < l; i++) {\n            var eventBind = this.source.events[i];\n            // 保存当前实例的native事件，下面创建aNode时候做合并\n            if (eventBind.modifier.native) {\n                this.nativeEvents.push(eventBind);\n            }\n            else {\n                // #[begin] error\n                warnEventListenMethod(eventBind, options.owner);\n                // #[end]\n\n                this.on(\n                    eventBind.name,\n                    getEventListener(eventBind, options.owner, this.scope, 1),\n                    eventBind\n                );\n            }\n        }\n\n        this.tagName = this.tagName || this.source.tagName;\n        this.binds = camelComponentBinds(this.source.props);\n\n        // init s-bind data\n        nodeSBindInit(this, this.source.directives.bind);\n    }\n\n    this._toPhase('compiled');\n\n    // init data\n    this.data = new Data(\n        extend(\n            typeof this.initData === 'function' && this.initData() || {},\n            options.data || this._sbindData\n        )\n    );\n\n    this.tagName = this.tagName || 'div';\n\n    // #[begin] allua\n    // ie8- 不支持innerHTML输出自定义标签\n    /* istanbul ignore if */\n    if (ieOldThan9 && this.tagName.indexOf('-') > 0) {\n        this.tagName = 'div';\n    }\n    // #[end]\n\n    if (this.binds) {\n        for (var i = 0, l = this.binds.length; i < l; i++) {\n            var bindInfo = this.binds[i];\n            postProp(bindInfo);\n\n            if (this.scope) {\n                var value = evalExpr(bindInfo.expr, this.scope, this.owner);\n                if (typeof value !== 'undefined') {\n                    // See: https://github.com/ecomfe/san/issues/191\n                    this.data.set(bindInfo.name, value);\n                }\n            }\n        }\n    }\n\n    // #[begin] error\n    // 在初始化 + 数据绑定后，开始数据校验\n    // NOTE: 只在开发版本中进行属性校验\n    var dataTypes = this.dataTypes || clazz.dataTypes;\n    if (dataTypes) {\n        var dataTypeChecker = createDataTypesChecker(\n            dataTypes,\n            this.subTag || this.name || clazz.name\n        );\n        this.data.setTypeChecker(dataTypeChecker);\n        this.data.checkDataTypes();\n    }\n    // #[end]\n\n    this.computedDeps = {};\n    for (var expr in this.computed) {\n        if (this.computed.hasOwnProperty(expr) && !this.computedDeps[expr]) {\n            this._calcComputed(expr);\n        }\n    }\n\n    this.dataChanger = bind(this._dataChanger, this);\n    this.data.listen(this.dataChanger);\n\n    this._toPhase('inited');\n\n    // #[begin] reverse\n    if (this.el) {\n        reverseElementChildren(this, this.data, this);\n        this._toPhase('created');\n        this._attached();\n        this._toPhase('attached');\n    }\n    else {\n        var walker = options.reverseWalker;\n        if (walker) {\n            var ifDirective = this.aNode.directives['if']; // eslint-disable-line dot-notation\n\n            if (!ifDirective || evalExpr(ifDirective.value, this.data, this)) {\n                var currentNode = walker.current;\n                if (currentNode && currentNode.nodeType === 1) {\n                    this.el = currentNode;\n                    walker.goNext();\n                }\n\n                reverseElementChildren(this, this.data, this);\n            }\n            else {\n                this.el = document.createComment(this.id);\n                insertBefore(this.el, walker.target, walker.current);\n            }\n\n            this._toPhase('created');\n            this._attached();\n            this._toPhase('attached');\n        }\n    }\n    // #[end]\n}\n\n\n/**\n * 初始化创建组件外部传入的插槽对象\n *\n * @protected\n * @param {boolean} isFirstTime 是否初次对sourceSlots进行计算\n */\nComponent.prototype._initSourceSlots = function (isFirstTime) {\n    var me = this;\n    this.sourceSlots.named = {};\n\n    // 组件运行时传入的结构，做slot解析\n    this.source && this.scope && each(this.source.children, function (child) {\n        var target;\n\n        var slotBind = !child.textExpr && getANodeProp(child, 'slot');\n        if (slotBind) {\n            isFirstTime && me.sourceSlotNameProps.push(slotBind);\n\n            var slotName = evalExpr(slotBind.expr, me.scope, me.owner);\n            target = me.sourceSlots.named[slotName];\n            if (!target) {\n                target = me.sourceSlots.named[slotName] = [];\n            }\n        }\n        else if (isFirstTime) {\n            target = me.sourceSlots.noname;\n            if (!target) {\n                target = me.sourceSlots.noname = [];\n            }\n        }\n\n        target && target.push(child);\n    });\n};\n\n/**\n * 类型标识\n *\n * @type {string}\n */\nComponent.prototype.nodeType = 5;\n\n/**\n * 在下一个更新周期运行函数\n *\n * @param {Function} fn 要运行的函数\n */\nComponent.prototype.nextTick = nextTick;\n\nComponent.prototype._ctx = (new Date()).getTime().toString(16);\n\n/* eslint-disable operator-linebreak */\n/**\n * 使节点到达相应的生命周期\n *\n * @protected\n * @param {string} name 生命周期名称\n */\nComponent.prototype._callHook =\nComponent.prototype._toPhase = function (name) {\n    if (!this.lifeCycle[name]) {\n        this.lifeCycle = LifeCycle[name] || this.lifeCycle;\n        if (typeof this[name] === 'function') {\n            this[name]();\n        }\n        this['_after' + name] = 1;\n\n        // 通知devtool\n        // #[begin] devtool\n        emitDevtool('comp-' + name, this);\n        // #[end]\n    }\n};\n/* eslint-enable operator-linebreak */\n\n\n/**\n * 添加事件监听器\n *\n * @param {string} name 事件名\n * @param {Function} listener 监听器\n * @param {string?} declaration 声明式\n */\nComponent.prototype.on = function (name, listener, declaration) {\n    if (typeof listener === 'function') {\n        if (!this.listeners[name]) {\n            this.listeners[name] = [];\n        }\n        this.listeners[name].push({fn: listener, declaration: declaration});\n    }\n};\n\n/**\n * 移除事件监听器\n *\n * @param {string} name 事件名\n * @param {Function=} listener 监听器\n */\nComponent.prototype.un = function (name, listener) {\n    var nameListeners = this.listeners[name];\n    var len = nameListeners && nameListeners.length;\n\n    while (len--) {\n        if (!listener || listener === nameListeners[len].fn) {\n            nameListeners.splice(len, 1);\n        }\n    }\n};\n\n\n/**\n * 派发事件\n *\n * @param {string} name 事件名\n * @param {Object} event 事件对象\n */\nComponent.prototype.fire = function (name, event) {\n    var me = this;\n    each(this.listeners[name], function (listener) {\n        listener.fn.call(me, event);\n    });\n};\n\n/**\n * 计算 computed 属性的值\n *\n * @private\n * @param {string} computedExpr computed表达式串\n */\nComponent.prototype._calcComputed = function (computedExpr) {\n    var computedDeps = this.computedDeps[computedExpr];\n    if (!computedDeps) {\n        computedDeps = this.computedDeps[computedExpr] = {};\n    }\n\n    var me = this;\n    this.data.set(computedExpr, this.computed[computedExpr].call({\n        data: {\n            get: function (expr) {\n                // #[begin] error\n                if (!expr) {\n                    throw new Error('[SAN ERROR] call get method in computed need argument');\n                }\n                // #[end]\n\n                if (!computedDeps[expr]) {\n                    computedDeps[expr] = 1;\n\n                    if (me.computed[expr] && !me.computedDeps[expr]) {\n                        me._calcComputed(expr);\n                    }\n\n                    me.watch(expr, function () {\n                        me._calcComputed(computedExpr);\n                    });\n                }\n\n                return me.data.get(expr);\n            }\n        }\n    }));\n};\n\n/**\n * 派发消息\n * 组件可以派发消息，消息将沿着组件树向上传递，直到遇上第一个处理消息的组件\n *\n * @param {string} name 消息名称\n * @param {*?} value 消息值\n */\nComponent.prototype.dispatch = function (name, value) {\n    var parentComponent = this.parentComponent;\n\n    while (parentComponent) {\n        var receiver = parentComponent.messages[name] || parentComponent.messages['*'];\n        if (typeof receiver === 'function') {\n            receiver.call(\n                parentComponent,\n                {target: this, value: value, name: name}\n            );\n            break;\n        }\n\n        parentComponent = parentComponent.parentComponent;\n    }\n};\n\n/**\n * 获取组件内部的 slot\n *\n * @param {string=} name slot名称，空为default slot\n * @return {Array}\n */\nComponent.prototype.slot = function (name) {\n    var result = [];\n    var me = this;\n\n    function childrenTraversal(children) {\n        each(children, function (child) {\n            if (child.nodeType === 6 && child.owner === me) {\n                if (child.isNamed && child.name === name\n                    || !child.isNamed && !name\n                ) {\n                    result.push(child);\n                }\n            }\n            else {\n                childrenTraversal(child.children);\n            }\n        });\n    }\n\n    childrenTraversal(this.children);\n    return result;\n};\n\n/**\n * 获取带有 san-ref 指令的子组件引用\n *\n * @param {string} name 子组件的引用名\n * @return {Component}\n */\nComponent.prototype.ref = function (name) {\n    var refTarget;\n    var owner = this;\n\n    function childrenTraversal(children) {\n        each(children, function (child) {\n            elementTraversal(child);\n            return !refTarget;\n        });\n    }\n\n    function elementTraversal(element) {\n        var nodeType = element.nodeType;\n        if (nodeType === 1) {\n            return;\n        }\n\n        if (element.owner === owner) {\n            var ref;\n            switch (element.nodeType) {\n                case 4:\n                    ref = element.aNode.directives.ref;\n                    if (ref && evalExpr(ref.value, element.scope, owner) === name) {\n                        refTarget = element.el;\n                    }\n                    break;\n\n                case 5:\n                    ref = element.source.directives.ref;\n                    if (ref && evalExpr(ref.value, element.scope, owner) === name) {\n                        refTarget = element;\n                    }\n            }\n\n            !refTarget && childrenTraversal(element.slotChildren);\n        }\n\n        !refTarget && childrenTraversal(element.children);\n    }\n\n    childrenTraversal(this.children);\n\n    return refTarget;\n};\n\n\n/**\n * 视图更新函数\n *\n * @param {Array?} changes 数据变化信息\n */\nComponent.prototype._update = function (changes) {\n    if (this.lifeCycle.disposed) {\n        return;\n    }\n\n    var me = this;\n\n\n    var needReloadForSlot = false;\n    this._notifyNeedReload = function () {\n        needReloadForSlot = true;\n    };\n\n    if (changes) {\n        this.source && nodeSBindUpdate(\n            this,\n            this.source.directives.bind,\n            changes,\n            function (name, value) {\n                if (name in me.source.hotspot.props) {\n                    return;\n                }\n\n                me.data.set(name, value, {\n                    target: {\n                        node: me.owner\n                    }\n                });\n            }\n        );\n\n\n        each(changes, function (change) {\n            var changeExpr = change.expr;\n\n            each(me.binds, function (bindItem) {\n                var relation;\n                var setExpr = bindItem.name;\n                var updateExpr = bindItem.expr;\n\n                if (!isDataChangeByElement(change, me, setExpr)\n                    && (relation = changeExprCompare(changeExpr, updateExpr, me.scope))\n                ) {\n                    if (relation > 2) {\n                        setExpr = createAccessor(\n                            [\n                                {\n                                    type: 1,\n                                    value: setExpr\n                                }\n                            ].concat(changeExpr.paths.slice(updateExpr.paths.length))\n                        );\n                        updateExpr = changeExpr;\n                    }\n\n                    if (relation >= 2 && change.type === 2) {\n                        me.data.splice(setExpr, [change.index, change.deleteCount].concat(change.insertions), {\n                            target: {\n                                node: me.owner\n                            }\n                        });\n                    }\n                    else {\n                        me.data.set(setExpr, evalExpr(updateExpr, me.scope, me.owner), {\n                            target: {\n                                node: me.owner\n                            }\n                        });\n                    }\n                }\n            });\n\n            each(me.sourceSlotNameProps, function (bindItem) {\n                needReloadForSlot = needReloadForSlot || changeExprCompare(changeExpr, bindItem.expr, me.scope);\n                return !needReloadForSlot;\n            });\n        });\n\n        if (needReloadForSlot) {\n            this._initSourceSlots();\n            this._repaintChildren();\n        }\n        else {\n            var slotChildrenLen = this.slotChildren.length;\n            while (slotChildrenLen--) {\n                var slotChild = this.slotChildren[slotChildrenLen];\n\n                if (slotChild.lifeCycle.disposed) {\n                    this.slotChildren.splice(slotChildrenLen, 1);\n                }\n                else if (slotChild.isInserted) {\n                    slotChild._update(changes, 1);\n                }\n            }\n        }\n    }\n\n    var dataChanges = this._dataChanges;\n    if (dataChanges) {\n        this._dataChanges = null;\n\n        var ifDirective = this.aNode.directives['if']; // eslint-disable-line dot-notation\n        var expectNodeType = (!ifDirective || evalExpr(ifDirective.value, this.data, this)) ? 1 : 8;\n\n        if (this.el.nodeType === expectNodeType) {\n            if (expectNodeType === 1) {\n                var dynamicProps = this.aNode.hotspot.dynamicProps;\n                for (var i = 0; i < dynamicProps.length; i++) {\n                    var prop = dynamicProps[i];\n\n                    for (var j = 0; j < dataChanges.length; j++) {\n                        var change = dataChanges[j];\n                        if (changeExprCompare(change.expr, prop.expr, this.data)\n                            || prop.hintExpr && changeExprCompare(change.expr, prop.hintExpr, this.data)\n                        ) {\n                            prop.handler(this.el, evalExpr(prop.expr, this.data, this), prop.name, this, prop);\n                            break;\n                        }\n                    }\n                }\n\n                for (var i = 0; i < this.children.length; i++) {\n                    this.children[i]._update(dataChanges);\n                }\n\n\n                if (needReloadForSlot) {\n                    this._initSourceSlots();\n                    this._repaintChildren();\n                }\n            }\n        }\n        else {\n            this._repaint(expectNodeType);\n        }\n\n        for (var i = 0; i < this.implicitChildren.length; i++) {\n            this.implicitChildren[i]._update(dataChanges);\n        }\n\n        this._toPhase('updated');\n\n        if (this.owner && this._updateBindxOwner(dataChanges)) {\n            this.owner._update();\n        }\n    }\n\n    this._notifyNeedReload = null;\n};\n\nComponent.prototype._updateBindxOwner = function (dataChanges) {\n    var me = this;\n    var xbindUped;\n\n    each(dataChanges, function (change) {\n        each(me.binds, function (bindItem) {\n            var changeExpr = change.expr;\n            if (bindItem.x\n                && !isDataChangeByElement(change, me.owner)\n                && changeExprCompare(changeExpr, parseExpr(bindItem.name), me.data)\n            ) {\n                var updateScopeExpr = bindItem.expr;\n                if (changeExpr.paths.length > 1) {\n                    updateScopeExpr = createAccessor(\n                        bindItem.expr.paths.concat(changeExpr.paths.slice(1))\n                    );\n                }\n\n                xbindUped = 1;\n                me.scope.set(\n                    updateScopeExpr,\n                    evalExpr(changeExpr, me.data, me),\n                    {\n                        target: {\n                            node: me,\n                            prop: bindItem.name\n                        }\n                    }\n                );\n            }\n        });\n    });\n\n    return xbindUped;\n};\n\n/**\n * 重新绘制组件的内容\n * 当 dynamic slot name 发生变更或 slot 匹配发生变化时，重新绘制\n * 在组件级别重绘有点粗暴，但是能保证视图结果正确性\n */\nComponent.prototype._repaintChildren = function () {\n    if (this.el.nodeType === 1) {\n        elementDisposeChildren(this.children, 0, 1);\n        this.children = [];\n\n        this.slotChildren = [];\n\n        for (var i = 0, l = this.aNode.children.length; i < l; i++) {\n            var child = createNode(this.aNode.children[i], this, this.data, this);\n            this.children.push(child);\n            child.attach(this.el);\n        }\n    }\n};\n\n\n/**\n * 组件内部监听数据变化的函数\n *\n * @private\n * @param {Object} change 数据变化信息\n */\nComponent.prototype._dataChanger = function (change) {\n    if (this.lifeCycle.created && this._aftercreated) {\n        if (!this._dataChanges) {\n            nextTick(this._update, this);\n            this._dataChanges = [];\n        }\n\n        this._dataChanges.push(change);\n    }\n    else if (this.lifeCycle.inited && this.owner) {\n        this._updateBindxOwner([change]);\n    }\n};\n\n\n/**\n * 监听组件的数据变化\n *\n * @param {string} dataName 变化的数据项\n * @param {Function} listener 监听函数\n */\nComponent.prototype.watch = function (dataName, listener) {\n    var dataExpr = parseExpr(dataName);\n\n    this.data.listen(bind(function (change) {\n        if (changeExprCompare(change.expr, dataExpr, this.data)) {\n            listener.call(this, evalExpr(dataExpr, this.data, this), change);\n        }\n    }, this));\n};\n\n\n/**\n * 将组件attach到页面\n *\n * @param {HTMLElement} parentEl 要添加到的父元素\n * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n */\nComponent.prototype.attach = function (parentEl, beforeEl) {\n    if (!this.lifeCycle.attached) {\n        this._attach(parentEl, beforeEl);\n\n        // element 都是内部创建的，只有动态创建的 component 才会进入这个分支\n        if (this.owner && !this.parent) {\n            this.owner.implicitChildren.push(this);\n        }\n    }\n};\n\nComponent.prototype._attach = function (parentEl, beforeEl) {\n    var ifDirective = this.aNode.directives['if']; // eslint-disable-line dot-notation\n\n    if (!ifDirective || evalExpr(ifDirective.value, this.data, this)) {\n        if (!this.el) {\n            var sourceNode = this.aNode.hotspot.sourceNode;\n            var props = this.aNode.props;\n\n            if (sourceNode) {\n                this.el = sourceNode.cloneNode(false);\n                props = this.aNode.hotspot.dynamicProps;\n            }\n            else {\n                this.el = createEl(this.tagName);\n            }\n\n            if (this._sbindData) {\n                for (var key in this._sbindData) {\n                    if (this._sbindData.hasOwnProperty(key)) {\n                        getPropHandler(this.tagName, key)(\n                            this.el,\n                            this._sbindData[key],\n                            key,\n                            this\n                        );\n                    }\n                }\n            }\n\n            for (var i = 0, l = props.length; i < l; i++) {\n                var prop = props[i];\n                var value = evalExpr(prop.expr, this.data, this);\n\n                if (value || !baseProps[prop.name]) {\n                    prop.handler(this.el, value, prop.name, this, prop);\n                }\n            }\n\n            this._toPhase('created');\n        }\n\n        insertBefore(this.el, parentEl, beforeEl);\n\n        if (!this._contentReady) {\n            for (var i = 0, l = this.aNode.children.length; i < l; i++) {\n                var childANode = this.aNode.children[i];\n                var child = childANode.Clazz\n                    ? new childANode.Clazz(childANode, this, this.data, this)\n                    : createNode(childANode, this, this.data, this);\n                this.children.push(child);\n                child.attach(this.el);\n            }\n\n            this._contentReady = 1;\n        }\n\n        this._attached();\n    }\n    else {\n        this.el = document.createComment(this.id);\n        this._toPhase('created');\n        insertBefore(this.el, parentEl, beforeEl);\n    }\n\n    this._toPhase('attached');\n};\n\n/**\n * 重新刷新组件视图\n */\nComponent.prototype._repaint = function () {\n    elementDisposeChildren(this.children, 1, 1);\n    this.children = [];\n    this.slotChildren = [];\n\n    this._contentReady = 0;\n\n    var len = this._elFns.length;\n    while (len--) {\n        var fn = this._elFns[len];\n        un(this.el, fn[0], fn[1], fn[2]);\n    }\n    this._elFns = [];\n\n    var beforeEl = this.el;\n    this.el = null;\n    this._attach(beforeEl.parentNode, beforeEl);\n\n    removeEl(beforeEl);\n};\n\nComponent.prototype.detach = elementOwnDetach;\nComponent.prototype.dispose = elementOwnDispose;\nComponent.prototype._onEl = elementOwnOnEl;\nComponent.prototype._attached = elementOwnAttached;\nComponent.prototype._leave = function () {\n    if (this.leaveDispose) {\n        if (!this.lifeCycle.disposed) {\n            this.data.unlisten();\n            this.dataChanger = null;\n            this._dataChanges = null;\n\n            var len = this.implicitChildren.length;\n            while (len--) {\n                this.implicitChildren[len].dispose(0, 1);\n            }\n\n            this.implicitChildren = null;\n\n            this.source = null;\n            this.sourceSlots = null;\n            this.sourceSlotNameProps = null;\n\n            // 这里不用挨个调用 dispose 了，因为 children 释放链会调用的\n            this.slotChildren = null;\n\n            var len = this.children.length;\n            while (len--) {\n                this.children[len].dispose(1, 1);\n            }\n\n            len = this._elFns.length;\n            while (len--) {\n                var fn = this._elFns[len];\n                un(this.el, fn[0], fn[1], fn[2]);\n            }\n            this._elFns = null;\n\n            // #[begin] allua\n            /* istanbul ignore if */\n            if (this._inputTimer) {\n                clearInterval(this._inputTimer);\n                this._inputTimer = null;\n            }\n            // #[end]\n\n            // 如果没有parent，说明是一个root component，一定要从dom树中remove\n            if (!this.disposeNoDetach || !this.parent) {\n                removeEl(this.el);\n            }\n\n            this._toPhase('detached');\n\n            this.el = null;\n            this.owner = null;\n            this.scope = null;\n            this.children = null;\n\n            this._toPhase('disposed');\n\n            if (this._ondisposed) {\n                this._ondisposed();\n            }\n        }\n    }\n    else if (this.lifeCycle.attached) {\n        removeEl(this.el);\n        this._toPhase('detached');\n    }\n};\n\n\n// exports = module.exports = Component;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 创建组件类\n */\n\n// var Component = require('./component');\n// var inherits = require('../util/inherits');\n\n/**\n * 创建组件类\n *\n * @param {Object} proto 组件类的方法表\n * @param {Function=} SuperComponent 父组件类\n * @return {Function}\n */\nfunction defineComponent(proto, SuperComponent) {\n    // 如果传入一个不是 san component 的 constructor，直接返回不是组件构造函数\n    // 这种场景导致的错误 san 不予考虑\n    if (typeof proto === 'function') {\n        return proto;\n    }\n\n    // #[begin] error\n    if (typeof proto !== 'object') {\n        throw new Error('[SAN FATAL] defineComponent need a plain object.');\n    }\n    // #[end]\n\n    function ComponentClass(option) { // eslint-disable-line\n        Component.call(this, option);\n    }\n\n    ComponentClass.prototype = proto;\n    inherits(ComponentClass, SuperComponent || Component);\n\n    return ComponentClass;\n}\n\n// exports = module.exports = defineComponent;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 组件Loader类\n */\n\n// var nextTick = require('../util/next-tick');\n// var each = require('../util/each');\n\n\n/**\n * 组件Loader类\n *\n * @class\n *\n * @param {Function} load load方法\n * @param {Function=} placeholder loading过程中渲染的组件\n * @param {Function=} fallback load失败时渲染的组件\n */\nfunction ComponentLoader(load, placeholder, fallback) {\n    this.load = load;\n    this.placeholder = placeholder;\n    this.fallback = fallback;\n\n    this.listeners = [];\n}\n\n\n/**\n * 开始加载组件\n *\n * @param {Function} onload 组件加载完成监听函数\n */\nComponentLoader.prototype.start = function (onload) {\n    var me = this;\n\n    switch (this.state) {\n        case 2:\n            nextTick(function () {\n                onload(me.Component);\n            });\n            break;\n\n        case 1:\n            this.listeners.push(onload);\n            break;\n\n        default:\n            this.listeners.push(onload);\n            this.state = 1;\n\n            var startLoad = this.load();\n            var done = function (RealComponent) {\n                me.done(RealComponent);\n            };\n\n            if (startLoad && typeof startLoad.then === 'function') {\n                startLoad.then(done, done);\n            }\n    }\n};\n\n/**\n * 完成组件加载\n *\n * @param {Function=} ComponentClass 组件类\n */\nComponentLoader.prototype.done = function (ComponentClass) {\n    this.state = 2;\n    ComponentClass = ComponentClass || this.fallback;\n    this.Component = ComponentClass;\n\n    each(this.listeners, function (listener) {\n        listener(ComponentClass);\n    });\n};\n\n// exports = module.exports = ComponentLoader;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 编译组件类\n */\n\n// var warn = require('../util/warn');\n// var parseTemplate = require('../parser/parse-template');\n// var parseText = require('../parser/parse-text');\n// var defineComponent = require('./define-component');\n// var ComponentLoader = require('./component-loader');\n\n\n/**\n * 编译组件类。预解析template和components\n *\n * @param {Function} ComponentClass 组件类\n */\nfunction compileComponent(ComponentClass) {\n    var proto = ComponentClass.prototype;\n\n    // pre define components class\n    /* istanbul ignore else  */\n    if (!proto.hasOwnProperty('_cmptReady')) {\n        proto.components = ComponentClass.components || proto.components || {};\n        var components = proto.components;\n\n        for (var key in components) { // eslint-disable-line\n            var componentClass = components[key];\n\n            if (typeof componentClass === 'object' && !(componentClass instanceof ComponentLoader)) {\n                components[key] = defineComponent(componentClass);\n            }\n            else if (componentClass === 'self') {\n                components[key] = ComponentClass;\n            }\n        }\n\n        proto._cmptReady = 1;\n    }\n\n\n    // pre compile template\n    /* istanbul ignore else  */\n    if (!proto.hasOwnProperty('aNode')) {\n        var aNode = parseTemplate(ComponentClass.template || proto.template, {\n            trimWhitespace: proto.trimWhitespace || ComponentClass.trimWhitespace,\n            delimiters: proto.delimiters || ComponentClass.delimiters\n        });\n\n        var firstChild = aNode.children[0];\n        if (firstChild && firstChild.textExpr) {\n            firstChild = null;\n        }\n\n        // #[begin] error\n        if (aNode.children.length !== 1 || !firstChild) {\n            warn('Component template must have a root element.');\n        }\n        // #[end]\n\n        proto.aNode = firstChild = firstChild || {\n            directives: {},\n            props: [],\n            events: [],\n            children: []\n        };\n\n        if (firstChild.tagName === 'template') {\n            firstChild.tagName = null;\n        }\n\n        if (proto.autoFillStyleAndId !== false && ComponentClass.autoFillStyleAndId !== false) {\n            var toExtraProp = {\n                'class': 0, style: 0, id: 0\n            };\n\n            var len = firstChild.props.length;\n            while (len--) {\n                var prop = firstChild.props[len];\n                if (toExtraProp[prop.name] != null) {\n                    toExtraProp[prop.name] = prop;\n                    firstChild.props.splice(len, 1);\n                }\n            }\n\n            toExtraProp.id = toExtraProp.id || { name: 'id', expr: parseText('{{id}}') };\n\n            if (toExtraProp['class']) {\n                var classExpr = parseText('{{class | _xclass}}').segs[0];\n                classExpr.filters[0].args.push(toExtraProp['class'].expr);\n                toExtraProp['class'].expr = classExpr;\n            }\n            else {\n                toExtraProp['class'] = {\n                    name: 'class',\n                    expr: parseText('{{class | _class}}')\n                };\n            }\n\n            if (toExtraProp.style) {\n                var styleExpr = parseText('{{style | _xstyle}}').segs[0];\n                styleExpr.filters[0].args.push(toExtraProp.style.expr);\n                toExtraProp.style.expr = styleExpr;\n            }\n            else {\n                toExtraProp.style = {\n                    name: 'style',\n                    expr: parseText('{{style | _style}}')\n                };\n            }\n\n            firstChild.props.push(\n                toExtraProp['class'], // eslint-disable-line dot-notation\n                toExtraProp.style,\n                toExtraProp.id\n            );\n        }\n    }\n}\n\n// exports = module.exports = compileComponent;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 判断是否结束桩\n */\n\n// #[begin] reverse\n/**\n * 判断是否结束桩\n *\n * @param {HTMLElement|HTMLComment} target 要判断的元素\n * @param {string} type 桩类型\n * @return {boolean}\n */\nfunction isEndStump(target, type) {\n    return target.nodeType === 8 && target.data === '/s-' + type;\n}\n// #[end]\n\n// exports = module.exports = isEndStump;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file text 节点类\n */\n\n// var isBrowser = require('../browser/is-browser');\n// var removeEl = require('../browser/remove-el');\n// var insertBefore = require('../browser/insert-before');\n// var changeExprCompare = require('../runtime/change-expr-compare');\n// var evalExpr = require('../runtime/eval-expr');\n// var NodeType = require('./node-type');\n// var warnSetHTML = require('./warn-set-html');\n// var isEndStump = require('./is-end-stump');\n// var getNodePath = require('./get-node-path');\n\n\n/**\n * text 节点类\n *\n * @class\n * @param {Object} aNode 抽象节点\n * @param {Node} parent 父亲节点\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n */\nfunction TextNode(aNode, parent, scope, owner, reverseWalker) {\n    this.aNode = aNode;\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n\n    // #[begin] reverse\n    if (reverseWalker) {\n        var currentNode = reverseWalker.current;\n        if (currentNode) {\n            switch (currentNode.nodeType) {\n                case 8:\n                    if (currentNode.data === 's-text') {\n                        this.sel = currentNode;\n                        currentNode.data = this.id;\n                        reverseWalker.goNext();\n\n                        while (1) { // eslint-disable-line\n                            currentNode = reverseWalker.current;\n                            /* istanbul ignore if */\n                            if (!currentNode) {\n                                throw new Error('[SAN REVERSE ERROR] Text end flag not found. \\nPaths: '\n                                    + getNodePath(this).join(' > '));\n                            }\n\n                            if (isEndStump(currentNode, 'text')) {\n                                this.el = currentNode;\n                                reverseWalker.goNext();\n                                currentNode.data = this.id;\n                                break;\n                            }\n\n                            reverseWalker.goNext();\n                        }\n                    }\n                    break;\n\n                case 3:\n                    reverseWalker.goNext();\n                    if (!this.aNode.textExpr.original) {\n                        this.el = currentNode;\n                    }\n                    break;\n            }\n        }\n        else {\n            this.el = document.createTextNode('');\n            insertBefore(this.el, reverseWalker.target, reverseWalker.current);\n        }\n    }\n    // #[end]\n}\n\nTextNode.prototype.nodeType = 1;\n\n/**\n * 将text attach到页面\n *\n * @param {HTMLElement} parentEl 要添加到的父元素\n * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n */\nTextNode.prototype.attach = function (parentEl, beforeEl) {\n    this.content = evalExpr(this.aNode.textExpr, this.scope, this.owner);\n\n    if (this.aNode.textExpr.original) {\n        this.sel = document.createComment(this.id);\n        insertBefore(this.sel, parentEl, beforeEl);\n\n        this.el = document.createComment(this.id);\n        insertBefore(this.el, parentEl, beforeEl);\n\n        var tempFlag = document.createElement('script');\n        parentEl.insertBefore(tempFlag, this.el);\n        tempFlag.insertAdjacentHTML('beforebegin', this.content);\n        parentEl.removeChild(tempFlag);\n    }\n    else {\n        this.el = document.createTextNode(this.content);\n        insertBefore(this.el, parentEl, beforeEl);\n    }\n};\n\n/**\n * 销毁 text 节点\n *\n * @param {boolean=} noDetach 是否不要把节点从dom移除\n */\nTextNode.prototype.dispose = function (noDetach) {\n    if (!noDetach) {\n        removeEl(this.el);\n        removeEl(this.sel);\n    }\n\n    this.el = null;\n    this.sel = null;\n};\n\nvar textUpdateProp = isBrowser\n    && (typeof document.createTextNode('').textContent === 'string'\n        ? 'textContent'\n        : 'data');\n\n/**\n * 更新 text 节点的视图\n *\n * @param {Array} changes 数据变化信息\n */\nTextNode.prototype._update = function (changes) {\n    if (this.aNode.textExpr.value) {\n        return;\n    }\n\n    var len = changes.length;\n    while (len--) {\n        if (changeExprCompare(changes[len].expr, this.aNode.textExpr, this.scope)) {\n            var text = evalExpr(this.aNode.textExpr, this.scope, this.owner);\n\n            if (text !== this.content) {\n                this.content = text;\n\n                if (this.aNode.textExpr.original) {\n                    var startRemoveEl = this.sel.nextSibling;\n                    var parentEl = this.el.parentNode;\n\n                    while (startRemoveEl !== this.el) {\n                        var removeTarget = startRemoveEl;\n                        startRemoveEl = startRemoveEl.nextSibling;\n                        removeEl(removeTarget);\n                    }\n\n                    // #[begin] error\n                    warnSetHTML(parentEl);\n                    // #[end]\n\n                    var tempFlag = document.createElement('script');\n                    parentEl.insertBefore(tempFlag, this.el);\n                    tempFlag.insertAdjacentHTML('beforebegin', text);\n                    parentEl.removeChild(tempFlag);\n                }\n                else {\n                    this.el[textUpdateProp] = text;\n                }\n            }\n\n            return;\n        }\n    }\n};\n\n// exports = module.exports = TextNode;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 将没有 root 只有 children 的元素 attach 到页面\n */\n\n\n// var insertBefore = require('../browser/insert-before');\n// var LifeCycle = require('./life-cycle');\n// var createNode = require('./create-node');\n\n/**\n * 将没有 root 只有 children 的元素 attach 到页面\n * 主要用于 slot 和 template\n *\n * @param {HTMLElement} parentEl 要添加到的父元素\n * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n */\nfunction nodeOwnOnlyChildrenAttach(parentEl, beforeEl) {\n    this.sel = document.createComment(this.id);\n    insertBefore(this.sel, parentEl, beforeEl);\n\n    for (var i = 0; i < this.aNode.children.length; i++) {\n        var child = createNode(\n            this.aNode.children[i],\n            this,\n            this.childScope || this.scope,\n            this.childOwner || this.owner\n        );\n        this.children.push(child);\n        child.attach(parentEl, beforeEl);\n    }\n\n    this.el = document.createComment(this.id);\n    insertBefore(this.el, parentEl, beforeEl);\n\n    this.lifeCycle = LifeCycle.attached;\n}\n\n// exports = module.exports = nodeOwnOnlyChildrenAttach;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file slot 节点类\n */\n\n// var each = require('../util/each');\n// var guid = require('../util/guid');\n// var extend = require('../util/extend');\n// var ExprType = require('../parser/expr-type');\n// var createAccessor = require('../parser/create-accessor');\n// var evalExpr = require('../runtime/eval-expr');\n// var Data = require('../runtime/data');\n// var DataChangeType = require('../runtime/data-change-type');\n// var changeExprCompare = require('../runtime/change-expr-compare');\n// var insertBefore = require('../browser/insert-before');\n// var removeEl = require('../browser/remove-el');\n// var NodeType = require('./node-type');\n// var LifeCycle = require('./life-cycle');\n// var getANodeProp = require('./get-a-node-prop');\n// var nodeSBindInit = require('./node-s-bind-init');\n// var nodeSBindUpdate = require('./node-s-bind-update');\n// var createReverseNode = require('./create-reverse-node');\n// var elementDisposeChildren = require('./element-dispose-children');\n// var nodeOwnOnlyChildrenAttach = require('./node-own-only-children-attach');\n\n\n/**\n * slot 节点类\n *\n * @class\n * @param {Object} aNode 抽象节点\n * @param {Node} parent 父亲节点\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n */\nfunction SlotNode(aNode, parent, scope, owner, reverseWalker) {\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n    this.parentComponent = parent.nodeType === 5\n        ? parent\n        : parent.parentComponent;\n\n    this.id = guid++;\n\n    this.lifeCycle = LifeCycle.start;\n    this.children = [];\n\n    // calc slot name\n    this.nameBind = getANodeProp(aNode, 'name');\n    if (this.nameBind) {\n        this.isNamed = true;\n        this.name = evalExpr(this.nameBind.expr, this.scope, this.owner);\n    }\n\n    // calc aNode children\n    var sourceSlots = owner.sourceSlots;\n    var matchedSlots;\n    if (sourceSlots) {\n        matchedSlots = this.isNamed ? sourceSlots.named[this.name] : sourceSlots.noname;\n    }\n\n    if (matchedSlots) {\n        this.isInserted = true;\n    }\n\n    this.aNode = {\n        directives: aNode.directives,\n        props: [],\n        events: [],\n        children: matchedSlots || aNode.children.slice(0),\n        vars: aNode.vars\n    };\n\n    // calc scoped slot vars\n    var initData;\n    if (nodeSBindInit(this, aNode.directives.bind)) {\n        initData = extend({}, this._sbindData);\n    }\n\n    if (aNode.vars) {\n        initData = initData || {};\n        each(aNode.vars, function (varItem) {\n            initData[varItem.name] = evalExpr(varItem.expr, scope, owner);\n        });\n    }\n\n    // child owner & child scope\n    if (this.isInserted) {\n        this.childOwner = owner.owner;\n        this.childScope = owner.scope;\n    }\n\n    if (initData) {\n        this.isScoped = true;\n        this.childScope = new Data(initData, this.childScope || this.scope);\n    }\n\n\n    owner.slotChildren.push(this);\n\n    // #[begin] reverse\n    if (reverseWalker) {\n\n        this.sel = document.createComment(this.id);\n        insertBefore(this.sel, reverseWalker.target, reverseWalker.current);\n\n        var me = this;\n        each(this.aNode.children, function (aNodeChild) {\n            me.children.push(createReverseNode(\n                aNodeChild,\n                me,\n                me.childScope || me.scope,\n                me.childOwner || me.owner,\n                reverseWalker\n            ));\n        });\n\n        this.el = document.createComment(this.id);\n        insertBefore(this.el, reverseWalker.target, reverseWalker.current);\n\n        this.lifeCycle = LifeCycle.attached;\n    }\n    // #[end]\n}\n\nSlotNode.prototype.nodeType = 6;\n\n/**\n * 销毁释放 slot\n *\n * @param {boolean=} noDetach 是否不要把节点从dom移除\n * @param {boolean=} noTransition 是否不显示过渡动画效果\n */\nSlotNode.prototype.dispose = function (noDetach, noTransition) {\n    this.childOwner = null;\n    this.childScope = null;\n\n    elementDisposeChildren(this.children, noDetach, noTransition);\n\n    if (!noDetach) {\n        removeEl(this.el);\n        removeEl(this.sel);\n    }\n\n    this.sel = null;\n    this.el = null;\n    this.owner = null;\n    this.scope = null;\n    this.children = null;\n\n    this.lifeCycle = LifeCycle.disposed;\n\n    if (this._ondisposed) {\n        this._ondisposed();\n    }\n};\n\nSlotNode.prototype.attach = nodeOwnOnlyChildrenAttach;\n\n/**\n * 视图更新函数\n *\n * @param {Array} changes 数据变化信息\n * @param {boolean=} isFromOuter 变化信息是否来源于父组件之外的组件\n * @return {boolean}\n */\nSlotNode.prototype._update = function (changes, isFromOuter) {\n    var me = this;\n\n    if (this.nameBind && evalExpr(this.nameBind.expr, this.scope, this.owner) !== this.name) {\n        this.owner._notifyNeedReload();\n        return false;\n    }\n\n    if (isFromOuter) {\n        if (this.isInserted) {\n            for (var i = 0; i < this.children.length; i++) {\n                this.children[i]._update(changes);\n            }\n        }\n    }\n    else {\n        if (this.isScoped) {\n            var varKeys = {};\n            each(this.aNode.vars, function (varItem) {\n                varKeys[varItem.name] = 1;\n                me.childScope.set(varItem.name, evalExpr(varItem.expr, me.scope, me.owner));\n            });\n\n            var scopedChanges = [];\n\n            nodeSBindUpdate(\n                this,\n                this.aNode.directives.bind,\n                changes,\n                function (name, value) {\n                    if (varKeys[name]) {\n                        return;\n                    }\n\n                    me.childScope.set(name, value);\n                    scopedChanges.push({\n                        type: 1,\n                        expr: createAccessor([\n                            {type: 1, value: name}\n                        ]),\n                        value: value,\n                        option: {}\n                    });\n                }\n            );\n\n            each(changes, function (change) {\n                if (!me.isInserted) {\n                    scopedChanges.push(change);\n                }\n\n                each(me.aNode.vars, function (varItem) {\n                    var name = varItem.name;\n                    var relation = changeExprCompare(change.expr, varItem.expr, me.scope);\n\n                    if (relation < 1) {\n                        return;\n                    }\n\n                    if (change.type !== 2) {\n                        scopedChanges.push({\n                            type: 1,\n                            expr: createAccessor([\n                                {type: 1, value: name}\n                            ]),\n                            value: me.childScope.get(name),\n                            option: change.option\n                        });\n                    }\n                    else if (relation === 2) {\n                        scopedChanges.push({\n                            expr: createAccessor([\n                                {type: 1, value: name}\n                            ]),\n                            type: 2,\n                            index: change.index,\n                            deleteCount: change.deleteCount,\n                            value: change.value,\n                            insertions: change.insertions,\n                            option: change.option\n                        });\n                    }\n                });\n            });\n\n            for (var i = 0; i < this.children.length; i++) {\n                this.children[i]._update(scopedChanges);\n            }\n        }\n        else if (!this.isInserted) {\n            for (var i = 0; i < this.children.length; i++) {\n                this.children[i]._update(changes);\n            }\n        }\n    }\n};\n\n// exports = module.exports = SlotNode;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file for 指令节点类\n */\n\n// var inherits = require('../util/inherits');\n// var each = require('../util/each');\n// var guid = require('../util/guid');\n// var ExprType = require('../parser/expr-type');\n// var parseExpr = require('../parser/parse-expr');\n// var createAccessor = require('../parser/create-accessor');\n// var Data = require('../runtime/data');\n// var DataChangeType = require('../runtime/data-change-type');\n// var changeExprCompare = require('../runtime/change-expr-compare');\n// var evalExpr = require('../runtime/eval-expr');\n// var changesIsInDataRef = require('../runtime/changes-is-in-data-ref');\n// var insertBefore = require('../browser/insert-before');\n// var NodeType = require('./node-type');\n// var createNode = require('./create-node');\n// var createReverseNode = require('./create-reverse-node');\n// var nodeOwnSimpleDispose = require('./node-own-simple-dispose');\n// var nodeOwnCreateStump = require('./node-own-create-stump');\n\n\n/**\n * 循环项的数据容器类\n *\n * @inner\n * @class\n * @param {Object} forElement for元素对象\n * @param {*} item 当前项的数据\n * @param {number} index 当前项的索引\n */\nfunction ForItemData(forElement, item, index) {\n    this.parent = forElement.scope;\n    this.raw = {};\n    this.listeners = [];\n\n    this.directive = forElement.aNode.directives['for']; // eslint-disable-line dot-notation\n    this.indexName = this.directive.index || '$index';\n\n    this.raw[this.directive.item] = item;\n    this.raw[this.indexName] = index;\n}\n\n/**\n * 将数据操作的表达式，转换成为对parent数据操作的表达式\n * 主要是对item和index进行处理\n *\n * @param {Object} expr 表达式\n * @return {Object}\n */\nForItemData.prototype.exprResolve = function (expr) {\n    var me = this;\n    var directive = this.directive;\n\n    function resolveItem(expr) {\n        if (expr.type === 4 && expr.paths[0].value === directive.item) {\n            return createAccessor(\n                directive.value.paths.concat(\n                    {\n                        type: 2,\n                        value: me.raw[me.indexName]\n                    },\n                    expr.paths.slice(1)\n                )\n            );\n        }\n\n        return expr;\n    }\n\n    expr = resolveItem(expr);\n\n    var resolvedPaths = [];\n\n    each(expr.paths, function (item) {\n        resolvedPaths.push(\n            item.type === 4 && item.paths[0].value === me.indexName\n                ? {\n                    type: 2,\n                    value: me.raw[me.indexName]\n                }\n                : resolveItem(item)\n        );\n    });\n\n    return createAccessor(resolvedPaths);\n};\n\n// 代理数据操作方法\ninherits(ForItemData, Data);\neach(\n    ['set', 'remove', 'unshift', 'shift', 'push', 'pop', 'splice'],\n    function (method) {\n        ForItemData.prototype['_' + method] = Data.prototype[method];\n\n        ForItemData.prototype[method] = function (expr) {\n            expr = this.exprResolve(parseExpr(expr));\n            this.parent[method].apply(\n                this.parent,\n                [expr].concat(Array.prototype.slice.call(arguments, 1))\n            );\n        };\n    }\n);\n\n/**\n * for 指令节点类\n *\n * @class\n * @param {Object} aNode 抽象节点\n * @param {Node} parent 父亲节点\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n */\nfunction ForNode(aNode, parent, scope, owner, reverseWalker) {\n    this.aNode = aNode;\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n    this.parentComponent = parent.nodeType === 5\n        ? parent\n        : parent.parentComponent;\n\n    this.id = guid++;\n    this.children = [];\n\n    this.param = aNode.directives['for']; // eslint-disable-line dot-notation\n\n    this.itemPaths = [\n        {\n            type: 1,\n            value: this.param.item\n        }\n    ];\n\n    this.itemExpr = {\n        type: 4,\n        paths: this.itemPaths,\n        raw: this.param.item\n    };\n\n    if (this.param.index) {\n        this.indexExpr = createAccessor([{\n            type: 1,\n            value: '' + this.param.index\n        }]);\n    }\n\n\n    // #[begin] reverse\n    if (reverseWalker) {\n        this.listData = evalExpr(this.param.value, this.scope, this.owner);\n        if (this.listData instanceof Array) {\n            for (var i = 0; i < this.listData.length; i++) {\n                this.children.push(createReverseNode(\n                    this.aNode.forRinsed,\n                    this,\n                    new ForItemData(this, this.listData[i], i),\n                    this.owner,\n                    reverseWalker\n                ));\n            }\n        }\n        else if (this.listData && typeof this.listData === 'object') {\n            for (var i in this.listData) {\n                if (this.listData.hasOwnProperty(i) && this.listData[i] != null) {\n                    this.children.push(createReverseNode(\n                        this.aNode.forRinsed,\n                        this,\n                        new ForItemData(this, this.listData[i], i),\n                        this.owner,\n                        reverseWalker\n                    ));\n                }\n            }\n        }\n\n        this._create();\n        insertBefore(this.el, reverseWalker.target, reverseWalker.current);\n    }\n    // #[end]\n}\n\n\nForNode.prototype.nodeType = 3;\nForNode.prototype._create = nodeOwnCreateStump;\nForNode.prototype.dispose = nodeOwnSimpleDispose;\n\n/**\n * 将元素attach到页面的行为\n *\n * @param {HTMLElement} parentEl 要添加到的父元素\n * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n */\nForNode.prototype.attach = function (parentEl, beforeEl) {\n    this._create();\n    insertBefore(this.el, parentEl, beforeEl);\n    this.listData = evalExpr(this.param.value, this.scope, this.owner);\n\n    this._createChildren();\n};\n\n/**\n * 创建子元素\n */\nForNode.prototype._createChildren = function () {\n    var parentEl = this.el.parentNode;\n    var listData = this.listData;\n\n    if (listData instanceof Array) {\n        for (var i = 0; i < listData.length; i++) {\n            var child = createNode(this.aNode.forRinsed, this, new ForItemData(this, listData[i], i), this.owner);\n            this.children.push(child);\n            child.attach(parentEl, this.el);\n        }\n    }\n    else if (listData && typeof listData === 'object') {\n        for (var i in listData) {\n            if (listData.hasOwnProperty(i) && listData[i] != null) {\n                var child = createNode(this.aNode.forRinsed, this, new ForItemData(this, listData[i], i), this.owner);\n                this.children.push(child);\n                child.attach(parentEl, this.el);\n            }\n        }\n    }\n};\n\n/* eslint-disable fecs-max-statements */\n\n/**\n * 视图更新函数\n *\n * @param {Array} changes 数据变化信息\n */\nForNode.prototype._update = function (changes) {\n    var listData = evalExpr(this.param.value, this.scope, this.owner);\n    var oldIsArr = this.listData instanceof Array;\n    var newIsArr = listData instanceof Array;\n\n    if (this.children.length) {\n        if (!listData || newIsArr && listData.length === 0) {\n            this._disposeChildren();\n            this.listData = listData;\n        }\n        else if (oldIsArr !== newIsArr || !newIsArr) {\n            // 就是这么暴力\n            // 不推荐使用for遍历object，用的话自己负责\n            this.listData = listData;\n\n            var isListChanged;\n            for (var cIndex = 0; !isListChanged && cIndex < changes.length; cIndex++) {\n                isListChanged = changeExprCompare(changes[cIndex].expr, this.param.value, this.scope);\n            }\n            var dataHotspot = this.aNode.hotspot.data;\n            if (isListChanged || dataHotspot && changesIsInDataRef(changes, dataHotspot)) {\n                var me = this;\n                this._disposeChildren(null, function () {\n                    me._createChildren();\n                });\n            }\n        }\n        else {\n            this._updateArray(changes, listData);\n            this.listData = listData;\n        }\n    }\n    else {\n        this.listData = listData;\n        this._createChildren();\n    }\n};\n\n/**\n * 销毁释放子元素\n *\n * @param {Array?} children 要销毁的子元素，默认为自身的children\n * @param {Function} callback 释放完成的回调函数\n */\nForNode.prototype._disposeChildren = function (children, callback) {\n    var parentEl = this.el.parentNode;\n    var parentFirstChild = parentEl.firstChild;\n    var parentLastChild = parentEl.lastChild;\n\n    var len = this.children.length;\n\n    var violentClear = !this.aNode.directives.transition\n        && !children\n        // 是否 parent 的唯一 child\n        && len && parentFirstChild === this.children[0].el && parentLastChild === this.el\n        ;\n\n    if (!children) {\n        children = this.children;\n        this.children = [];\n    }\n\n\n    var disposedChildCount = 0;\n    len = children.length;\n\n    // 调用入口处已保证此处必有需要被删除的 child\n    for (var i = 0; i < len; i++) {\n        var disposeChild = children[i];\n\n        if (violentClear) {\n            disposeChild && disposeChild.dispose(violentClear, violentClear);\n        }\n        else if (disposeChild) {\n            disposeChild._ondisposed = childDisposed;\n            disposeChild.dispose();\n        }\n        else {\n            childDisposed();\n        }\n    }\n\n    if (violentClear) {\n        // #[begin] allua\n        /* istanbul ignore next */\n        if (ie) {\n            parentEl.innerHTML = '';\n        }\n        else {\n            // #[end]\n            parentEl.textContent = '';\n            // #[begin] allua\n        }\n        // #[end]\n\n        this.el = document.createComment(this.id);\n        parentEl.appendChild(this.el);\n        callback && callback();\n    }\n\n    function childDisposed() {\n        disposedChildCount++;\n        if (disposedChildCount >= len) {\n            callback && callback();\n        }\n    }\n};\n\nForNode.prototype.opti = typeof navigator !== 'undefined'\n    && /chrome\\/[0-9]+/i.test(navigator.userAgent);\n/**\n * 数组类型的视图更新\n *\n * @param {Array} changes 数据变化信息\n * @param {Array} newList 新数组数据\n */\nForNode.prototype._updateArray = function (changes, newList) {\n    var oldChildrenLen = this.children.length;\n    var childrenChanges = new Array(oldChildrenLen);\n\n    function pushToChildrenChanges(change) {\n        for (var i = 0, l = childrenChanges.length; i < l; i++) {\n            (childrenChanges[i] = childrenChanges[i] || []).push(change);\n        }\n        childrenNeedUpdate = null;\n        isOnlyDispose = false;\n    }\n\n    var disposeChildren = [];\n\n    // 控制列表是否整体更新的变量\n    var isChildrenRebuild;\n\n    //\n    var isOnlyDispose = true;\n\n    var childrenNeedUpdate = {};\n\n    var newLen = newList.length;\n    var getItemKey = this.aNode.hotspot.getForKey;\n\n    /* eslint-disable no-redeclare */\n    for (var cIndex = 0; cIndex < changes.length; cIndex++) {\n        var change = changes[cIndex];\n        var relation = changeExprCompare(change.expr, this.param.value, this.scope);\n\n        if (!relation) {\n            // 无关时，直接传递给子元素更新，列表本身不需要动\n            pushToChildrenChanges(change);\n        }\n        else {\n            if (relation > 2) {\n                // 变更表达式是list绑定表达式的子项\n                // 只需要对相应的子项进行更新\n                var changePaths = change.expr.paths;\n                var forLen = this.param.value.paths.length;\n                var changeIndex = +evalExpr(changePaths[forLen], this.scope, this.owner);\n\n                if (isNaN(changeIndex)) {\n                    pushToChildrenChanges(change);\n                }\n                else if (!isChildrenRebuild) {\n                    isOnlyDispose = false;\n                    childrenNeedUpdate && (childrenNeedUpdate[changeIndex] = 1);\n\n                    childrenChanges[changeIndex] = childrenChanges[changeIndex] || [];\n                    if (this.param.index) {\n                        childrenChanges[changeIndex].push(change);\n                    }\n\n                    change = change.type === 1\n                        ? {\n                            type: change.type,\n                            expr: createAccessor(\n                                this.itemPaths.concat(changePaths.slice(forLen + 1))\n                            ),\n                            value: change.value,\n                            option: change.option\n                        }\n                        : {\n                            index: change.index,\n                            deleteCount: change.deleteCount,\n                            insertions: change.insertions,\n                            type: change.type,\n                            expr: createAccessor(\n                                this.itemPaths.concat(changePaths.slice(forLen + 1))\n                            ),\n                            value: change.value,\n                            option: change.option\n                        };\n\n\n                    childrenChanges[changeIndex].push(change);\n\n                    if (change.type === 1) {\n                        if (this.children[changeIndex]) {\n                            this.children[changeIndex].scope._set(\n                                change.expr,\n                                change.value,\n                                {\n                                    silent: 1\n                                }\n                            );\n                        }\n                        else {\n                            // 设置数组项的索引可能超出数组长度，此时需要新增\n                            // 比如当前数组只有2项，但是set list[4]\n                            this.children[changeIndex] = 0;\n                        }\n                    }\n                    else if (this.children[changeIndex]) {\n                        this.children[changeIndex].scope._splice(\n                            change.expr,\n                            [].concat(change.index, change.deleteCount, change.insertions),\n                            {\n                                silent: 1\n                            }\n                        );\n                    }\n                }\n            }\n            else if (isChildrenRebuild) {\n                continue;\n            }\n            else if (relation === 2 && change.type === 2\n                && (this.owner.updateMode !== 'optimized' || !this.opti || this.aNode.directives.transition)\n            ) {\n                childrenNeedUpdate = null;\n\n                // 变更表达式是list绑定表达式本身数组的splice操作\n                // 此时需要删除部分项，创建部分项\n                var changeStart = change.index;\n                var deleteCount = change.deleteCount;\n                var insertionsLen = change.insertions.length;\n                var newCount = insertionsLen - deleteCount;\n\n                if (newCount) {\n                    var indexChange = this.param.index\n                        ? {\n                            type: 1,\n                            option: change.option,\n                            expr: this.indexExpr\n                        }\n                        : null;\n\n                    for (var i = changeStart + deleteCount; i < this.children.length; i++) {\n                        if (indexChange) {\n                            isOnlyDispose = false;\n                            (childrenChanges[i] = childrenChanges[i] || []).push(indexChange);\n                        }\n\n                        var child = this.children[i];\n                        if (child) {\n                            child.scope.raw[child.scope.indexName] = i - deleteCount + insertionsLen;\n                        }\n                    }\n                }\n\n                var deleteLen = deleteCount;\n                while (deleteLen--) {\n                    if (deleteLen < insertionsLen) {\n                        isOnlyDispose = false;\n                        var i = changeStart + deleteLen;\n                        // update\n                        (childrenChanges[i] = childrenChanges[i] || []).push({\n                            type: 1,\n                            option: change.option,\n                            expr: this.itemExpr,\n                            value: change.insertions[deleteLen]\n                        });\n                        if (this.children[i]) {\n                            this.children[i].scope.raw[this.param.item] = change.insertions[deleteLen];\n                        }\n                    }\n                }\n\n                if (newCount < 0) {\n                    disposeChildren = disposeChildren.concat(\n                        this.children.splice(changeStart + insertionsLen, -newCount)\n                    );\n                    childrenChanges.splice(changeStart + insertionsLen, -newCount);\n                }\n                else if (newCount > 0) {\n                    isOnlyDispose = false;\n                    var spliceArgs = [changeStart + deleteCount, 0].concat(new Array(newCount));\n                    this.children.splice.apply(this.children, spliceArgs);\n                    childrenChanges.splice.apply(childrenChanges, spliceArgs);\n                }\n            }\n            else {\n                childrenNeedUpdate = null;\n                isOnlyDispose = false;\n\n                isChildrenRebuild = 1;\n\n                // 变更表达式是list绑定表达式本身或母项的重新设值\n                // 此时需要更新整个列表\n\n                if (getItemKey && newLen && oldChildrenLen) {\n                    // 如果设置了trackBy，用lis更新。开始 ====\n                    var newListKeys = [];\n                    var oldListKeys = [];\n                    var newListKeysMap = {};\n                    var oldListInNew = [];\n                    var oldListKeyIndex = {};\n\n                    for (var i = 0; i < newList.length; i++) {\n                        var itemKey = getItemKey(newList[i]);\n                        newListKeys.push(itemKey);\n                        newListKeysMap[itemKey] = i;\n                    };\n\n                    for (var i = 0; i < this.listData.length; i++) {\n                        var itemKey = getItemKey(this.listData[i]);\n\n                        oldListKeys.push(itemKey);\n                        oldListKeyIndex[itemKey] = i;\n\n                        if (newListKeysMap[itemKey] != null) {\n                            oldListInNew[i] = newListKeysMap[itemKey];\n                        }\n                        else {\n                            oldListInNew[i] = -1;\n                            disposeChildren.push(this.children[i]);\n                        }\n                    };\n\n                    var newIndexStart = 0;\n                    var newIndexEnd = newLen;\n                    var oldIndexStart = 0;\n                    var oldIndexEnd = oldChildrenLen;\n\n                    // 优化：从头开始比对新旧 list 项是否相同\n                    while (newIndexStart < newLen\n                        && oldIndexStart < oldChildrenLen\n                        && newListKeys[newIndexStart] === oldListKeys[oldIndexStart]\n                    ) {\n                        if (this.listData[oldIndexStart] !== newList[newIndexStart]) {\n                            this.children[oldIndexStart].scope.raw[this.param.item] = newList[newIndexStart];\n                            (childrenChanges[oldIndexStart] = childrenChanges[oldIndexStart] || []).push({\n                                type: 1,\n                                option: change.option,\n                                expr: this.itemExpr,\n                                value: newList[newIndexStart]\n                            });\n                        }\n\n                        // 对list更上级数据的直接设置\n                        if (relation < 2) {\n                            (childrenChanges[oldIndexStart] = childrenChanges[oldIndexStart] || []).push(change);\n                        }\n\n                        newIndexStart++;\n                        oldIndexStart++;\n                    }\n\n                    var indexChange = this.param.index\n                        ? {\n                            type: 1,\n                            option: change.option,\n                            expr: this.indexExpr\n                        }\n                        : null;\n\n                    // 优化：从尾开始比对新旧 list 项是否相同\n                    while (newIndexEnd > newIndexStart && oldIndexEnd > oldIndexStart\n                        && newListKeys[newIndexEnd - 1] === oldListKeys[oldIndexEnd - 1]\n                    ) {\n                        newIndexEnd--;\n                        oldIndexEnd--;\n\n                        if (this.listData[oldIndexEnd] !== newList[newIndexEnd]) {\n                            // refresh item\n                            this.children[oldIndexEnd].scope.raw[this.param.item] = newList[newIndexEnd];\n                            (childrenChanges[oldIndexEnd] = childrenChanges[oldIndexEnd] || []).push({\n                                type: 1,\n                                option: change.option,\n                                expr: this.itemExpr,\n                                value: newList[newIndexEnd]\n                            });\n\n\n                        }\n\n                        // refresh index\n                        if (newIndexEnd !== oldIndexEnd) {\n                            this.children[oldIndexEnd].scope.raw[this.children[oldIndexEnd].scope.indexName] = newIndexEnd;\n\n                            if (indexChange) {\n                                (childrenChanges[oldIndexEnd] = childrenChanges[oldIndexEnd] || []).push(indexChange);\n                            }\n                        }\n\n                        // 对list更上级数据的直接设置\n                        if (relation < 2) {\n                            (childrenChanges[oldIndexEnd] = childrenChanges[oldIndexEnd] || []).push(change);\n                        }\n                    }\n\n                    var oldListLIS = [];\n                    var lisIdx = [];\n                    var lisPos = -1;\n                    var lisSource = oldListInNew.slice(oldIndexStart, oldIndexEnd);\n                    var len = oldIndexEnd - oldIndexStart;\n                    var preIdx = new Array(len);\n\n                    for (var i = 0; i < len; i++) {\n                        var oldItemInNew = lisSource[i];\n                        if (oldItemInNew === -1) {\n                            continue;\n                        }\n\n                        var rePos = -1;\n                        var rePosEnd = oldListLIS.length;\n\n                        if (rePosEnd > 0 && oldListLIS[rePosEnd - 1] <= oldItemInNew) {\n                            rePos = rePosEnd - 1;\n                        }\n                        else {\n                            while (rePosEnd - rePos > 1) {\n                                var mid = Math.floor((rePos + rePosEnd) / 2);\n                                if (oldListLIS[mid] > oldItemInNew) {\n                                    rePosEnd = mid;\n                                } else {\n                                    rePos = mid;\n                                }\n                            }\n                        }\n\n                        if (rePos !== -1) {\n                            preIdx[i] = lisIdx[rePos];\n                        }\n\n                        if (rePos === lisPos) {\n                            lisPos++;\n                            oldListLIS[lisPos] = oldItemInNew;\n                            lisIdx[lisPos] = i;\n                        } else if (oldItemInNew < oldListLIS[rePos + 1]) {\n                            oldListLIS[rePos + 1] = oldItemInNew;\n                            lisIdx[rePos + 1] = i;\n                        }\n                    }\n\n                    for (var i = lisIdx[lisPos]; lisPos >= 0; i = preIdx[i], lisPos--) {\n                        oldListLIS[lisPos] = i;\n                    }\n\n                    var oldListLISPos = oldListLIS.length;\n                    var staticPos = oldListLISPos ? oldListInNew[oldListLIS[--oldListLISPos] + oldIndexStart] : -1;\n\n                    var newChildren = [];\n                    var newChildrenChanges = [];\n\n                    for (var i = newLen - 1; i >= 0; i--) {\n                        if (i >= newIndexEnd) {\n                            newChildren[i] = this.children[oldChildrenLen - newLen + i];\n                            newChildrenChanges[i] = childrenChanges[oldChildrenLen - newLen + i];\n                        }\n                        else if (i < newIndexStart) {\n                            newChildren[i] = this.children[i];\n                            newChildrenChanges[i] = childrenChanges[i];\n                        }\n                        else {\n                            var oldListIndex = oldListKeyIndex[newListKeys[i]];\n\n                            if (i === staticPos) {\n                                var oldScope = this.children[oldListIndex].scope;\n\n                                // 如果数据本身引用发生变化，设置变更\n                                if (this.listData[oldListIndex] !== newList[i]) {\n                                    oldScope.raw[this.param.item] = newList[i];\n                                    (childrenChanges[oldListIndex] = childrenChanges[oldListIndex] || []).push({\n                                        type: 1,\n                                        option: change.option,\n                                        expr: this.itemExpr,\n                                        value: newList[i]\n                                    });\n                                }\n\n                                // refresh index\n                                if (indexChange && i !== oldListIndex) {\n                                    oldScope.raw[oldScope.indexName] = i;\n\n                                    if (indexChange) {\n                                        (childrenChanges[oldListIndex] = childrenChanges[oldListIndex] || []).push(indexChange);\n                                    }\n                                }\n\n                                // 对list更上级数据的直接设置\n                                if (relation < 2) {\n                                    (childrenChanges[oldListIndex] = childrenChanges[oldListIndex] || []).push(change);\n                                }\n\n                                newChildren[i] = this.children[oldListIndex];\n                                newChildrenChanges[i] = childrenChanges[oldListIndex];\n\n                                staticPos = oldListLISPos ? oldListInNew[oldListLIS[--oldListLISPos] + oldIndexStart] : -1;\n                            }\n                            else {\n                                if (oldListIndex != null) {\n                                    disposeChildren.push(this.children[oldListIndex]);\n                                }\n\n                                newChildren[i] = 0;\n                                newChildrenChanges[i] = 0;\n                            }\n\n                        }\n                    }\n\n                    this.children = newChildren;\n                    childrenChanges = newChildrenChanges;\n                    // 如果设置了trackBy，用lis更新。结束 ====\n                }\n                else {\n                    // 老的比新的多的部分，标记需要dispose\n                    if (oldChildrenLen > newLen) {\n                        disposeChildren = disposeChildren.concat(this.children.slice(newLen));\n                        childrenChanges = childrenChanges.slice(0, newLen);\n                        this.children = this.children.slice(0, newLen);\n                    }\n\n                    // 剩下的部分整项变更\n                    for (var i = 0; i < newLen; i++) {\n                        // 对list更上级数据的直接设置\n                        if (relation < 2) {\n                            (childrenChanges[i] = childrenChanges[i] || []).push(change);\n                        }\n\n                        if (this.children[i]) {\n                            if (this.children[i].scope.raw[this.param.item] !== newList[i]) {\n                                this.children[i].scope.raw[this.param.item] = newList[i];\n                                (childrenChanges[i] = childrenChanges[i] || []).push({\n                                    type: 1,\n                                    option: change.option,\n                                    expr: this.itemExpr,\n                                    value: newList[i]\n                                });\n                            }\n                        }\n                        else {\n                            this.children[i] = 0;\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n\n    // 标记 length 是否发生变化\n    if (newLen !== oldChildrenLen && this.param.value.paths) {\n        var lengthChange = {\n            type: 1,\n            option: {},\n            expr: createAccessor(\n                this.param.value.paths.concat({\n                    type: 1,\n                    value: 'length'\n                })\n            )\n        };\n\n        if (changesIsInDataRef([lengthChange], this.aNode.hotspot.data)) {\n            pushToChildrenChanges(lengthChange);\n        }\n    }\n\n    // 执行视图更新，先删再刷新\n    this._doCreateAndUpdate = doCreateAndUpdate;\n\n    var me = this;\n    if (disposeChildren.length === 0) {\n        doCreateAndUpdate();\n    }\n    else {\n        this._disposeChildren(disposeChildren, function () {\n            if (doCreateAndUpdate === me._doCreateAndUpdate) {\n                doCreateAndUpdate();\n            }\n        });\n    }\n\n    function doCreateAndUpdate() {\n        me._doCreateAndUpdate = null;\n\n        if (isOnlyDispose) {\n            return;\n        }\n\n        var beforeEl = me.el;\n        var parentEl = beforeEl.parentNode;\n\n        // 对相应的项进行更新\n        // 如果不attached则直接创建，如果存在则调用更新函数\n        var j = -1;\n        for (var i = 0; i < newLen; i++) {\n            var child = me.children[i];\n\n            if (child) {\n                if (childrenChanges[i] && (!childrenNeedUpdate || childrenNeedUpdate[i])) {\n                    child._update(childrenChanges[i]);\n                }\n            }\n            else {\n                if (j < i) {\n                    j = i + 1;\n                    beforeEl = null;\n                    while (j < newLen) {\n                        var nextChild = me.children[j];\n                        if (nextChild) {\n                            beforeEl = nextChild.sel || nextChild.el;\n                            break;\n                        }\n                        j++;\n                    }\n                }\n\n                me.children[i] = createNode(me.aNode.forRinsed, me, new ForItemData(me, newList[i], i), me.owner);\n                me.children[i].attach(parentEl, beforeEl || me.el);\n            }\n        }\n    }\n};\n\n// exports = module.exports = ForNode;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file if 指令节点类\n */\n\n// var each = require('../util/each');\n// var guid = require('../util/guid');\n// var insertBefore = require('../browser/insert-before');\n// var evalExpr = require('../runtime/eval-expr');\n// var NodeType = require('./node-type');\n// var createNode = require('./create-node');\n// var createReverseNode = require('./create-reverse-node');\n// var nodeOwnCreateStump = require('./node-own-create-stump');\n// var nodeOwnSimpleDispose = require('./node-own-simple-dispose');\n\n/**\n * if 指令节点类\n *\n * @class\n * @param {Object} aNode 抽象节点\n * @param {Node} parent 父亲节点\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n */\nfunction IfNode(aNode, parent, scope, owner, reverseWalker) {\n    this.aNode = aNode;\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n    this.parentComponent = parent.nodeType === 5\n        ? parent\n        : parent.parentComponent;\n\n    this.id = guid++;\n    this.children = [];\n\n    // #[begin] reverse\n    if (reverseWalker) {\n        if (evalExpr(this.aNode.directives['if'].value, this.scope, this.owner)) { // eslint-disable-line dot-notation\n            this.elseIndex = -1;\n            this.children[0] = createReverseNode(\n                this.aNode.ifRinsed,\n                this,\n                this.scope,\n                this.owner,\n                reverseWalker\n            );\n        }\n        else {\n            var me = this;\n            each(aNode.elses, function (elseANode, index) {\n                var elif = elseANode.directives.elif;\n\n                if (!elif || elif && evalExpr(elif.value, me.scope, me.owner)) {\n                    me.elseIndex = index;\n                    me.children[0] = createReverseNode(\n                        elseANode,\n                        me,\n                        me.scope,\n                        me.owner,\n                        reverseWalker\n                    );\n                    return false;\n                }\n            });\n        }\n\n        this._create();\n        insertBefore(this.el, reverseWalker.target, reverseWalker.current);\n    }\n    // #[end]\n}\n\nIfNode.prototype.nodeType = 2;\n\nIfNode.prototype._create = nodeOwnCreateStump;\nIfNode.prototype.dispose = nodeOwnSimpleDispose;\n\n/**\n * attach到页面\n *\n * @param {HTMLElement} parentEl 要添加到的父元素\n * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n */\nIfNode.prototype.attach = function (parentEl, beforeEl) {\n    var me = this;\n    var elseIndex;\n    var child;\n\n    if (evalExpr(this.aNode.directives['if'].value, this.scope, this.owner)) { // eslint-disable-line dot-notation\n        child = createNode(this.aNode.ifRinsed, this, this.scope, this.owner);\n        elseIndex = -1;\n    }\n    else {\n        each(this.aNode.elses, function (elseANode, index) {\n            var elif = elseANode.directives.elif;\n\n            if (!elif || elif && evalExpr(elif.value, me.scope, me.owner)) {\n                child = createNode(elseANode, me, me.scope, me.owner);\n                elseIndex = index;\n                return false;\n            }\n        });\n    }\n\n    if (child) {\n        this.children[0] = child;\n        child.attach(parentEl, beforeEl);\n        this.elseIndex = elseIndex;\n    }\n\n\n    this._create();\n    insertBefore(this.el, parentEl, beforeEl);\n};\n\n\n/**\n * 视图更新函数\n *\n * @param {Array} changes 数据变化信息\n */\nIfNode.prototype._update = function (changes) {\n    var me = this;\n    var childANode = this.aNode.ifRinsed;\n    var elseIndex;\n\n    if (evalExpr(this.aNode.directives['if'].value, this.scope, this.owner)) { // eslint-disable-line dot-notation\n        elseIndex = -1;\n    }\n    else {\n        each(this.aNode.elses, function (elseANode, index) {\n            var elif = elseANode.directives.elif;\n\n            if (elif && evalExpr(elif.value, me.scope, me.owner) || !elif) {\n                elseIndex = index;\n                childANode = elseANode;\n                return false;\n            }\n        });\n    }\n\n    var child = this.children[0];\n    if (elseIndex === this.elseIndex) {\n        child && child._update(changes);\n    }\n    else {\n        this.children = [];\n        if (child) {\n            child._ondisposed = newChild;\n            child.dispose();\n        }\n        else {\n            newChild();\n        }\n\n        this.elseIndex = elseIndex;\n    }\n\n    function newChild() {\n        if (typeof elseIndex !== 'undefined') {\n            (me.children[0] = createNode(childANode, me, me.scope, me.owner))\n                .attach(me.el.parentNode, me.el);\n        }\n    }\n};\n\n// exports = module.exports = IfNode;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file template 节点类\n */\n\n// var each = require('../util/each');\n// var guid = require('../util/guid');\n// var insertBefore = require('../browser/insert-before');\n// var removeEl = require('../browser/remove-el');\n// var NodeType = require('./node-type');\n// var LifeCycle = require('./life-cycle');\n// var createReverseNode = require('./create-reverse-node');\n// var elementDisposeChildren = require('./element-dispose-children');\n// var nodeOwnOnlyChildrenAttach = require('./node-own-only-children-attach');\n\n/**\n * template 节点类\n *\n * @class\n * @param {Object} aNode 抽象节点\n * @param {Node} parent 父亲节点\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n */\nfunction TemplateNode(aNode, parent, scope, owner, reverseWalker) {\n    this.aNode = aNode;\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n    this.parentComponent = parent.nodeType === 5\n        ? parent\n        : parent.parentComponent;\n\n    this.id = guid++;\n    this.lifeCycle = LifeCycle.start;\n    this.children = [];\n\n    // #[begin] reverse\n    if (reverseWalker) {\n        this.sel = document.createComment(this.id);\n        insertBefore(this.sel, reverseWalker.target, reverseWalker.current);\n\n        var me = this;\n        each(this.aNode.children, function (aNodeChild) {\n            me.children.push(createReverseNode(aNodeChild, me, me.scope, me.owner, reverseWalker));\n        });\n\n        this.el = document.createComment(this.id);\n        insertBefore(this.el, reverseWalker.target, reverseWalker.current);\n\n        this.lifeCycle = LifeCycle.attached;\n    }\n    // #[end]\n}\n\n\n\nTemplateNode.prototype.nodeType = 7;\n\nTemplateNode.prototype.attach = nodeOwnOnlyChildrenAttach;\n\n/**\n * 销毁释放\n *\n * @param {boolean=} noDetach 是否不要把节点从dom移除\n * @param {boolean=} noTransition 是否不显示过渡动画效果\n */\nTemplateNode.prototype.dispose = function (noDetach, noTransition) {\n    elementDisposeChildren(this.children, noDetach, noTransition);\n\n    if (!noDetach) {\n        removeEl(this.el);\n        removeEl(this.sel);\n    }\n\n    this.sel = null;\n    this.el = null;\n    this.owner = null;\n    this.scope = null;\n    this.children = null;\n\n    this.lifeCycle = LifeCycle.disposed;\n\n    if (this._ondisposed) {\n        this._ondisposed();\n    }\n};\n\n/**\n * 视图更新函数\n *\n * @param {Array} changes 数据变化信息\n */\nTemplateNode.prototype._update = function (changes) {\n    for (var i = 0; i < this.children.length; i++) {\n        this.children[i]._update(changes);\n    }\n};\n\n// exports = module.exports = TemplateNode;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file ANode预热\n */\n\n// var ExprType = require('../parser/expr-type');\n// var each = require('../util/each');\n// var extend = require('../util/extend');\n// var createEl = require('../browser/create-el');\n// var getPropHandler = require('./get-prop-handler');\n// var getANodeProp = require('./get-a-node-prop');\n// var isBrowser = require('../browser/is-browser');\n// var TextNode = require('./text-node');\n// var SlotNode = require('./slot-node');\n// var ForNode = require('./for-node');\n// var IfNode = require('./if-node');\n// var TemplateNode = require('./template-node');\n\n/**\n * ANode预热，分析的数据引用等信息\n *\n * @param {Object} aNode 要预热的ANode\n */\nfunction preheatANode(aNode) {\n    var stack = [];\n\n    function recordHotspotData(expr, notContentData) {\n        var refs = analyseExprDataHotspot(expr);\n\n        if (refs.length) {\n            for (var i = 0, len = stack.length; i < len; i++) {\n                if (!notContentData || i !== len - 1) {\n                    var data = stack[i].hotspot.data;\n                    if (!data) {\n                        data = stack[i].hotspot.data = {};\n                    }\n\n                    each(refs, function (ref) {\n                        data[ref] = 1;\n                    });\n                }\n            }\n        }\n    }\n\n\n    function analyseANodeHotspot(aNode) {\n        if (!aNode.hotspot) {\n            stack.push(aNode);\n\n\n            if (aNode.textExpr) {\n                aNode.hotspot = {};\n                aNode.Clazz = TextNode;\n                recordHotspotData(aNode.textExpr);\n            }\n            else {\n                var sourceNode;\n                if (isBrowser && aNode.tagName\n                    && aNode.tagName.indexOf('-') < 0\n                    && !/^(template|slot|select|input|option|button|video|audio|canvas|img|embed|object|iframe)$/i.test(aNode.tagName)\n                ) {\n                    sourceNode = createEl(aNode.tagName);\n                }\n\n                aNode.hotspot = {\n                    dynamicProps: [],\n                    xProps: [],\n                    props: {},\n                    sourceNode: sourceNode\n                };\n\n\n                // === analyse hotspot data: start\n                each(aNode.vars, function (varItem) {\n                    recordHotspotData(varItem.expr);\n                });\n\n                each(aNode.props, function (prop) {\n                    recordHotspotData(prop.expr);\n                });\n\n                for (var key in aNode.directives) {\n                    /* istanbul ignore else  */\n                    if (aNode.directives.hasOwnProperty(key)) {\n                        var directive = aNode.directives[key];\n                        recordHotspotData(\n                            directive.value,\n                            !/^(html|bind)$/.test(key)\n                        );\n\n                        // init trackBy getKey function\n                        if (key === 'for') {\n                            var trackBy = directive.trackBy;\n                            if (trackBy\n                                && trackBy.type === 4\n                                && trackBy.paths[0].value === directive.item\n                            ) {\n                                aNode.hotspot.getForKey = new Function(\n                                    directive.item,\n                                    'return ' + trackBy.raw\n                                );\n                            }\n                        }\n                    }\n                }\n\n                each(aNode.elses, function (child) {\n                    analyseANodeHotspot(child);\n                });\n\n                each(aNode.children, function (child) {\n                    analyseANodeHotspot(child);\n                });\n                // === analyse hotspot data: end\n\n\n                // === analyse hotspot props: start\n                each(aNode.props, function (prop, index) {\n                    aNode.hotspot.props[prop.name] = index;\n                    prop.handler = getPropHandler(aNode.tagName, prop.name);\n\n                    if (prop.name === 'id') {\n                        prop.id = true;\n                        aNode.hotspot.idProp = prop;\n                        aNode.hotspot.dynamicProps.push(prop);\n                    }\n                    else if (prop.expr.value != null) {\n                        if (sourceNode) {\n                            prop.handler(sourceNode, prop.expr.value, prop.name, aNode);\n                        }\n                    }\n                    else {\n                        if (prop.x) {\n                            aNode.hotspot.xProps.push(prop);\n                        }\n                        aNode.hotspot.dynamicProps.push(prop);\n                    }\n                });\n\n                // ie 下，如果 option 没有 value 属性，select.value = xx 操作不会选中 option\n                // 所以没有设置 value 时，默认把 option 的内容作为 value\n                if (aNode.tagName === 'option'\n                    && !getANodeProp(aNode, 'value')\n                    && aNode.children[0]\n                ) {\n                    var valueProp = {\n                        name: 'value',\n                        expr: aNode.children[0].textExpr,\n                        handler: getPropHandler(aNode.tagName, 'value')\n                    };\n                    aNode.props.push(valueProp);\n                    aNode.hotspot.dynamicProps.push(valueProp);\n                    aNode.hotspot.props.value = aNode.props.length - 1;\n                }\n\n                if (aNode.directives['if']) { // eslint-disable-line dot-notation\n                    aNode.ifRinsed = {\n                        children: aNode.children,\n                        props: aNode.props,\n                        events: aNode.events,\n                        tagName: aNode.tagName,\n                        vars: aNode.vars,\n                        hotspot: aNode.hotspot,\n                        directives: extend({}, aNode.directives)\n                    };\n                    aNode.Clazz = IfNode;\n                    aNode = aNode.ifRinsed;\n                    aNode.directives['if'] = null; // eslint-disable-line dot-notation\n                }\n\n                if (aNode.directives['for']) { // eslint-disable-line dot-notation\n                    aNode.forRinsed = {\n                        children: aNode.children,\n                        props: aNode.props,\n                        events: aNode.events,\n                        tagName: aNode.tagName,\n                        vars: aNode.vars,\n                        hotspot: aNode.hotspot,\n                        directives: extend({}, aNode.directives)\n                    };\n                    aNode.Clazz = ForNode;\n                    aNode.forRinsed.directives['for'] = null; // eslint-disable-line dot-notation\n                    aNode = aNode.forRinsed;\n                }\n\n                switch (aNode.tagName) {\n                    case 'slot':\n                        aNode.Clazz = SlotNode;\n                        break;\n\n                    case 'template':\n                        aNode.Clazz = TemplateNode;\n                }\n                // === analyse hotspot props: end\n            }\n\n            stack.pop();\n        }\n    }\n\n    if (aNode) {\n        analyseANodeHotspot(aNode);\n    }\n}\n\n/**\n * 分析表达式的数据引用\n *\n * @param {Object} expr 要分析的表达式\n * @return {Array}\n */\nfunction analyseExprDataHotspot(expr, accessorMeanDynamic) {\n    var refs = [];\n    var isDynamic;\n\n    function analyseExprs(exprs, accessorMeanDynamic) {\n        for (var i = 0, l = exprs.length; i < l; i++) {\n            refs = refs.concat(analyseExprDataHotspot(exprs[i], accessorMeanDynamic));\n            isDynamic = isDynamic || exprs[i].dynamic;\n        }\n    }\n\n    switch (expr.type) {\n        case 4:\n            isDynamic = accessorMeanDynamic;\n\n            var paths = expr.paths;\n            refs.push(paths[0].value);\n\n            if (paths.length > 1) {\n                refs.push(paths[0].value + '.' + (paths[1].value || '*'));\n            }\n\n            analyseExprs(paths.slice(1), 1);\n            break;\n\n        case 9:\n            refs = analyseExprDataHotspot(expr.expr, accessorMeanDynamic);\n            isDynamic = expr.expr.dynamic;\n            break;\n\n        case 7:\n        case 8:\n        case 10:\n            analyseExprs(expr.segs, accessorMeanDynamic);\n            break;\n\n        case 5:\n            refs = analyseExprDataHotspot(expr.expr);\n            isDynamic = expr.expr.dynamic;\n\n            each(expr.filters, function (filter) {\n                analyseExprs(filter.name.paths);\n                analyseExprs(filter.args);\n            });\n\n            break;\n\n        case 6:\n            analyseExprs(expr.name.paths);\n            analyseExprs(expr.args);\n            break;\n\n        case 12:\n        case 11:\n            for (var i = 0; i < expr.items.length; i++) {\n                refs = refs.concat(analyseExprDataHotspot(expr.items[i].expr));\n                isDynamic = isDynamic || expr.items[i].expr.dynamic;\n            }\n            break;\n    }\n\n    isDynamic && (expr.dynamic = true);\n    return refs;\n}\n\n// exports = module.exports = preheatANode;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 将 binds 的 name 从 kebabcase 转换成 camelcase\n */\n\n// var kebab2camel = require('../util/kebab2camel');\n// var each = require('../util/each');\n\n/**\n * 将 binds 的 name 从 kebabcase 转换成 camelcase\n *\n * @param {Array} binds binds集合\n * @return {Array}\n */\nfunction camelComponentBinds(binds) {\n    var result = [];\n    each(binds, function (bind) {\n        result.push({\n            name: kebab2camel(bind.name),\n            expr: bind.expr,\n            x: bind.x,\n            raw: bind.raw\n        });\n    });\n\n    return result;\n}\n\n// exports = module.exports = camelComponentBinds;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 创建组件Loader\n */\n\n// var ComponentLoader = require('./component-loader');\n\n/**\n * 创建组件Loader\n *\n * @param {Object|Function} options 创建组件Loader的参数。为Object时参考下方描述，为Function时代表load方法。\n * @param {Function} options.load load方法\n * @param {Function=} options.placeholder loading过程中渲染的占位组件\n * @param {Function=} options.fallback load失败时渲染的组件\n * @return {ComponentLoader}\n */\nfunction createComponentLoader(options) {\n    var placeholder = options.placeholder;\n    var fallback = options.fallback;\n    var load = typeof options === 'function' ? options : options.load;\n\n    return new ComponentLoader(load, placeholder, fallback);\n}\n\n// exports = module.exports = createComponentLoader;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 编译源码的 helper 方法集合\n */\n\n// var each = require('../util/each');\n// var ExprType = require('../parser/expr-type');\n\n// #[begin] ssr\n// \n// /**\n//  * 编译源码的 helper 方法集合对象\n//  */\n// var compileExprSource = {\n// \n//     /**\n//      * 字符串字面化\n//      *\n//      * @param {string} source 需要字面化的字符串\n//      * @return {string} 字符串字面化结果\n//      */\n//     stringLiteralize: function (source) {\n//         return '\"'\n//             + source\n//                 .replace(/\\x5C/g, '\\\\\\\\')\n//                 .replace(/\"/g, '\\\\\"')\n//                 .replace(/\\x0A/g, '\\\\n')\n//                 .replace(/\\x09/g, '\\\\t')\n//                 .replace(/\\x0D/g, '\\\\r')\n//                 // .replace( /\\x08/g, '\\\\b' )\n//                 // .replace( /\\x0C/g, '\\\\f' )\n//             + '\"';\n//     },\n// \n//     /**\n//      * 生成数据访问表达式代码\n//      *\n//      * @param {Object?} accessorExpr accessor表达式对象\n//      * @return {string}\n//      */\n//     dataAccess: function (accessorExpr) {\n//         var code = 'componentCtx.data';\n//         if (accessorExpr) {\n//             each(accessorExpr.paths, function (path) {\n//                 if (path.type === 4) {\n//                     code += '[' + compileExprSource.dataAccess(path) + ']';\n//                     return;\n//                 }\n// \n//                 switch (typeof path.value) {\n//                     case 'string':\n//                         code += '.' + path.value;\n//                         break;\n// \n//                     case 'number':\n//                         code += '[' + path.value + ']';\n//                         break;\n//                 }\n//             });\n//         }\n// \n//         return code;\n//     },\n// \n//     /**\n//      * 生成调用表达式代码\n//      *\n//      * @param {Object?} callExpr 调用表达式对象\n//      * @return {string}\n//      */\n//     callExpr: function (callExpr) {\n//         var paths = callExpr.name.paths;\n//         var code = 'componentCtx.proto.' + paths[0].value;\n// \n//         for (var i = 1; i < paths.length; i++) {\n//             var path = paths[i];\n// \n//             switch (path.type) {\n//                 case 1:\n//                     code += '.' + path.value;\n//                     break;\n// \n//                 case 2:\n//                     code += '[' + path.value + ']';\n//                     break;\n// \n//                 default:\n//                     code += '[' + compileExprSource.expr(path) + ']';\n//             }\n//         }\n// \n//         code += '(';\n//         each(callExpr.args, function (arg, index) {\n//             code += (index > 0 ? ', ' : '') + compileExprSource.expr(arg);\n//         });\n//         code += ')';\n// \n//         return code;\n//     },\n// \n//     /**\n//      * 生成插值代码\n//      *\n//      * @param {Object} interpExpr 插值表达式对象\n//      * @return {string}\n//      */\n//     interp: function (interpExpr) {\n//         var code = compileExprSource.expr(interpExpr.expr);\n// \n// \n//         each(interpExpr.filters, function (filter) {\n//             var filterName = filter.name.paths[0].value;\n// \n//             switch (filterName) {\n//                 case '_style':\n//                 case '_class':\n//                     code = filterName + 'Filter(' + code + ')';\n//                     break;\n// \n//                 case '_xstyle':\n//                 case '_xclass':\n//                     code = filterName + 'Filter(' + code + ', ' + compileExprSource.expr(filter.args[0]) + ')';\n//                     break;\n// \n//                 case 'url':\n//                     code = 'encodeURIComponent(' + code + ')';\n//                     break;\n// \n//                 default:\n//                     code = 'callFilter(componentCtx, \"' + filterName + '\", [' + code;\n//                     each(filter.args, function (arg) {\n//                         code += ', ' + compileExprSource.expr(arg);\n//                     });\n//                     code += '])';\n//             }\n// \n//         });\n// \n//         if (!interpExpr.original) {\n//             return 'escapeHTML(' + code + ')';\n//         }\n// \n//         return code;\n//     },\n// \n//     /**\n//      * 生成文本片段代码\n//      *\n//      * @param {Object} textExpr 文本片段表达式对象\n//      * @return {string}\n//      */\n//     text: function (textExpr) {\n//         if (textExpr.segs.length === 0) {\n//             return '\"\"';\n//         }\n// \n//         var code = '';\n// \n//         each(textExpr.segs, function (seg) {\n//             var segCode = compileExprSource.expr(seg);\n//             code += code ? ' + ' + segCode : segCode;\n//         });\n// \n//         return code;\n//     },\n// \n//     /**\n//      * 生成数组字面量代码\n//      *\n//      * @param {Object} arrayExpr 数组字面量表达式对象\n//      * @return {string}\n//      */\n//     array: function (arrayExpr) {\n//         var code = [];\n// \n//         each(arrayExpr.items, function (item) {\n//             code.push((item.spread ? '...' : '') + compileExprSource.expr(item.expr));\n//         });\n// \n//         return '[\\n' + code.join(',\\n') + '\\n]';\n//     },\n// \n//     /**\n//      * 生成对象字面量代码\n//      *\n//      * @param {Object} objExpr 对象字面量表达式对象\n//      * @return {string}\n//      */\n//     object: function (objExpr) {\n//         var code = [];\n// \n//         each(objExpr.items, function (item) {\n//             if (item.spread) {\n//                 code.push('...' + compileExprSource.expr(item.expr));\n//             }\n//             else {\n//                 code.push(compileExprSource.expr(item.name) + ':' + compileExprSource.expr(item.expr));\n//             }\n//         });\n// \n//         return '{\\n' + code.join(',\\n') + '\\n}';\n//     },\n// \n//     /**\n//      * 二元表达式操作符映射表\n//      *\n//      * @type {Object}\n//      */\n//     binaryOp: {\n//         /* eslint-disable */\n//         43: '+',\n//         45: '-',\n//         42: '*',\n//         47: '/',\n//         60: '<',\n//         62: '>',\n//         76: '&&',\n//         94: '!=',\n//         121: '<=',\n//         122: '==',\n//         123: '>=',\n//         155: '!==',\n//         183: '===',\n//         248: '||'\n//         /* eslint-enable */\n//     },\n// \n//     /**\n//      * 生成表达式代码\n//      *\n//      * @param {Object} expr 表达式对象\n//      * @return {string}\n//      */\n//     expr: function (expr) {\n//         if (expr.parenthesized) {\n//             return '(' + compileExprSource._expr(expr) + ')';\n//         }\n// \n//         return compileExprSource._expr(expr);\n//     },\n// \n//     /**\n//      * 根据表达式类型进行生成代码函数的中转分发\n//      *\n//      * @param {Object} expr 表达式对象\n//      * @return {string}\n//      */\n//     _expr: function (expr) {\n//         switch (expr.type) {\n//             case 9:\n//                 switch (expr.operator) {\n//                     case 33:\n//                         return '!' + compileExprSource.expr(expr.expr);\n//                     case 45:\n//                         return '-' + compileExprSource.expr(expr.expr);\n//                 }\n//                 return '';\n// \n//             case 8:\n//                 return compileExprSource.expr(expr.segs[0])\n//                     + compileExprSource.binaryOp[expr.operator]\n//                     + compileExprSource.expr(expr.segs[1]);\n// \n//             case 10:\n//                 return compileExprSource.expr(expr.segs[0])\n//                     + '?' + compileExprSource.expr(expr.segs[1])\n//                     + ':' + compileExprSource.expr(expr.segs[2]);\n// \n//             case 1:\n//                 return compileExprSource.stringLiteralize(expr.literal || expr.value);\n// \n//             case 2:\n//                 return expr.value;\n// \n//             case 3:\n//                 return expr.value ? 'true' : 'false';\n// \n//             case 4:\n//                 return compileExprSource.dataAccess(expr);\n// \n//             case 5:\n//                 return compileExprSource.interp(expr);\n// \n//             case 7:\n//                 return compileExprSource.text(expr);\n// \n//             case 12:\n//                 return compileExprSource.array(expr);\n// \n//             case 11:\n//                 return compileExprSource.object(expr);\n// \n//             case 6:\n//                 return compileExprSource.callExpr(expr);\n// \n//             case 13:\n//                 return 'null';\n//         }\n//     }\n// };\n// #[end]\n\n// exports = module.exports = compileExprSource;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 编译源码的中间buffer类\n */\n\n// var each = require('../util/each');\n// var compileExprSource = require('./compile-expr-source');\n\n\n// #[begin] ssr\n// /**\n//  * 编译源码的中间buffer类\n//  *\n//  * @class\n//  */\n// function CompileSourceBuffer() {\n//     this.segs = [];\n// }\n// \n// /**\n//  * 添加原始代码，将原封不动输出\n//  *\n//  * @param {string} code 原始代码\n//  */\n// CompileSourceBuffer.prototype.addRaw = function (code) {\n//     this.segs.push({\n//         type: 'RAW',\n//         code: code\n//     });\n// };\n// \n// /**\n//  * 添加被拼接为html的原始代码\n//  *\n//  * @param {string} code 原始代码\n//  */\n// CompileSourceBuffer.prototype.joinRaw = function (code) {\n//     this.segs.push({\n//         type: 'JOIN_RAW',\n//         code: code\n//     });\n// };\n// \n// /**\n//  * 添加renderer方法的起始源码\n//  */\n// CompileSourceBuffer.prototype.addRendererStart = function () {\n//     this.addRaw('function (data, noDataOutput) {');\n//     this.addRaw(\n//         compileSourcePreCode.toString()\n//             .split('\\n')\n//             .slice(1)\n//             .join('\\n')\n//             .replace(/\\}\\s*$/, '')\n//     );\n// };\n// \n// /**\n//  * 添加renderer方法的结束源码\n//  */\n// CompileSourceBuffer.prototype.addRendererEnd = function () {\n//     this.addRaw('}');\n// };\n// \n// /**\n//  * 添加被拼接为html的静态字符串\n//  *\n//  * @param {string} str 被拼接的字符串\n//  */\n// CompileSourceBuffer.prototype.joinString = function (str) {\n//     this.segs.push({\n//         str: str,\n//         type: 'JOIN_STRING'\n//     });\n// };\n// \n// /**\n//  * 添加被拼接为html的数据访问\n//  *\n//  * @param {Object?} accessor 数据访问表达式对象\n//  */\n// CompileSourceBuffer.prototype.joinDataStringify = function () {\n//     this.segs.push({\n//         type: 'JOIN_DATA_STRINGIFY'\n//     });\n// };\n// \n// /**\n//  * 添加被拼接为html的表达式\n//  *\n//  * @param {Object} expr 表达式对象\n//  */\n// CompileSourceBuffer.prototype.joinExpr = function (expr) {\n//     this.segs.push({\n//         expr: expr,\n//         type: 'JOIN_EXPR'\n//     });\n// };\n// \n// /**\n//  * 生成编译后代码\n//  *\n//  * @return {string}\n//  */\n// CompileSourceBuffer.prototype.toCode = function () {\n//     var code = [];\n//     var temp = '';\n// \n//     function genStrLiteral() {\n//         if (temp) {\n//             code.push('html += ' + compileExprSource.stringLiteralize(temp) + ';');\n//         }\n// \n//         temp = '';\n//     }\n// \n//     each(this.segs, function (seg) {\n//         if (seg.type === 'JOIN_STRING') {\n//             temp += seg.str;\n//             return;\n//         }\n// \n//         genStrLiteral();\n//         switch (seg.type) {\n//             case 'JOIN_DATA_STRINGIFY':\n//                 code.push('html += \"\x3c!--s-data:\" + JSON.stringify('\n//                     + compileExprSource.dataAccess() + ') + \"--\x3e\";');\n//                 break;\n// \n//             case 'JOIN_EXPR':\n//                 code.push('html += ' + compileExprSource.expr(seg.expr) + ';');\n//                 break;\n// \n//             case 'JOIN_RAW':\n//                 code.push('html += ' + seg.code + ';');\n//                 break;\n// \n//             case 'RAW':\n//                 code.push(seg.code);\n//                 break;\n// \n//         }\n//     });\n// \n//     genStrLiteral();\n// \n//     return code.join('\\n');\n// };\n// \n// /* eslint-disable no-unused-vars */\n// /* eslint-disable fecs-camelcase */\n// \n// /**\n//  * 组件编译的模板函数\n//  *\n//  * @inner\n//  */\n// function compileSourcePreCode() {\n//     var $version = '3.7.9';\n// \n//     var componentRenderers = {};\n// \n//     function extend(target, source) {\n//         if (source) {\n//             Object.keys(source).forEach(function (key) {\n//                 var value = source[key];\n//                 if (typeof value !== 'undefined') {\n//                     target[key] = value;\n//                 }\n//             });\n//         }\n// \n//         return target;\n//     }\n// \n//     function each(array, iterator) {\n//         if (array && array.length > 0) {\n//             for (var i = 0, l = array.length; i < l; i++) {\n//                 if (iterator(array[i], i) === false) {\n//                     break;\n//                 }\n//             }\n//         }\n//     }\n// \n//     function contains(array, value) {\n//         var result;\n//         each(array, function (item) {\n//             result = item === value;\n//             return !result;\n//         });\n// \n//         return result;\n//     }\n// \n//     var HTML_ENTITY = {\n//         /* jshint ignore:start */\n//         '&': '&amp;',\n//         '<': '&lt;',\n//         '>': '&gt;',\n//         '\"': '&quot;',\n//         /* eslint-disable quotes */\n//         \"'\": '&#39;'\n//         /* eslint-enable quotes */\n//         /* jshint ignore:end */\n//     };\n// \n//     function htmlFilterReplacer(c) {\n//         return HTML_ENTITY[c];\n//     }\n// \n//     function escapeHTML(source) {\n//         if (source == null) {\n//             return '';\n//         }\n// \n//         if (typeof source === 'string') {\n//             return source ? source.replace(/[&<>\"']/g, htmlFilterReplacer) : '';\n//         }\n// \n//         return '' + source;\n//     }\n// \n//     function _classFilter(source) {\n//         if (source instanceof Array) {\n//             return source.join(' ');\n//         }\n// \n//         return source;\n//     }\n// \n//     function _styleFilter(source) {\n//         if (typeof source === 'object') {\n//             var result = '';\n//             if (source) {\n//                 Object.keys(source).forEach(function (key) {\n//                     result += key + ':' + source[key] + ';';\n//                 });\n//             }\n// \n//             return result;\n//         }\n// \n//         return source;\n//     }\n// \n//     function _xclassFilter(outer, inner) {\n//         if (outer instanceof Array) {\n//             outer = outer.join(' ');\n//         }\n// \n//         if (outer) {\n//             if (inner) {\n//                 return inner + ' ' + outer;\n//             }\n// \n//             return outer;\n//         }\n// \n//         return inner;\n//     }\n// \n//      function _xstyleFilter(outer, inner) {\n//         outer = outer && defaultStyleFilter(outer);\n//         if (outer) {\n//             if (inner) {\n//                 return inner + ';' + outer;\n//             }\n// \n//             return outer;\n//         }\n// \n//         return inner;\n//     }\n// \n// \n//     function attrFilter(name, value) {\n//         if (value) {\n//             return ' ' + name + '=\"' + value + '\"';\n//         }\n// \n//         return '';\n//     }\n// \n//     function boolAttrFilter(name, value) {\n//         if (value && value !== 'false' && value !== '0') {\n//             return ' ' + name;\n//         }\n// \n//         return '';\n//     }\n// \n//     function callFilter(ctx, name, args) {\n//         var filter = ctx.proto.filters[name];\n//         if (typeof filter === 'function') {\n//             return filter.apply(ctx, args);\n//         }\n//     }\n// }\n// /* eslint-enable no-unused-vars */\n// /* eslint-enable fecs-camelcase */\n// \n// \n// #[end]\n\n// exports = module.exports = CompileSourceBuffer;\n\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 将组件编译成 render 方法的 js 源码\n */\n\n\n// var each = require('../util/each');\n// var extend = require('../util/extend');\n// var splitStr2Obj = require('../util/split-str-2-obj');\n// var parseExpr = require('../parser/parse-expr');\n// var ExprType = require('../parser/expr-type');\n// var postProp = require('../parser/post-prop');\n// var autoCloseTags = require('../browser/auto-close-tags');\n// var camelComponentBinds = require('./camel-component-binds');\n// var CompileSourceBuffer = require('./compile-source-buffer');\n// var compileExprSource = require('./compile-expr-source');\n// var getANodeProp = require('./get-a-node-prop');\n// var ComponentLoader = require('./component-loader');\n\n// #[begin] ssr\n// \n// var ssrIndex = 0;\n// function genSSRId() {\n//     return '_id' + (ssrIndex++);\n// }\n// \n// var stringifier = {\n//     obj: function (source) {\n//         var prefixComma;\n//         var result = '{';\n// \n//         for (var key in source) {\n//             if (!source.hasOwnProperty(key) || typeof source[key] === 'undefined') {\n//                 continue;\n//             }\n// \n//             if (prefixComma) {\n//                 result += ',';\n//             }\n//             prefixComma = 1;\n// \n//             result += compileExprSource.stringLiteralize(key) + ':' + stringifier.any(source[key]);\n//         }\n// \n//         return result + '}';\n//     },\n// \n//     arr: function (source) {\n//         var prefixComma;\n//         var result = '[';\n// \n//         each(source, function (value) {\n//             if (prefixComma) {\n//                 result += ',';\n//             }\n//             prefixComma = 1;\n// \n//             result += stringifier.any(value);\n//         });\n// \n//         return result + ']';\n//     },\n// \n//     str: function (source) {\n//         return compileExprSource.stringLiteralize(source);\n//     },\n// \n//     date: function (source) {\n//         return 'new Date(' + source.getTime() + ')';\n//     },\n// \n//     any: function (source) {\n//         switch (typeof source) {\n//             case 'string':\n//                 return stringifier.str(source);\n// \n//             case 'number':\n//                 return '' + source;\n// \n//             case 'boolean':\n//                 return source ? 'true' : 'false';\n// \n//             case 'object':\n//                 if (!source) {\n//                     return null;\n//                 }\n// \n//                 if (source instanceof Array) {\n//                     return stringifier.arr(source);\n//                 }\n// \n//                 if (source instanceof Date) {\n//                     return stringifier.date(source);\n//                 }\n// \n//                 return stringifier.obj(source);\n//         }\n// \n//         throw new Error('Cannot Stringify:' + source);\n//     }\n// };\n// \n// var COMPONENT_RESERVED_MEMBERS = splitStr2Obj('aNode,computed,filters,components,'\n//     + 'initData,template,attached,created,detached,disposed,compiled'\n// );\n// \n// /**\n//  * 生成序列化时起始桩的html\n//  *\n//  * @param {string} type 桩类型标识\n//  * @param {string?} content 桩内的内容\n//  * @return {string}\n//  */\n// function serializeStump(type, content) {\n//     return '\x3c!--s-' + type + (content ? ':' + content : '') + '--\x3e';\n// }\n// \n// /**\n//  * 生成序列化时结束桩的html\n//  *\n//  * @param {string} type 桩类型标识\n//  * @return {string}\n//  */\n// function serializeStumpEnd(type) {\n//     return '\x3c!--/s-' + type + '--\x3e';\n// }\n// \n// /**\n//  * element 的编译方法集合对象\n//  *\n//  * @inner\n//  */\n// var elementSourceCompiler = {\n// \n//     /* eslint-disable max-params */\n// \n//     /**\n//      * 编译元素标签头\n//      *\n//      * @param {CompileSourceBuffer} sourceBuffer 编译源码的中间buffer\n//      * @param {ANode} aNode 抽象节点\n//      * @param {string=} tagNameVariable 组件标签为外部动态传入时的标签变量名\n//      */\n//     tagStart: function (sourceBuffer, aNode, tagNameVariable) {\n//         var props = aNode.props;\n//         var bindDirective = aNode.directives.bind;\n//         var tagName = aNode.tagName;\n// \n//         if (tagName) {\n//             sourceBuffer.joinString('<' + tagName);\n//         }\n//         else if (tagNameVariable) {\n//             sourceBuffer.joinString('<');\n//             sourceBuffer.joinRaw(tagNameVariable + ' || \"div\"');\n//         }\n//         else {\n//             sourceBuffer.joinString('<div');\n//         }\n// \n//         // index list\n//         var propsIndex = {};\n//         each(props, function (prop) {\n//             propsIndex[prop.name] = prop;\n// \n//             if (prop.name !== 'slot' && prop.expr.value != null) {\n//                 sourceBuffer.joinString(' ' + prop.name + '=\"' + prop.expr.segs[0].literal + '\"');\n//             }\n//         });\n// \n//         each(props, function (prop) {\n//             if (prop.name === 'slot' || prop.expr.value != null) {\n//                 return;\n//             }\n// \n//             if (prop.name === 'value') {\n//                 switch (tagName) {\n//                     case 'textarea':\n//                         return;\n// \n//                     case 'select':\n//                         sourceBuffer.addRaw('$selectValue = '\n//                             + compileExprSource.expr(prop.expr)\n//                             + ' || \"\";'\n//                         );\n//                         return;\n// \n//                     case 'option':\n//                         sourceBuffer.addRaw('$optionValue = '\n//                             + compileExprSource.expr(prop.expr)\n//                             + ';'\n//                         );\n//                         // value\n//                         sourceBuffer.addRaw('if ($optionValue != null) {');\n//                         sourceBuffer.joinRaw('\" value=\\\\\"\" + $optionValue + \"\\\\\"\"');\n//                         sourceBuffer.addRaw('}');\n// \n//                         // selected\n//                         sourceBuffer.addRaw('if ($optionValue === $selectValue) {');\n//                         sourceBuffer.joinString(' selected');\n//                         sourceBuffer.addRaw('}');\n//                         return;\n//                 }\n//             }\n// \n//             switch (prop.name) {\n//                 case 'readonly':\n//                 case 'disabled':\n//                 case 'multiple':\n//                     if (prop.raw == null) {\n//                         sourceBuffer.joinString(' ' + prop.name);\n//                     }\n//                     else {\n//                         sourceBuffer.joinRaw('boolAttrFilter(\"' + prop.name + '\", '\n//                             + compileExprSource.expr(prop.expr)\n//                             + ')'\n//                         );\n//                     }\n//                     break;\n// \n//                 case 'checked':\n//                     if (tagName === 'input') {\n//                         var valueProp = propsIndex.value;\n//                         var valueCode = compileExprSource.expr(valueProp.expr);\n// \n//                         if (valueProp) {\n//                             switch (propsIndex.type.raw) {\n//                                 case 'checkbox':\n//                                     sourceBuffer.addRaw('if (contains('\n//                                         + compileExprSource.expr(prop.expr)\n//                                         + ', '\n//                                         + valueCode\n//                                         + ')) {'\n//                                     );\n//                                     sourceBuffer.joinString(' checked');\n//                                     sourceBuffer.addRaw('}');\n//                                     break;\n// \n//                                 case 'radio':\n//                                     sourceBuffer.addRaw('if ('\n//                                         + compileExprSource.expr(prop.expr)\n//                                         + ' === '\n//                                         + valueCode\n//                                         + ') {'\n//                                     );\n//                                     sourceBuffer.joinString(' checked');\n//                                     sourceBuffer.addRaw('}');\n//                                     break;\n//                             }\n//                         }\n//                     }\n//                     break;\n// \n//                 default:\n//                     var onlyOneAccessor = false;\n//                     var preCondExpr;\n// \n//                     if (prop.expr.type === 4) {\n//                         onlyOneAccessor = true;\n//                         preCondExpr = prop.expr;\n//                     }\n//                     else if (prop.expr.type === 7 && prop.expr.segs.length === 1) {\n//                         var interpExpr = prop.expr.segs[0];\n//                         var interpFilters = interpExpr.filters;\n// \n//                         if (!interpFilters.length\n//                             || interpFilters.length === 1 && interpFilters[0].args.length === 0\n//                         ) {\n//                             onlyOneAccessor = true;\n//                             preCondExpr = prop.expr.segs[0].expr;\n//                         }\n//                     }\n// \n//                     if (onlyOneAccessor) {\n//                         sourceBuffer.addRaw('if (' + compileExprSource.expr(preCondExpr) + ') {');\n//                     }\n// \n//                     sourceBuffer.joinRaw('attrFilter(\"' + prop.name + '\", '\n//                         + (prop.x ? 'escapeHTML(' : '')\n//                         + compileExprSource.expr(prop.expr)\n//                         + (prop.x ? ')' : '')\n//                         + ')'\n//                     );\n// \n//                     if (onlyOneAccessor) {\n//                         sourceBuffer.addRaw('}');\n//                     }\n// \n//                     break;\n//             }\n//         });\n// \n//         if (bindDirective) {\n//             sourceBuffer.addRaw(\n//                 '(function ($bindObj) {for (var $key in $bindObj) {'\n//                 + 'var $value = $bindObj[$key];'\n//             );\n// \n//             if (tagName === 'textarea') {\n//                 sourceBuffer.addRaw(\n//                     'if ($key === \"value\") {'\n//                     + 'continue;'\n//                     + '}'\n//                 );\n//             }\n// \n//             sourceBuffer.addRaw('switch ($key) {\\n'\n//                 + 'case \"readonly\":\\n'\n//                 + 'case \"disabled\":\\n'\n//                 + 'case \"multiple\":\\n'\n//                 + 'case \"multiple\":\\n'\n//                 + 'html += boolAttrFilter($key, escapeHTML($value));\\n'\n//                 + 'break;\\n'\n//                 + 'default:\\n'\n//                 + 'html += attrFilter($key, escapeHTML($value));'\n//                 + '}'\n//             );\n// \n//             sourceBuffer.addRaw(\n//                 '}})('\n//                 + compileExprSource.expr(bindDirective.value)\n//                 + ');'\n//             );\n//         }\n// \n//         sourceBuffer.joinString('>');\n//     },\n//     /* eslint-enable max-params */\n// \n//     /**\n//      * 编译元素闭合\n//      *\n//      * @param {CompileSourceBuffer} sourceBuffer 编译源码的中间buffer\n//      * @param {ANode} aNode 抽象节点\n//      * @param {string=} tagNameVariable 组件标签为外部动态传入时的标签变量名\n//      */\n//     tagEnd: function (sourceBuffer, aNode, tagNameVariable) {\n//         var tagName = aNode.tagName;\n// \n//         if (tagName) {\n//             if (!autoCloseTags[tagName]) {\n//                 sourceBuffer.joinString('</' + tagName + '>');\n//             }\n// \n//             if (tagName === 'select') {\n//                 sourceBuffer.addRaw('$selectValue = null;');\n//             }\n// \n//             if (tagName === 'option') {\n//                 sourceBuffer.addRaw('$optionValue = null;');\n//             }\n//         }\n//         else {\n//             sourceBuffer.joinString('</');\n//             sourceBuffer.joinRaw(tagNameVariable + ' || \"div\"');\n//             sourceBuffer.joinString('>');\n//         }\n//     },\n// \n//     /**\n//      * 编译元素内容\n//      *\n//      * @param {CompileSourceBuffer} sourceBuffer 编译源码的中间buffer\n//      * @param {ANode} aNode 元素的抽象节点信息\n//      * @param {Component} owner 所属组件实例环境\n//      */\n//     inner: function (sourceBuffer, aNode, owner) {\n//         // inner content\n//         if (aNode.tagName === 'textarea') {\n//             var valueProp = getANodeProp(aNode, 'value');\n//             if (valueProp) {\n//                 sourceBuffer.joinRaw('escapeHTML('\n//                     + compileExprSource.expr(valueProp.expr)\n//                     + ')'\n//                 );\n//             }\n// \n//             return;\n//         }\n// \n//         var htmlDirective = aNode.directives.html;\n//         if (htmlDirective) {\n//             sourceBuffer.joinExpr(htmlDirective.value);\n//         }\n//         else {\n//             /* eslint-disable no-use-before-define */\n//             each(aNode.children, function (aNodeChild) {\n//                 aNodeCompiler.compile(aNodeChild, sourceBuffer, owner);\n//             });\n//             /* eslint-enable no-use-before-define */\n//         }\n//     }\n// };\n// \n// /**\n//  * ANode 的编译方法集合对象\n//  *\n//  * @inner\n//  */\n// var aNodeCompiler = {\n// \n//     /**\n//      * 编译节点\n//      *\n//      * @param {ANode} aNode 抽象节点\n//      * @param {CompileSourceBuffer} sourceBuffer 编译源码的中间buffer\n//      * @param {Component} owner 所属组件实例环境\n//      * @param {Object} extra 编译所需的一些额外信息\n//      */\n//     compile: function (aNode, sourceBuffer, owner, extra) {\n//         extra = extra || {};\n//         var compileMethod = 'compileElement';\n// \n//         if (aNode.textExpr) {\n//             compileMethod = 'compileText';\n//         }\n//         else if (aNode.directives['if']) { // eslint-disable-line dot-notation\n//             compileMethod = 'compileIf';\n//         }\n//         else if (aNode.directives['for']) { // eslint-disable-line dot-notation\n//             compileMethod = 'compileFor';\n//         }\n//         else if (aNode.tagName === 'slot') {\n//             compileMethod = 'compileSlot';\n//         }\n//         else if (aNode.tagName === 'template') {\n//             compileMethod = 'compileTemplate';\n//         }\n//         else {\n//             var ComponentType = owner.getComponentType\n//                 ? owner.getComponentType(aNode)\n//                 : owner.components[aNode.tagName];\n// \n//             if (ComponentType) {\n//                 compileMethod = 'compileComponent';\n//                 extra.ComponentClass = ComponentType;\n// \n//                 if (ComponentType instanceof ComponentLoader) {\n//                     compileMethod = 'compileComponentLoader';\n//                 }\n//             }\n//         }\n// \n//         aNodeCompiler[compileMethod](aNode, sourceBuffer, owner, extra);\n//     },\n// \n//     /**\n//      * 编译文本节点\n//      *\n//      * @param {ANode} aNode 节点对象\n//      * @param {CompileSourceBuffer} sourceBuffer 编译源码的中间buffer\n//      */\n//     compileText: function (aNode, sourceBuffer) {\n//         if (aNode.textExpr.original) {\n//             sourceBuffer.joinString(serializeStump('text'));\n//         }\n// \n//         if (aNode.textExpr.value != null) {\n//             sourceBuffer.joinString(aNode.textExpr.segs[0].literal);\n//         }\n//         else {\n//             sourceBuffer.joinExpr(aNode.textExpr);\n//         }\n// \n//         if (aNode.textExpr.original) {\n//             sourceBuffer.joinString(serializeStumpEnd('text'));\n//         }\n//     },\n// \n//     /**\n//      * 编译template节点\n//      *\n//      * @param {ANode} aNode 节点对象\n//      * @param {CompileSourceBuffer} sourceBuffer 编译源码的中间buffer\n//      * @param {Component} owner 所属组件实例环境\n//      */\n//     compileTemplate: function (aNode, sourceBuffer, owner) {\n//         elementSourceCompiler.inner(sourceBuffer, aNode, owner);\n//     },\n// \n//     /**\n//      * 编译 if 节点\n//      *\n//      * @param {ANode} aNode 节点对象\n//      * @param {CompileSourceBuffer} sourceBuffer 编译源码的中间buffer\n//      * @param {Component} owner 所属组件实例环境\n//      */\n//     compileIf: function (aNode, sourceBuffer, owner) {\n// \n//         // output main if\n//         var ifDirective = aNode.directives['if']; // eslint-disable-line dot-notation\n//         sourceBuffer.addRaw('if (' + compileExprSource.expr(ifDirective.value) + ') {');\n//         sourceBuffer.addRaw(\n//             aNodeCompiler.compile(\n//                 aNode.ifRinsed,\n//                 sourceBuffer,\n//                 owner\n//             )\n//         );\n//         sourceBuffer.addRaw('}');\n// \n//         // output elif and else\n//         each(aNode.elses, function (elseANode) {\n//             var elifDirective = elseANode.directives.elif;\n//             if (elifDirective) {\n//                 sourceBuffer.addRaw('else if (' + compileExprSource.expr(elifDirective.value) + ') {');\n//             }\n//             else {\n//                 sourceBuffer.addRaw('else {');\n//             }\n// \n//             sourceBuffer.addRaw(\n//                 aNodeCompiler.compile(\n//                     elseANode,\n//                     sourceBuffer,\n//                     owner\n//                 )\n//             );\n//             sourceBuffer.addRaw('}');\n//         });\n//     },\n// \n//     /**\n//      * 编译 for 节点\n//      *\n//      * @param {ANode} aNode 节点对象\n//      * @param {CompileSourceBuffer} sourceBuffer 编译源码的中间buffer\n//      * @param {Component} owner 所属组件实例环境\n//      */\n//     compileFor: function (aNode, sourceBuffer, owner) {\n//         var forElementANode = {\n//             children: aNode.children,\n//             props: aNode.props,\n//             events: aNode.events,\n//             tagName: aNode.tagName,\n//             directives: extend({}, aNode.directives),\n//             hotspot: aNode.hotspot\n//         };\n//         forElementANode.directives['for'] = null;\n// \n//         var forDirective = aNode.directives['for']; // eslint-disable-line dot-notation\n//         var itemName = forDirective.item;\n//         var indexName = forDirective.index || genSSRId();\n//         var listName = genSSRId();\n// \n// \n//         sourceBuffer.addRaw('var ' + listName + ' = ' + compileExprSource.expr(forDirective.value) + ';');\n//         sourceBuffer.addRaw('if (' + listName + ' instanceof Array) {');\n// \n//         // for array\n//         sourceBuffer.addRaw('for ('\n//             + 'var ' + indexName + ' = 0; '\n//             + indexName + ' < ' + listName + '.length; '\n//             + indexName + '++) {'\n//         );\n//         sourceBuffer.addRaw('componentCtx.data.' + indexName + '=' + indexName + ';');\n//         sourceBuffer.addRaw('componentCtx.data.' + itemName + '= ' + listName + '[' + indexName + '];');\n//         sourceBuffer.addRaw(\n//             aNodeCompiler.compile(\n//                 forElementANode,\n//                 sourceBuffer,\n//                 owner\n//             )\n//         );\n//         sourceBuffer.addRaw('}');\n// \n//         sourceBuffer.addRaw('} else if (typeof ' + listName + ' === \"object\") {');\n// \n//         // for object\n//         sourceBuffer.addRaw('for (var ' + indexName + ' in ' + listName + ') {');\n//         sourceBuffer.addRaw('if (' + listName + '[' + indexName + '] != null) {');\n//         sourceBuffer.addRaw('componentCtx.data.' + indexName + '=' + indexName + ';');\n//         sourceBuffer.addRaw('componentCtx.data.' + itemName + '= ' + listName + '[' + indexName + '];');\n//         sourceBuffer.addRaw(\n//             aNodeCompiler.compile(\n//                 forElementANode,\n//                 sourceBuffer,\n//                 owner\n//             )\n//         );\n//         sourceBuffer.addRaw('}');\n//         sourceBuffer.addRaw('}');\n// \n//         sourceBuffer.addRaw('}');\n//     },\n// \n//     /**\n//      * 编译 slot 节点\n//      *\n//      * @param {ANode} aNode 节点对象\n//      * @param {CompileSourceBuffer} sourceBuffer 编译源码的中间buffer\n//      * @param {Component} owner 所属组件实例环境\n//      */\n//     compileSlot: function (aNode, sourceBuffer, owner) {\n//         var rendererId = genSSRId();\n// \n//         sourceBuffer.addRaw('componentCtx.slotRenderers.' + rendererId\n//             + ' = componentCtx.slotRenderers.' + rendererId + ' || function () {');\n// \n//         sourceBuffer.addRaw('function $defaultSlotRender(componentCtx) {');\n//         sourceBuffer.addRaw('  var html = \"\";');\n//         each(aNode.children, function (aNodeChild) {\n//             sourceBuffer.addRaw(aNodeCompiler.compile(aNodeChild, sourceBuffer, owner));\n//         });\n//         sourceBuffer.addRaw('  return html;');\n//         sourceBuffer.addRaw('}');\n// \n//         sourceBuffer.addRaw('var $isInserted = false;');\n//         sourceBuffer.addRaw('var $ctxSourceSlots = componentCtx.sourceSlots;');\n//         sourceBuffer.addRaw('var $mySourceSlots = [];');\n// \n//         var nameProp = getANodeProp(aNode, 'name');\n//         if (nameProp) {\n//             sourceBuffer.addRaw('var $slotName = ' + compileExprSource.expr(nameProp.expr) + ';');\n// \n//             sourceBuffer.addRaw('for (var $i = 0; $i < $ctxSourceSlots.length; $i++) {');\n//             sourceBuffer.addRaw('  if ($ctxSourceSlots[$i][1] == $slotName) {');\n//             sourceBuffer.addRaw('    $mySourceSlots.push($ctxSourceSlots[$i][0]);');\n//             sourceBuffer.addRaw('    $isInserted = true;');\n//             sourceBuffer.addRaw('  }');\n//             sourceBuffer.addRaw('}');\n//         }\n//         else {\n//             sourceBuffer.addRaw('if ($ctxSourceSlots[0] && $ctxSourceSlots[0][1] == null) {');\n//             sourceBuffer.addRaw('  $mySourceSlots.push($ctxSourceSlots[0][0]);');\n//             sourceBuffer.addRaw('  $isInserted = true;');\n//             sourceBuffer.addRaw('}');\n//         }\n// \n//         sourceBuffer.addRaw('if (!$isInserted) { $mySourceSlots.push($defaultSlotRender); }');\n//         sourceBuffer.addRaw('var $slotCtx = $isInserted ? componentCtx.owner : componentCtx;');\n// \n//         if (aNode.vars || aNode.directives.bind) {\n//             sourceBuffer.addRaw('$slotCtx = {data: extend({}, $slotCtx.data), proto: $slotCtx.proto, owner: $slotCtx.owner};'); // eslint-disable-line\n// \n//             if (aNode.directives.bind) {\n//                 sourceBuffer.addRaw('extend($slotCtx.data, ' + compileExprSource.expr(aNode.directives.bind.value) + ');'); // eslint-disable-line\n//             }\n// \n//             each(aNode.vars, function (varItem) {\n//                 sourceBuffer.addRaw(\n//                     '$slotCtx.data[\"' + varItem.name + '\"] = '\n//                     + compileExprSource.expr(varItem.expr)\n//                     + ';'\n//                 );\n//             });\n//         }\n// \n//         sourceBuffer.addRaw('for (var $renderIndex = 0; $renderIndex < $mySourceSlots.length; $renderIndex++) {');\n//         sourceBuffer.addRaw('  html += $mySourceSlots[$renderIndex]($slotCtx);');\n//         sourceBuffer.addRaw('}');\n// \n//         sourceBuffer.addRaw('};');\n//         sourceBuffer.addRaw('componentCtx.slotRenderers.' + rendererId + '();');\n//     },\n// \n//     /**\n//      * 编译普通节点\n//      *\n//      * @param {ANode} aNode 节点对象\n//      * @param {CompileSourceBuffer} sourceBuffer 编译源码的中间buffer\n//      * @param {Component} owner 所属组件实例环境\n//      * @param {Object} extra 编译所需的一些额外信息\n//      */\n//     compileElement: function (aNode, sourceBuffer, owner) {\n//         elementSourceCompiler.tagStart(sourceBuffer, aNode);\n//         elementSourceCompiler.inner(sourceBuffer, aNode, owner);\n//         elementSourceCompiler.tagEnd(sourceBuffer, aNode);\n//     },\n// \n//     /**\n//      * 编译组件节点\n//      *\n//      * @param {ANode} aNode 节点对象\n//      * @param {CompileSourceBuffer} sourceBuffer 编译源码的中间buffer\n//      * @param {Component} owner 所属组件实例环境\n//      * @param {Object} extra 编译所需的一些额外信息\n//      * @param {Function} extra.ComponentClass 对应组件类\n//      */\n//     compileComponent: function (aNode, sourceBuffer, owner, extra) {\n//         var dataLiteral = '{}';\n// \n//         sourceBuffer.addRaw('var $sourceSlots = [];');\n//         if (aNode.children) {\n//             var defaultSourceSlots = [];\n//             var sourceSlotCodes = {};\n// \n//             each(aNode.children, function (child) {\n//                 var slotBind = !child.textExpr && getANodeProp(child, 'slot');\n//                 if (slotBind) {\n//                     if (!sourceSlotCodes[slotBind.raw]) {\n//                         sourceSlotCodes[slotBind.raw] = {\n//                             children: [],\n//                             prop: slotBind\n//                         };\n//                     }\n// \n//                     sourceSlotCodes[slotBind.raw].children.push(child);\n//                 }\n//                 else {\n//                     defaultSourceSlots.push(child);\n//                 }\n//             });\n// \n//             if (defaultSourceSlots.length) {\n//                 sourceBuffer.addRaw('$sourceSlots.push([function (componentCtx) {');\n//                 sourceBuffer.addRaw('  var html = \"\";');\n//                 defaultSourceSlots.forEach(function (child) {\n//                     aNodeCompiler.compile(child, sourceBuffer, owner);\n//                 });\n//                 sourceBuffer.addRaw('  return html;');\n//                 sourceBuffer.addRaw('}]);');\n//             }\n// \n//             for (var key in sourceSlotCodes) {\n//                 var sourceSlotCode = sourceSlotCodes[key];\n//                 sourceBuffer.addRaw('$sourceSlots.push([function (componentCtx) {');\n//                 sourceBuffer.addRaw('  var html = \"\";');\n//                 sourceBuffer.addRaw(sourceSlotCode.children.forEach(function (child) {\n//                     aNodeCompiler.compile(child, sourceBuffer, owner);\n//                 }));\n//                 sourceBuffer.addRaw('  return html;');\n//                 sourceBuffer.addRaw('}, ' + compileExprSource.expr(sourceSlotCode.prop.expr) + ']);');\n//             }\n//         }\n// \n// \n//         var givenData = [];\n//         each(camelComponentBinds(aNode.props), function (prop) {\n//             postProp(prop);\n//             givenData.push(\n//                 compileExprSource.stringLiteralize(prop.name)\n//                 + ':'\n//                 + compileExprSource.expr(prop.expr)\n//             );\n//         });\n// \n//         dataLiteral = '{' + givenData.join(',\\n') + '}';\n//         if (aNode.directives.bind) {\n//             dataLiteral = 'extend('\n//                 + compileExprSource.expr(aNode.directives.bind.value)\n//                 + ', '\n//                 + dataLiteral\n//                 + ')';\n//         }\n// \n//         var renderId = compileComponentSource(sourceBuffer, extra.ComponentClass, owner.ssrContextId);\n//         sourceBuffer.addRaw('html += componentRenderers.' + renderId + '(');\n//         sourceBuffer.addRaw(dataLiteral + ', true, componentCtx, '\n//             + stringifier.str(aNode.tagName) + ', $sourceSlots);');\n//         sourceBuffer.addRaw('$sourceSlots = null;');\n//     },\n// \n//     /**\n//      * 编译组件加载器节点\n//      *\n//      * @param {ANode} aNode 节点对象\n//      * @param {CompileSourceBuffer} sourceBuffer 编译源码的中间buffer\n//      * @param {Component} owner 所属组件实例环境\n//      * @param {Object} extra 编译所需的一些额外信息\n//      * @param {Function} extra.ComponentClass 对应类\n//      */\n//     compileComponentLoader: function (aNode, sourceBuffer, owner, extra) {\n//         var LoadingComponent = extra.ComponentClass.placeholder;\n//         if (typeof LoadingComponent === 'function') {\n//             aNodeCompiler.compileComponent(aNode, sourceBuffer, owner, {\n//                 ComponentClass: LoadingComponent\n//             });\n//         }\n//     }\n// };\n// \n// /**\n//  * 生成组件构建的代码\n//  *\n//  * @inner\n//  * @param {CompileSourceBuffer} sourceBuffer 编译源码的中间buffer\n//  * @param {Function} ComponentClass 组件类\n//  * @param {string} contextId 构建render环境的id\n//  * @return {string} 组件在当前环境下的方法标识\n//  */\n// function compileComponentSource(sourceBuffer, ComponentClass, contextId) {\n//     ComponentClass.ssrContext = ComponentClass.ssrContext || {};\n//     var componentIdInContext = ComponentClass.ssrContext[contextId];\n// \n//     if (!componentIdInContext) {\n//         componentIdInContext = genSSRId();\n//         ComponentClass.ssrContext[contextId] = componentIdInContext;\n// \n//         // 先初始化个实例，让模板编译成 ANode，并且能获得初始化数据\n//         var component = new ComponentClass();\n//         component.ssrContextId = contextId;\n// \n//         if (component.components) {\n//             Object.keys(component.components).forEach(\n//                 function (key) {\n//                     var CmptClass = component.components[key];\n//                     if (CmptClass instanceof ComponentLoader) {\n//                         CmptClass = CmptClass.placeholder;\n//                     }\n// \n//                     if (CmptClass) {\n//                         compileComponentSource(sourceBuffer, CmptClass, contextId);\n//                     }\n//                 }\n//             );\n//         }\n// \n//         sourceBuffer.addRaw('componentRenderers.' + componentIdInContext + ' = componentRenderers.'\n//             + componentIdInContext + '|| ' + componentIdInContext + ';');\n// \n//         sourceBuffer.addRaw('var ' + componentIdInContext + 'Proto = ' + genComponentProtoCode(component));\n//         sourceBuffer.addRaw('function ' + componentIdInContext\n//             + '(data, noDataOutput, parentCtx, tagName, sourceSlots) {');\n//         sourceBuffer.addRaw('var html = \"\";');\n// \n//         sourceBuffer.addRaw(genComponentContextCode(component, componentIdInContext));\n// \n// \n//         // init data\n//         var defaultData = component.data.get();\n//         sourceBuffer.addRaw('if (data) {');\n//         Object.keys(defaultData).forEach(function (key) {\n//             sourceBuffer.addRaw('componentCtx.data[\"' + key + '\"] = componentCtx.data[\"' + key + '\"] || '\n//                 + stringifier.any(defaultData[key]) + ';');\n//         });\n//         sourceBuffer.addRaw('}');\n// \n//         // calc computed\n//         sourceBuffer.addRaw('var computedNames = componentCtx.proto.computedNames;');\n//         sourceBuffer.addRaw('for (var $i = 0; $i < computedNames.length; $i++) {');\n//         sourceBuffer.addRaw('  var $computedName = computedNames[$i];');\n//         sourceBuffer.addRaw('  data[$computedName] = componentCtx.proto.computed[$computedName](componentCtx);');\n//         sourceBuffer.addRaw('}');\n// \n// \n//         var ifDirective = component.aNode.directives['if']; // eslint-disable-line dot-notation\n//         if (ifDirective) {\n//             sourceBuffer.addRaw('if (' + compileExprSource.expr(ifDirective.value) + ') {');\n//         }\n// \n//         elementSourceCompiler.tagStart(sourceBuffer, component.aNode, 'tagName');\n// \n// \n//         sourceBuffer.addRaw('if (!noDataOutput) {');\n//         sourceBuffer.joinDataStringify();\n//         sourceBuffer.addRaw('}');\n// \n// \n//         elementSourceCompiler.inner(sourceBuffer, component.aNode, component);\n//         elementSourceCompiler.tagEnd(sourceBuffer, component.aNode, 'tagName');\n// \n//         if (ifDirective) {\n//             sourceBuffer.addRaw('}');\n//         }\n// \n//         sourceBuffer.addRaw('return html;');\n//         sourceBuffer.addRaw('};');\n//     }\n// \n//     return componentIdInContext;\n// }\n// \n// /**\n//  * 生成组件 renderer 时 ctx 对象构建的代码\n//  *\n//  * @inner\n//  * @param {Object} component 组件实例\n//  * @return {string}\n//  */\n// function genComponentContextCode(component, componentIdInContext) {\n//     var code = ['var componentCtx = {'];\n// \n//     // proto\n//     code.push('proto: ' + componentIdInContext + 'Proto,');\n// \n//     // sourceSlots\n//     code.push('sourceSlots: sourceSlots,');\n// \n//     // data\n//     var defaultData = component.data.get();\n//     code.push('data: data || ' + stringifier.any(defaultData) + ',');\n// \n//     // parentCtx\n//     code.push('owner: parentCtx,');\n// \n//     // slotRenderers\n//     code.push('slotRenderers: {}');\n// \n//     code.push('};');\n// \n//     return code.join('\\n');\n// }\n// \n// /**\n//  * 生成组件 proto 对象构建的代码\n//  *\n//  * @inner\n//  * @param {Object} component 组件实例\n//  * @return {string}\n//  */\n// function genComponentProtoCode(component) {\n//     var code = ['{'];\n// \n//     // members for call expr\n//     var ComponentProto = component.constructor.prototype;\n//     Object.keys(ComponentProto).forEach(function (protoMemberKey) {\n//         var protoMember = ComponentProto[protoMemberKey];\n//         if (COMPONENT_RESERVED_MEMBERS[protoMemberKey] || !protoMember) {\n//             return;\n//         }\n// \n//         switch (typeof protoMember) {\n//             case 'function':\n//                 code.push(protoMemberKey + ': ' + protoMember.toString() + ',');\n//                 break;\n// \n//             case 'object':\n//                 code.push(protoMemberKey + ':');\n// \n//                 if (protoMember instanceof Array) {\n//                     code.push('[');\n//                     protoMember.forEach(function (item) {\n//                         code.push(typeof item === 'function' ? item.toString() : '' + ',');\n//                     });\n//                     code.push(']');\n//                 }\n//                 else {\n//                     code.push('{');\n//                     Object.keys(protoMember).forEach(function (itemKey) {\n//                         var item = protoMember[itemKey];\n//                         if (typeof item === 'function') {\n//                             code.push(itemKey + ':' + item.toString() + ',');\n//                         }\n//                     });\n//                     code.push('}');\n//                 }\n// \n//                 code.push(',');\n//         }\n//     });\n// \n//     // filters\n//     code.push('filters: {');\n//     var filterCode = [];\n//     for (var key in component.filters) {\n//         if (component.filters.hasOwnProperty(key)) {\n//             var filter = component.filters[key];\n// \n//             if (typeof filter === 'function') {\n//                 filterCode.push(key + ': ' + filter.toString());\n//             }\n//         }\n//     }\n//     code.push(filterCode.join(','));\n//     code.push('},');\n// \n//     /* eslint-disable no-redeclare */\n//     // computed obj\n//     code.push('computed: {');\n//     var computedCode = [];\n//     var computedNamesCode = [];\n//     var computedNamesIndex = {};\n//     for (var key in component.computed) {\n//         if (component.computed.hasOwnProperty(key)) {\n//             var computed = component.computed[key];\n// \n//             if (typeof computed === 'function') {\n//                 if (!computedNamesIndex[key]) {\n//                     computedNamesIndex[key] = 1;\n//                     computedNamesCode.push('\"' + key + '\"');\n//                 }\n// \n//                 computedCode.push(key + ': '\n//                     + computed.toString()\n//                         .replace(/^\\s*function\\s*\\(/, 'function (componentCtx')\n//                         .replace(\n//                             /this.data.get\\(([^\\)]+)\\)/g,\n//                             function (match, exprLiteral) {\n//                                 var exprStr = (new Function('return ' + exprLiteral))();\n//                                 var expr = parseExpr(exprStr);\n// \n//                                 var ident = expr.paths[0].value;\n//                                 if (component.computed.hasOwnProperty(ident)\n//                                     && !computedNamesIndex[ident]\n//                                 ) {\n//                                     computedNamesIndex[ident] = 1;\n//                                     computedNamesCode.unshift('\"' + ident + '\"');\n//                                 }\n// \n//                                 return compileExprSource.expr(expr);\n//                             }\n//                         )\n//                 );\n//             }\n//         }\n//     }\n//     code.push(computedCode.join(','));\n//     code.push('},');\n// \n//     // computed names\n//     code.push('computedNames: [');\n//     code.push(computedNamesCode.join(','));\n//     code.push('],');\n//     /* eslint-enable no-redeclare */\n// \n//     // tagName\n//     code.push('tagName: \"' + component.tagName + '\"');\n//     code.push('};');\n// \n//     return code.join('\\n');\n// }\n// \n// /* eslint-enable guard-for-in */\n// \n// /**\n//  * 将组件编译成 render 方法的 js 源码\n//  *\n//  * @param {Function} ComponentClass 组件类\n//  * @return {string}\n//  */\n// function compileJSSource(ComponentClass) {\n//     var sourceBuffer = new CompileSourceBuffer();\n//     var contextId = genSSRId();\n// \n//     sourceBuffer.addRendererStart();\n//     var renderId = compileComponentSource(sourceBuffer, ComponentClass, contextId);\n//     sourceBuffer.addRaw('return componentRenderers.' + renderId + '(data, noDataOutput)');\n//     sourceBuffer.addRendererEnd();\n// \n//     return sourceBuffer.toCode();\n// }\n// #[end]\n\n// exports = module.exports = compileJSSource;\n\n    /* eslint-disable no-unused-vars */\n//     var nextTick = require('./util/next-tick');\n//     var inherits = require('./util/inherits');\n//     var parseTemplate = require('./parser/parse-template');\n//     var parseExpr = require('./parser/parse-expr');\n//     var ExprType = require('./parser/expr-type');\n//     var LifeCycle = require('./view/life-cycle');\n//     var NodeType = require('./view/node-type');\n//     var Component = require('./view/component');\n//     var compileComponent = require('./view/compile-component');\n//     var defineComponent = require('./view/define-component');\n//     var createComponentLoader = require('./view/create-component-loader');\n//     var emitDevtool = require('./util/emit-devtool');\n//     var compileJSSource = require('./view/compile-js-source');\n//     var Data = require('./runtime/data');\n//     var evalExpr = require('./runtime/eval-expr');\n//     var DataTypes = require('./util/data-types');\n\n\n    var san = {\n        /**\n         * san版本号\n         *\n         * @type {string}\n         */\n        version: '3.7.9',\n\n        // #[begin] devtool\n        /**\n         * 是否开启调试。开启调试时 devtool 会工作\n         *\n         * @type {boolean}\n         */\n        debug: true,\n        // #[end]\n\n        // #[begin] ssr\n//         /**\n//          * 将组件类编译成 renderer 方法\n//          *\n//          * @param {Function} ComponentClass 组件类\n//          * @return {function(Object):string}\n//          */\n//         compileToRenderer: function (ComponentClass) {\n//             var renderer = ComponentClass.__ssrRenderer;\n// \n//             if (!renderer) {\n//                 var code = compileJSSource(ComponentClass);\n//                 renderer = (new Function('return ' + code))();\n//                 ComponentClass.__ssrRenderer = renderer;\n//             }\n// \n//             return renderer;\n//         },\n// \n//         /**\n//          * 将组件类编译成 renderer 方法的源文件\n//          *\n//          * @param {Function} ComponentClass 组件类\n//          * @return {string}\n//          */\n//         compileToSource: compileJSSource,\n        // #[end]\n\n        /**\n         * 组件基类\n         *\n         * @type {Function}\n         */\n        Component: Component,\n\n        /**\n         * 创建组件类\n         *\n         * @param {Object} proto 组件类的方法表\n         * @return {Function}\n         */\n        defineComponent: defineComponent,\n\n        /**\n         * 创建组件Loader\n         *\n         * @param {Object|Function} options 创建组件Loader的参数。为Object时参考下方描述，为Function时代表load方法。\n         * @param {Function} options.load load方法\n         * @param {Function=} options.placeholder loading过程中渲染的占位组件\n         * @param {Function=} options.fallback load失败时渲染的组件\n         * @return {ComponentLoader}\n         */\n        createComponentLoader: createComponentLoader,\n\n        /**\n         * 编译组件类。预解析template和components\n         *\n         * @param {Function} ComponentClass 组件类\n         */\n        compileComponent: compileComponent,\n\n        /**\n         * 解析 template\n         *\n         * @inner\n         * @param {string} source template 源码\n         * @return {ANode}\n         */\n        parseTemplate: parseTemplate,\n\n        /**\n         * 解析表达式\n         *\n         * @param {string} source 源码\n         * @return {Object}\n         */\n        parseExpr: parseExpr,\n\n        /**\n         * 表达式类型枚举\n         *\n         * @const\n         * @type {Object}\n         */\n        ExprType: ExprType,\n\n        /**\n         * 生命周期\n         */\n        LifeCycle: LifeCycle,\n\n        /**\n         * 节点类型\n         *\n         * @const\n         * @type {Object}\n         */\n        NodeType: NodeType,\n\n        /**\n         * 在下一个更新周期运行函数\n         *\n         * @param {Function} fn 要运行的函数\n         */\n        nextTick: nextTick,\n\n        /**\n         * 数据类\n         *\n         * @class\n         * @param {Object?} data 初始数据\n         * @param {Data?} parent 父级数据对象\n         */\n        Data: Data,\n\n        /**\n         * 计算表达式的值\n         *\n         * @param {Object} expr 表达式对象\n         * @param {Data} data 数据对象\n         * @param {Component=} owner 组件对象，用于表达式中filter的执行\n         * @return {*}\n         */\n        evalExpr: evalExpr,\n\n        /**\n         * 构建类之间的继承关系\n         *\n         * @param {Function} subClass 子类函数\n         * @param {Function} superClass 父类函数\n         */\n        inherits: inherits,\n\n        /**\n         * DataTypes\n         *\n         * @type {Object}\n         */\n        DataTypes: DataTypes\n    };\n\n    // export\n    if (true) {\n        // For CommonJS\n        exports = module.exports = san;\n    }\n    else {}\n\n    // #[begin] devtool\n    emitDevtool.start(san);\n    // #[end]\n})(this);\n//@ sourceMappingURL=san.dev.js.map\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5).setImmediate))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return "@media ".concat(item[2], "{").concat(content, "}");\n      }\n\n      return content;\n    }).join(\'\');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery) {\n    if (typeof modules === \'string\') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \'\']];\n    }\n\n    var alreadyImportedModules = {};\n\n    for (var i = 0; i < this.length; i++) {\n      // eslint-disable-next-line prefer-destructuring\n      var id = this[i][0];\n\n      if (id != null) {\n        alreadyImportedModules[id] = true;\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = modules[_i]; // skip already imported module\n      // this implementation is not 100% perfect for weird media query combinations\n      // when a module is imported multiple times with different media queries.\n      // I hope this will never occur (Hey this way we have smaller bundles)\n\n      if (item[0] == null || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery && !item[2]) {\n          item[2] = mediaQuery;\n        } else if (mediaQuery) {\n          item[2] = "(".concat(item[2], ") and (").concat(mediaQuery, ")");\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || \'\'; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === \'function\') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return "/*# sourceURL=".concat(cssMapping.sourceRoot).concat(source, " */");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\'\\n\');\n  }\n\n  return [content].join(\'\\n\');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n  return "/*# ".concat(data, " */");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7O0FBRWhCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJDQUEyQyxxQkFBcUI7QUFDaEU7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLG1CQUFtQixpQkFBaUI7QUFDcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IscUJBQXFCO0FBQ3pDLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDhCQUE4Qjs7QUFFOUI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsY0FBYztBQUNuRTtBQUNBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIntcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gbW9kdWxlc1tfaV07IC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcbiAgICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG4gICAgICAvLyB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG4gICAgICAvLyBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cbiAgICAgIGlmIChpdGVtWzBdID09IG51bGwgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgaWYgKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiKFwiLmNvbmNhdChpdGVtWzJdLCBcIikgYW5kIChcIikuY29uY2F0KG1lZGlhUXVlcnksIFwiKVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290KS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar stylesInDom = {};\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nfunction listToStyles(list, options) {\n  var styles = [];\n  var newStyles = {};\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var css = item[1];\n    var media = item[2];\n    var sourceMap = item[3];\n    var part = {\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    };\n\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = {\n        id: id,\n        parts: [part]\n      });\n    } else {\n      newStyles[id].parts.push(part);\n    }\n  }\n\n  return styles;\n}\n\nfunction addStylesToDom(styles, options) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i];\n    var domStyle = stylesInDom[item.id];\n    var j = 0;\n\n    if (domStyle) {\n      domStyle.refs++;\n\n      for (; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j]);\n      }\n\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j], options));\n      }\n    } else {\n      var parts = [];\n\n      for (; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j], options));\n      }\n\n      stylesInDom[item.id] = {\n        id: item.id,\n        refs: 1,\n        parts: parts\n      };\n    }\n  }\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n\n  if (typeof options.attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : undefined;\n\n    if (nonce) {\n      options.attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(options.attributes).forEach(function (key) {\n    style.setAttribute(key, options.attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  }\n\n  if (sourceMap && btoa) {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  options.attributes = typeof options.attributes === 'object' ? options.attributes : {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  var styles = listToStyles(list, options);\n  addStylesToDom(styles, options);\n  return function update(newList) {\n    var mayRemove = [];\n\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i];\n      var domStyle = stylesInDom[item.id];\n\n      if (domStyle) {\n        domStyle.refs--;\n        mayRemove.push(domStyle);\n      }\n    }\n\n    if (newList) {\n      var newStyles = listToStyles(newList, options);\n      addStylesToDom(newStyles, options);\n    }\n\n    for (var _i = 0; _i < mayRemove.length; _i++) {\n      var _domStyle = mayRemove[_i];\n\n      if (_domStyle.refs === 0) {\n        for (var j = 0; j < _domStyle.parts.length; j++) {\n          _domStyle.parts[j]();\n        }\n\n        delete stylesInDom[_domStyle.id];\n      }\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _san = __webpack_require__(0);\n\nvar _san2 = _interopRequireDefault(_san);\n\nvar _app = __webpack_require__(8);\n\nvar _app2 = _interopRequireDefault(_app);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nnew _app2.default().attach(document.body);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz81NmQ3Il0sIm5hbWVzIjpbImFwcCIsImF0dGFjaCIsImRvY3VtZW50IiwiYm9keSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFJQSxhQUFKLEdBQVVDLE1BQVYsQ0FBaUJDLFNBQVNDLElBQTFCIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc2FuIGZyb20gJ3NhbidcclxuaW1wb3J0IGFwcCBmcm9tICcuL2FwcC5zYW4nXHJcblxyXG5uZXcgYXBwKCkuYXR0YWNoKGRvY3VtZW50LmJvZHkpXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||\n            (typeof self !== "undefined" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(6);\n// On some exotic environments, it\'s not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||\n                       (typeof global !== "undefined" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||\n                         (typeof global !== "undefined" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz81MTE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxtQkFBTyxDQUFDLENBQWM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    "use strict";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== "function") {\n        callback = new Function("" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."\n        // So if we\'re currently running a task, we\'ll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // "too much recursion" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can\'t be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage("", "*");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = "setImmediate$" + Math.random() + "$";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === "string" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener("message", onGlobalMessage, false);\n        } else {\n            global.attachEvent("onmessage", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, "*");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it\'s been called.\n            var script = doc.createElement("script");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don\'t get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === "[object process]") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && "onreadystatechange" in doc.createElement("script")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1), __webpack_require__(7)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n')},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n")},function(module,exports,__webpack_require__){eval("var __san_script__, __san_template__\nvar __san_styles__ = {}\n__webpack_require__(9)\n__san_script__ = __webpack_require__(11)\nif (__san_script__ &&\n    __san_script__.__esModule &&\n    Object.keys(__san_script__).length > 1) {\n  console.warn(\"[san-loader] src\\\\app.san: named exports in *.san files are ignored.\")}\n__san_template__ = __webpack_require__(17)\nvar __san_proto__ = {}\nif (__san_script__) {\n  __san_proto__ = __san_script__.__esModule\n    ? __san_script__['default']\n    : __san_script__\n}\nif (__san_template__) {\n  __san_proto__.template = __san_template__\n}\nvar san = __webpack_require__(0)\nvar __san_exports__ = san.defineComponent(__san_proto__)\nmodule.exports = __san_exports__\nif (module.exports.__esModule) module.exports = module.exports['default']\nif (!__san_exports__.computed) __san_exports__.computed = {}\nObject.keys(__san_styles__).forEach(function (key) {\nvar module = __san_styles__[key]\n__san_exports__.computed[key] = function () { return module }\n})\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnNhbj9hYTdjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxtQkFBTyxDQUFDLENBQThKO0FBQ3RLLGlCQUFpQixtQkFBTyxDQUFDLEVBQXlGO0FBQ2xIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMsRUFBeUc7QUFDcEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQUs7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDLENBQUMiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Nhbl9zY3JpcHRfXywgX19zYW5fdGVtcGxhdGVfX1xudmFyIF9fc2FuX3N0eWxlc19fID0ge31cbnJlcXVpcmUoXCIhIXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvc2FuLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXIuanMhLi4vbm9kZV9tb2R1bGVzL3Nhbi1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGUmaW5kZXg9MCEuL2FwcC5zYW5cIilcbl9fc2FuX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy9zYW4tbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vYXBwLnNhblwiKVxuaWYgKF9fc2FuX3NjcmlwdF9fICYmXG4gICAgX19zYW5fc2NyaXB0X18uX19lc01vZHVsZSAmJlxuICAgIE9iamVjdC5rZXlzKF9fc2FuX3NjcmlwdF9fKS5sZW5ndGggPiAxKSB7XG4gIGNvbnNvbGUud2FybihcIltzYW4tbG9hZGVyXSBzcmNcXFxcYXBwLnNhbjogbmFtZWQgZXhwb3J0cyBpbiAqLnNhbiBmaWxlcyBhcmUgaWdub3JlZC5cIil9XG5fX3Nhbl90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhaHRtbC1sb2FkZXI/bWluaW1pemU9ZmFsc2UhLi4vbm9kZV9tb2R1bGVzL3Nhbi1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC5zYW5cIilcbnZhciBfX3Nhbl9wcm90b19fID0ge31cbmlmIChfX3Nhbl9zY3JpcHRfXykge1xuICBfX3Nhbl9wcm90b19fID0gX19zYW5fc2NyaXB0X18uX19lc01vZHVsZVxuICAgID8gX19zYW5fc2NyaXB0X19bJ2RlZmF1bHQnXVxuICAgIDogX19zYW5fc2NyaXB0X19cbn1cbmlmIChfX3Nhbl90ZW1wbGF0ZV9fKSB7XG4gIF9fc2FuX3Byb3RvX18udGVtcGxhdGUgPSBfX3Nhbl90ZW1wbGF0ZV9fXG59XG52YXIgc2FuID0gcmVxdWlyZShcInNhblwiKVxudmFyIF9fc2FuX2V4cG9ydHNfXyA9IHNhbi5kZWZpbmVDb21wb25lbnQoX19zYW5fcHJvdG9fXylcbm1vZHVsZS5leHBvcnRzID0gX19zYW5fZXhwb3J0c19fXG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0c1snZGVmYXVsdCddXG5pZiAoIV9fc2FuX2V4cG9ydHNfXy5jb21wdXRlZCkgX19zYW5fZXhwb3J0c19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fc2FuX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Nhbl9zdHlsZXNfX1trZXldXG5fX3Nhbl9leHBvcnRzX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n")},function(module,exports,__webpack_require__){eval("var content = __webpack_require__(10);\n\nif (typeof content === 'string') {\n  content = [[module.i, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = __webpack_require__(3)(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnNhbj9kMTEzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsbUJBQU8sQ0FBQyxFQUE2Szs7QUFFbk07QUFDQSxjQUFjLFFBQVM7QUFDdkI7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsQ0FBd0U7O0FBRTdGO0FBQ0E7QUFDQSIsImZpbGUiOiI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Nhbi1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzIS4uL25vZGVfbW9kdWxlcy9zYW4tbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlJmluZGV4PTAhLi9hcHAuc2FuXCIpO1xuXG5pZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbn1cblxudmFyIG9wdGlvbnMgPSB7fVxuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(2)(true);\n// Module\nexports.push([module.i, "\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\r\\nbody{margin:0;font-size: 16px;line-height: 1;font-family:\\"Microsoft YaHei\\"}\\r\\n.warp{padding:0 50px;}\\r\\n.title{overflow: hidden;height:200px;background: #333;color:#999;}\\r\\n.title h2{\\r\\n    font-size:36px;color:#fff;font-weight: normal;letter-spacing: 3px;\\r\\n    /*font-family:Microsoft JhengHei*/}\\r\\n.title h2>p{\\r\\n    display: inline-block;margin-left:10px;\\r\\n    font-size:10px;color:#999;letter-spacing:normal\\r\\n    }\\r\\n.title h2>p>span{\\r\\n    display: inline-block;margin-bottom:2px;\\r\\n    width:30px;height:16px;line-height:16px;\\r\\n    text-align:center;\\r\\n    background: #666;color:#333;\\r\\n}\\r\\n.title>p{line-height:1.5;}\\r\\n.title2{\\r\\n    padding-left:10px;\\r\\n    border-left:solid 5px #333; \\r\\n    color:#333;\\r\\n    font-size:23px;font-family:Microsoft JhengHei;\\r\\n    }\\r\\n.flex,.item{display:flex;}\\r\\n.item{width:400px;height: 36px;line-height:36px;margin-bottom:30px;}\\r\\n.item .input{width:70%;}\\r\\n.item>p{margin:0 0 0 30px; color:#666;font-size: 14px;}\\r\\n", "",{"version":3,"sources":["app.san?58ae6366","app.san"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmFA,KAAA,QAAA,CAAA,eAAA,CAAA,cAAA,CAAA,6BAAA;AACA,MAAA,cAAA,CAAA;AACA,OAAA,gBAAA,CAAA,YAAA,CAAA,gBAAA,CAAA,UAAA,CAAA;AACA;IACA,cAAA,CAAA,UAAA,CAAA,mBAAA,CAAA,mBAAA;IACA,iCAAA,CAAA;AACA;IACA,qBAAA,CAAA,gBAAA;IACA,cAAA,CAAA,UAAA,CAAA;ICCI;ADCJ;IACA,qBAAA,CAAA,iBAAA;IACA,UAAA,CAAA,WAAA,CAAA,gBAAA;IACA,iBAAA;IACA,gBAAA,CAAA,UAAA;ACCA;ADCA,SAAA,eAAA,CAAA;AACA;IACA,iBAAA;IACA,0BAAA;IACA,UAAA;IACA,cAAA,CAAA,8BAAA;ICCI;ADCJ,YAAA,YAAA,CAAA;AACA,MAAA,WAAA,CAAA,YAAA,CAAA,gBAAA,CAAA,kBAAA,CAAA;AACA,aAAA,SAAA,CAAA;AACA,QAAA,iBAAA,EAAA,UAAA,CAAA,eAAA,CAAA","file":"app.san","sourcesContent":["<template>\\r\\n    <div>\\r\\n    \\r\\n        <div class=\\"warp title \\">\\r\\n            <h2>输入框<p><span>控件</span><br>Input</p></h2>\\r\\n            <p>输入框</p>\\r\\n        </div>\\r\\n        <div class=\\"warp\\">\\r\\n            <h3 class=\\"title2\\">基础状态</h3>\\r\\n            <div class=\\"flex\\">\\r\\n                <div>\\r\\n                    <div class=\\"item\\">\\r\\n                        <san-input placeholder=\\"请输入\\" value=\\"{{value}}\\"/>\\r\\n                        <p>常态</p>\\r\\n                    </div>\\r\\n                    <div class=\\"item\\">\\r\\n                        <san-input\\r\\n                            placeholder=\\"带事件触发\\"\\r\\n                            value=\\"\\"\\r\\n                            on-input=\\"onInput\\"\\r\\n                            on-focus=\\"onFocus\\"\\r\\n                            on-blur=\\"onBlur\\">\\r\\n                        </san-input>\\r\\n                        <p>点击输入</p>\\r\\n                    </div>\\r\\n                    <div class=\\"item\\">\\r\\n                        <san-input value=\\"只读区域\\" readonly />\\r\\n                        <p>失焦状态</p>\\r\\n                    </div>\\r\\n                    <div class=\\"item\\">\\r\\n                        <san-input placeholder=\\"禁用\\" disabled />\\r\\n                        <p>不可用</p>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div>\\r\\n                    <div class=\\"item\\">\\r\\n                        <san-input placeholder=\\"请输入\\"\\r\\n                        errorMsg=\\"错误提示文案\\" errorStyle=\\"eright\\" error/>\\r\\n                    </div>\\r\\n                    <div class=\\"item\\">\\r\\n                        <san-input placeholder=\\"请输入\\"\\r\\n                        errorMsg=\\"错误提示文案\\" errorStyle=\\"ebottom\\" error/>\\r\\n                    </div>\\r\\n                    <div class=\\"item\\" style=\\"padding-top:66px;\\">\\r\\n                        <san-input placeholder=\\"请输入\\"\\r\\n                        errorMsg=\\"错误提示文案\\" errorStyle=\\"etop\\" error/>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        \\r\\n        </div>\\r\\n        <div class=\\"warp title \\">\\r\\n            <h2>复选框<p><span>控件</span><br>Check Box</p></h2>\\r\\n            <p>复选框（Check Box）用于在两个或两个以上有清晰差别的选项中进行选择。复选框的标签是对选中状态的描述，而清除状态的含义必须与选中状态明确相反。因此，复选框应当仅用于切换选项的开关状态，或者是选中/取消选中一个项目。</p>\\r\\n        </div>\\r\\n        <div class=\\"warp\\">\\r\\n            <h3 class=\\"title2\\">基础形态、状态</h3>\\r\\n        </div>\\r\\n    </div>\\r\\n</template>\\r\\n\\r\\n<script>\\r\\nimport sanInput from \'./Input.san\'\\r\\nexport default {\\r\\n    initData () {\\r\\n        return {}\\r\\n    },\\r\\n    components: {\\r\\n        \\"san-input\\": sanInput\\r\\n    },\\r\\n    onInput(msg){\\r\\n        console.log(msg)\\r\\n    },\\r\\n    onFocus(msg){\\r\\n        console.log(msg)\\r\\n    },\\r\\n    onBlur(msg){\\r\\n        console.log(msg)\\r\\n    }\\r\\n}\\r\\n<\/script>\\r\\n\\r\\n<style>\\r\\nbody{margin:0;font-size: 16px;line-height: 1;font-family:\\"Microsoft YaHei\\"}\\r\\n.warp{padding:0 50px;}\\r\\n.title{overflow: hidden;height:200px;background: #333;color:#999;}\\r\\n.title h2{\\r\\n    font-size:36px;color:#fff;font-weight: normal;letter-spacing: 3px;\\r\\n    /*font-family:Microsoft JhengHei*/}\\r\\n.title h2>p{\\r\\n    display: inline-block;margin-left:10px;\\r\\n    font-size:10px;color:#999;letter-spacing:normal\\r\\n    }\\r\\n.title h2>p>span{\\r\\n    display: inline-block;margin-bottom:2px;\\r\\n    width:30px;height:16px;line-height:16px;\\r\\n    text-align:center;\\r\\n    background: #666;color:#333;\\r\\n}\\r\\n.title>p{line-height:1.5;}\\r\\n.title2{\\r\\n    padding-left:10px;\\r\\n    border-left:solid 5px #333; \\r\\n    color:#333;\\r\\n    font-size:23px;font-family:Microsoft JhengHei;\\r\\n    }\\r\\n.flex,.item{display:flex;}\\r\\n.item{width:400px;height: 36px;line-height:36px;margin-bottom:30px;}\\r\\n.item .input{width:70%;}\\r\\n.item>p{margin:0 0 0 30px; color:#666;font-size: 14px;}\\r\\n</style>","\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\r\\nbody{margin:0;font-size: 16px;line-height: 1;font-family:\\"Microsoft YaHei\\"}\\r\\n.warp{padding:0 50px;}\\r\\n.title{overflow: hidden;height:200px;background: #333;color:#999;}\\r\\n.title h2{\\r\\n    font-size:36px;color:#fff;font-weight: normal;letter-spacing: 3px;\\r\\n    /*font-family:Microsoft JhengHei*/}\\r\\n.title h2>p{\\r\\n    display: inline-block;margin-left:10px;\\r\\n    font-size:10px;color:#999;letter-spacing:normal\\r\\n    }\\r\\n.title h2>p>span{\\r\\n    display: inline-block;margin-bottom:2px;\\r\\n    width:30px;height:16px;line-height:16px;\\r\\n    text-align:center;\\r\\n    background: #666;color:#333;\\r\\n}\\r\\n.title>p{line-height:1.5;}\\r\\n.title2{\\r\\n    padding-left:10px;\\r\\n    border-left:solid 5px #333; \\r\\n    color:#333;\\r\\n    font-size:23px;font-family:Microsoft JhengHei;\\r\\n    }\\r\\n.flex,.item{display:flex;}\\r\\n.item{width:400px;height: 36px;line-height:36px;margin-bottom:30px;}\\r\\n.item .input{width:70%;}\\r\\n.item>p{margin:0 0 0 30px; color:#666;font-size: 14px;}\\r\\n"]}]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n    value: true\n});\n\nvar _Input = __webpack_require__(12);\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n    initData: function initData() {\n        return {};\n    },\n\n    components: {\n        "san-input": _Input2.default\n    },\n    onInput: function onInput(msg) {\n        console.log(msg);\n    },\n    onFocus: function onFocus(msg) {\n        console.log(msg);\n    },\n    onBlur: function onBlur(msg) {\n        console.log(msg);\n    }\n};\n// <\/script>\n//\n// <style>\n// body{margin:0;font-size: 16px;line-height: 1;font-family:"Microsoft YaHei"}\n// .warp{padding:0 50px;}\n// .title{overflow: hidden;height:200px;background: #333;color:#999;}\n// .title h2{\n//     font-size:36px;color:#fff;font-weight: normal;letter-spacing: 3px;\n//     /*font-family:Microsoft JhengHei*/}\n// .title h2>p{\n//     display: inline-block;margin-left:10px;\n//     font-size:10px;color:#999;letter-spacing:normal\n//     }\n// .title h2>p>span{\n//     display: inline-block;margin-bottom:2px;\n//     width:30px;height:16px;line-height:16px;\n//     text-align:center;\n//     background: #666;color:#333;\n// }\n// .title>p{line-height:1.5;}\n// .title2{\n//     padding-left:10px;\n//     border-left:solid 5px #333; \n//     color:#333;\n//     font-size:23px;font-family:Microsoft JhengHei;\n//     }\n// .flex,.item{display:flex;}\n// .item{width:400px;height: 36px;line-height:36px;margin-bottom:30px;}\n// .item .input{width:70%;}\n// .item>p{margin:0 0 0 30px; color:#666;font-size: 14px;}\n// </style>\n/* generated by san-loader */\n// <template>\n//     <div>\n//\n//         <div class="warp title ">\n//             <h2>输入框<p><span>控件</span><br>Input</p></h2>\n//             <p>输入框</p>\n//         </div>\n//         <div class="warp">\n//             <h3 class="title2">基础状态</h3>\n//             <div class="flex">\n//                 <div>\n//                     <div class="item">\n//                         <san-input placeholder="请输入" value="{{value}}"/>\n//                         <p>常态</p>\n//                     </div>\n//                     <div class="item">\n//                         <san-input\n//                             placeholder="带事件触发"\n//                             value=""\n//                             on-input="onInput"\n//                             on-focus="onFocus"\n//                             on-blur="onBlur">\n//                         </san-input>\n//                         <p>点击输入</p>\n//                     </div>\n//                     <div class="item">\n//                         <san-input value="只读区域" readonly />\n//                         <p>失焦状态</p>\n//                     </div>\n//                     <div class="item">\n//                         <san-input placeholder="禁用" disabled />\n//                         <p>不可用</p>\n//                     </div>\n//                 </div>\n//                 <div>\n//                     <div class="item">\n//                         <san-input placeholder="请输入"\n//                         errorMsg="错误提示文案" errorStyle="eright" error/>\n//                     </div>\n//                     <div class="item">\n//                         <san-input placeholder="请输入"\n//                         errorMsg="错误提示文案" errorStyle="ebottom" error/>\n//                     </div>\n//                     <div class="item" style="padding-top:66px;">\n//                         <san-input placeholder="请输入"\n//                         errorMsg="错误提示文案" errorStyle="etop" error/>\n//                     </div>\n//                 </div>\n//             </div>\n//\n//         </div>\n//         <div class="warp title ">\n//             <h2>复选框<p><span>控件</span><br>Check Box</p></h2>\n//             <p>复选框（Check Box）用于在两个或两个以上有清晰差别的选项中进行选择。复选框的标签是对选中状态的描述，而清除状态的含义必须与选中状态明确相反。因此，复选框应当仅用于切换选项的开关状态，或者是选中/取消选中一个项目。</p>\n//         </div>\n//         <div class="warp">\n//             <h3 class="title2">基础形态、状态</h3>\n//         </div>\n//     </div>\n// </template>\n//\n// <script>//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYXBwLnNhbj9lMjc0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQThEQTs7Ozs7O2tCQUNBO0FBQ0EsWUFEQSxzQkFDQTtBQUNBO0FBQ0EsS0FIQTs7QUFJQTtBQUNBO0FBREEsS0FKQTtBQU9BLFdBUEEsbUJBT0EsR0FQQSxFQU9BO0FBQ0E7QUFDQSxLQVRBO0FBVUEsV0FWQSxtQkFVQSxHQVZBLEVBVUE7QUFDQTtBQUNBLEtBWkE7QUFhQSxVQWJBLGtCQWFBLEdBYkEsRUFhQTtBQUNBO0FBQ0E7QUFmQSxDIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxyXG4gICAgPGRpdj5cclxuICAgIFxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ3YXJwIHRpdGxlIFwiPlxyXG4gICAgICAgICAgICA8aDI+6L6T5YWl5qGGPHA+PHNwYW4+5o6n5Lu2PC9zcGFuPjxicj5JbnB1dDwvcD48L2gyPlxyXG4gICAgICAgICAgICA8cD7ovpPlhaXmoYY8L3A+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIndhcnBcIj5cclxuICAgICAgICAgICAgPGgzIGNsYXNzPVwidGl0bGUyXCI+5Z+656GA54q25oCBPC9oMz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXhcIj5cclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNhbi1pbnB1dCBwbGFjZWhvbGRlcj1cIuivt+i+k+WFpVwiIHZhbHVlPVwie3t2YWx1ZX19XCIvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cD7luLjmgIE8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNhbi1pbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCLluKbkuovku7bop6blj5FcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9XCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb24taW5wdXQ9XCJvbklucHV0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uLWZvY3VzPVwib25Gb2N1c1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbi1ibHVyPVwib25CbHVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2FuLWlucHV0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cD7ngrnlh7vovpPlhaU8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNhbi1pbnB1dCB2YWx1ZT1cIuWPquivu+WMuuWfn1wiIHJlYWRvbmx5IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPuWkseeEpueKtuaAgTwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c2FuLWlucHV0IHBsYWNlaG9sZGVyPVwi56aB55SoXCIgZGlzYWJsZWQgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+5LiN5Y+v55SoPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzYW4taW5wdXQgcGxhY2Vob2xkZXI9XCLor7fovpPlhaVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1zZz1cIumUmeivr+aPkOekuuaWh+ahiFwiIGVycm9yU3R5bGU9XCJlcmlnaHRcIiBlcnJvci8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNhbi1pbnB1dCBwbGFjZWhvbGRlcj1cIuivt+i+k+WFpVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTXNnPVwi6ZSZ6K+v5o+Q56S65paH5qGIXCIgZXJyb3JTdHlsZT1cImVib3R0b21cIiBlcnJvci8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW1cIiBzdHlsZT1cInBhZGRpbmctdG9wOjY2cHg7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzYW4taW5wdXQgcGxhY2Vob2xkZXI9XCLor7fovpPlhaVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1zZz1cIumUmeivr+aPkOekuuaWh+ahiFwiIGVycm9yU3R5bGU9XCJldG9wXCIgZXJyb3IvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIFxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ3YXJwIHRpdGxlIFwiPlxyXG4gICAgICAgICAgICA8aDI+5aSN6YCJ5qGGPHA+PHNwYW4+5o6n5Lu2PC9zcGFuPjxicj5DaGVjayBCb3g8L3A+PC9oMj5cclxuICAgICAgICAgICAgPHA+5aSN6YCJ5qGG77yIQ2hlY2sgQm9477yJ55So5LqO5Zyo5Lik5Liq5oiW5Lik5Liq5Lul5LiK5pyJ5riF5pmw5beu5Yir55qE6YCJ6aG55Lit6L+b6KGM6YCJ5oup44CC5aSN6YCJ5qGG55qE5qCH562+5piv5a+56YCJ5Lit54q25oCB55qE5o+P6L+w77yM6ICM5riF6Zmk54q25oCB55qE5ZCr5LmJ5b+F6aG75LiO6YCJ5Lit54q25oCB5piO56Gu55u45Y+N44CC5Zug5q2k77yM5aSN6YCJ5qGG5bqU5b2T5LuF55So5LqO5YiH5o2i6YCJ6aG555qE5byA5YWz54q25oCB77yM5oiW6ICF5piv6YCJ5LitL+WPlua2iOmAieS4reS4gOS4qumhueebruOAgjwvcD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwid2FycFwiPlxyXG4gICAgICAgICAgICA8aDMgY2xhc3M9XCJ0aXRsZTJcIj7ln7rnoYDlvaLmgIHjgIHnirbmgIE8L2gzPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5pbXBvcnQgc2FuSW5wdXQgZnJvbSAnLi9JbnB1dC5zYW4nXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGluaXREYXRhICgpIHtcclxuICAgICAgICByZXR1cm4ge31cclxuICAgIH0sXHJcbiAgICBjb21wb25lbnRzOiB7XHJcbiAgICAgICAgXCJzYW4taW5wdXRcIjogc2FuSW5wdXRcclxuICAgIH0sXHJcbiAgICBvbklucHV0KG1zZyl7XHJcbiAgICAgICAgY29uc29sZS5sb2cobXNnKVxyXG4gICAgfSxcclxuICAgIG9uRm9jdXMobXNnKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhtc2cpXHJcbiAgICB9LFxyXG4gICAgb25CbHVyKG1zZyl7XHJcbiAgICAgICAgY29uc29sZS5sb2cobXNnKVxyXG4gICAgfVxyXG59XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG5ib2R5e21hcmdpbjowO2ZvbnQtc2l6ZTogMTZweDtsaW5lLWhlaWdodDogMTtmb250LWZhbWlseTpcIk1pY3Jvc29mdCBZYUhlaVwifVxyXG4ud2FycHtwYWRkaW5nOjAgNTBweDt9XHJcbi50aXRsZXtvdmVyZmxvdzogaGlkZGVuO2hlaWdodDoyMDBweDtiYWNrZ3JvdW5kOiAjMzMzO2NvbG9yOiM5OTk7fVxyXG4udGl0bGUgaDJ7XHJcbiAgICBmb250LXNpemU6MzZweDtjb2xvcjojZmZmO2ZvbnQtd2VpZ2h0OiBub3JtYWw7bGV0dGVyLXNwYWNpbmc6IDNweDtcclxuICAgIC8qZm9udC1mYW1pbHk6TWljcm9zb2Z0IEpoZW5nSGVpKi99XHJcbi50aXRsZSBoMj5we1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO21hcmdpbi1sZWZ0OjEwcHg7XHJcbiAgICBmb250LXNpemU6MTBweDtjb2xvcjojOTk5O2xldHRlci1zcGFjaW5nOm5vcm1hbFxyXG4gICAgfVxyXG4udGl0bGUgaDI+cD5zcGFue1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO21hcmdpbi1ib3R0b206MnB4O1xyXG4gICAgd2lkdGg6MzBweDtoZWlnaHQ6MTZweDtsaW5lLWhlaWdodDoxNnB4O1xyXG4gICAgdGV4dC1hbGlnbjpjZW50ZXI7XHJcbiAgICBiYWNrZ3JvdW5kOiAjNjY2O2NvbG9yOiMzMzM7XHJcbn1cclxuLnRpdGxlPnB7bGluZS1oZWlnaHQ6MS41O31cclxuLnRpdGxlMntcclxuICAgIHBhZGRpbmctbGVmdDoxMHB4O1xyXG4gICAgYm9yZGVyLWxlZnQ6c29saWQgNXB4ICMzMzM7IFxyXG4gICAgY29sb3I6IzMzMztcclxuICAgIGZvbnQtc2l6ZToyM3B4O2ZvbnQtZmFtaWx5Ok1pY3Jvc29mdCBKaGVuZ0hlaTtcclxuICAgIH1cclxuLmZsZXgsLml0ZW17ZGlzcGxheTpmbGV4O31cclxuLml0ZW17d2lkdGg6NDAwcHg7aGVpZ2h0OiAzNnB4O2xpbmUtaGVpZ2h0OjM2cHg7bWFyZ2luLWJvdHRvbTozMHB4O31cclxuLml0ZW0gLmlucHV0e3dpZHRoOjcwJTt9XHJcbi5pdGVtPnB7bWFyZ2luOjAgMCAwIDMwcHg7IGNvbG9yOiM2NjY7Zm9udC1zaXplOiAxNHB4O31cclxuPC9zdHlsZT4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n')},function(module,exports,__webpack_require__){eval("var __san_script__, __san_template__\nvar __san_styles__ = {}\n__webpack_require__(13)\n__san_script__ = __webpack_require__(15)\nif (__san_script__ &&\n    __san_script__.__esModule &&\n    Object.keys(__san_script__).length > 1) {\n  console.warn(\"[san-loader] src\\\\Input.san: named exports in *.san files are ignored.\")}\n__san_template__ = __webpack_require__(16)\nvar __san_proto__ = {}\nif (__san_script__) {\n  __san_proto__ = __san_script__.__esModule\n    ? __san_script__['default']\n    : __san_script__\n}\nif (__san_template__) {\n  __san_proto__.template = __san_template__\n}\nvar san = __webpack_require__(0)\nvar __san_exports__ = san.defineComponent(__san_proto__)\nmodule.exports = __san_exports__\nif (module.exports.__esModule) module.exports = module.exports['default']\nif (!__san_exports__.computed) __san_exports__.computed = {}\nObject.keys(__san_styles__).forEach(function (key) {\nvar module = __san_styles__[key]\n__san_exports__.computed[key] = function () { return module }\n})\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvSW5wdXQuc2FuPzZmNTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLG1CQUFPLENBQUMsRUFBMkw7QUFDbk0saUJBQWlCLG1CQUFPLENBQUMsRUFBMkY7QUFDcEg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsbUJBQU8sQ0FBQyxFQUE4SztBQUN6TTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLG1CQUFPLENBQUMsQ0FBSztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0MsQ0FBQyIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Nhbl9zY3JpcHRfXywgX19zYW5fdGVtcGxhdGVfX1xudmFyIF9fc2FuX3N0eWxlc19fID0ge31cbnJlcXVpcmUoXCIhIXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvc2FuLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXIuanM/aWQ9c3NzNDcwMWE5NWMmc2NvcGVkPXRydWUhLi4vbm9kZV9tb2R1bGVzL3Nhbi1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGUmaW5kZXg9MCEuL0lucHV0LnNhblwiKVxuX19zYW5fc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Nhbi1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9JbnB1dC5zYW5cIilcbmlmIChfX3Nhbl9zY3JpcHRfXyAmJlxuICAgIF9fc2FuX3NjcmlwdF9fLl9fZXNNb2R1bGUgJiZcbiAgICBPYmplY3Qua2V5cyhfX3Nhbl9zY3JpcHRfXykubGVuZ3RoID4gMSkge1xuICBjb25zb2xlLndhcm4oXCJbc2FuLWxvYWRlcl0gc3JjXFxcXElucHV0LnNhbjogbmFtZWQgZXhwb3J0cyBpbiAqLnNhbiBmaWxlcyBhcmUgaWdub3JlZC5cIil9XG5fX3Nhbl90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhaHRtbC1sb2FkZXI/bWluaW1pemU9ZmFsc2UhLi4vbm9kZV9tb2R1bGVzL3Nhbi1sb2FkZXIvbGliL3RlbXBsYXRlLXJld3JpdGVyLmpzP2lkPXNzczQ3MDFhOTVjIS4uL25vZGVfbW9kdWxlcy9zYW4tbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9JbnB1dC5zYW5cIilcbnZhciBfX3Nhbl9wcm90b19fID0ge31cbmlmIChfX3Nhbl9zY3JpcHRfXykge1xuICBfX3Nhbl9wcm90b19fID0gX19zYW5fc2NyaXB0X18uX19lc01vZHVsZVxuICAgID8gX19zYW5fc2NyaXB0X19bJ2RlZmF1bHQnXVxuICAgIDogX19zYW5fc2NyaXB0X19cbn1cbmlmIChfX3Nhbl90ZW1wbGF0ZV9fKSB7XG4gIF9fc2FuX3Byb3RvX18udGVtcGxhdGUgPSBfX3Nhbl90ZW1wbGF0ZV9fXG59XG52YXIgc2FuID0gcmVxdWlyZShcInNhblwiKVxudmFyIF9fc2FuX2V4cG9ydHNfXyA9IHNhbi5kZWZpbmVDb21wb25lbnQoX19zYW5fcHJvdG9fXylcbm1vZHVsZS5leHBvcnRzID0gX19zYW5fZXhwb3J0c19fXG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0c1snZGVmYXVsdCddXG5pZiAoIV9fc2FuX2V4cG9ydHNfXy5jb21wdXRlZCkgX19zYW5fZXhwb3J0c19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fc2FuX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Nhbl9zdHlsZXNfX1trZXldXG5fX3Nhbl9leHBvcnRzX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n")},function(module,exports,__webpack_require__){eval("var content = __webpack_require__(14);\n\nif (typeof content === 'string') {\n  content = [[module.i, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = __webpack_require__(3)(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvSW5wdXQuc2FuPzRjZjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxtQkFBTyxDQUFDLEVBQTBNOztBQUVoTztBQUNBLGNBQWMsUUFBUztBQUN2Qjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLGFBQWEsbUJBQU8sQ0FBQyxDQUF3RTs7QUFFN0Y7QUFDQTtBQUNBIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Nhbi1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzP2lkPXNzczQ3MDFhOTVjJnNjb3BlZD10cnVlIS4uL25vZGVfbW9kdWxlcy9zYW4tbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlJmluZGV4PTAhLi9JbnB1dC5zYW5cIik7XG5cbmlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xufVxuXG52YXIgb3B0aW9ucyA9IHt9XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmIChjb250ZW50LmxvY2Fscykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(2)(true);\n// Module\nexports.push([module.i, "\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\r\\ninput[sss4701a95c]{\\r\\n    box-sizing: border-box;\\r\\n    width: 100%;\\r\\n    display: inline-block;\\r\\n    padding:8px;\\r\\n    color: #666;\\r\\n    font-size: 1rem;\\r\\n    border:solid 1px #dbdbdb;\\r\\n}\\r\\ninput[sss4701a95c]:hover{\\r\\n    border:solid 1px #999;\\r\\n}\\r\\ninput[sss4701a95c]:focus{\\r\\n    border:solid 1px #999;\\r\\n    color: #727272;\\r\\n    outline:none;\\r\\n}\\r\\ninput[sss4701a95c]::placeholder {\\r\\ncolor: #999;\\r\\n}\\r\\n\\r\\ninput[sss4701a95c]:disabled {\\r\\nbackground: #f7f7f7;\\r\\ncolor:#b8b8b8\\r\\n}\\r\\ninput.error[sss4701a95c]{\\r\\n    border:solid 1px #fb5d5f;\\r\\n}\\r\\n.input[sss4701a95c]{position: relative;}\\r\\n.etext[sss4701a95c]{\\r\\n    color:#fb5d5f;white-space: nowrap;font-size:.9rem;padding-left:8px;\\r\\n    position: absolute;left: 0;}\\r\\n.eright[sss4701a95c]{left: 100%;padding-left:12px;}\\r\\n.ebottom[sss4701a95c]{top:42px; line-height:1}\\r\\n.etop[sss4701a95c]{\\r\\n    display:inline-block;\\r\\n    top:-45px;\\r\\n    padding:0 15px;\\r\\n    height:35px;line-height:35px;\\r\\n    background:#ffefef;\\r\\n    }\\r\\n.etop[sss4701a95c]::after{\\r\\n    content:\'\';\\r\\n    position:absolute;\\r\\n    top: 35px;left: 50%;\\r\\n    width:0;height:0;\\r\\n    border-width:5px;border-style:solid;\\r\\n    border-color: #ffefef transparent transparent transparent;\\r\\n}\\r\\n", "",{"version":3,"sources":["Input.san?401df250","Input.san"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;IACA,sBAAA;IACA,WAAA;IACA,qBAAA;IACA,WAAA;IACA,WAAA;IACA,eAAA;IACA,wBAAA;ACCA;ADCA;IACA,qBAAA;ACCA;ADCA;IACA,qBAAA;IACA,cAAA;IACA,YAAA;ACCA;ADCA;AACA,WAAA;ACCA;;ADEA;AACA,mBAAA;AACA;ACCA;ADCA;IACA,wBAAA;ACCA;ADCA,oBAAA,kBAAA,CAAA;AACA;IACA,aAAA,CAAA,mBAAA,CAAA,eAAA,CAAA,gBAAA;IACA,kBAAA,CAAA,OAAA,CAAA;AACA,qBAAA,UAAA,CAAA,iBAAA,CAAA;AACA,sBAAA,QAAA,EAAA,aAAA;AACA;IACA,oBAAA;IACA,SAAA;IACA,cAAA;IACA,WAAA,CAAA,gBAAA;IACA,kBAAA;ICCI;ADCJ;IACA,UAAA;IACA,iBAAA;IACA,SAAA,CAAA,SAAA;IACA,OAAA,CAAA,QAAA;IACA,gBAAA,CAAA,kBAAA;IACA,yDAAA;ACCA","file":"Input.san","sourcesContent":["<template>\\r\\n    <div class=\\"input\\">\\r\\n        <input \\r\\n            class=\\"{{ error ? \'error\' : \'\'}}\\"\\r\\n            value=\\"{= value =}\\"\\r\\n            placeholder=\\"{{ placeholder }}\\"\\r\\n            disabled=\\"{{ disabled }}\\" \\r\\n            readonly=\\"{{ readonly }}\\"\\r\\n            on-input=\\"onInput($event)\\"\\r\\n            on-focus=\\"onFocus($event)\\"\\r\\n            on-blur=\\"onBlur($event)\\"\\r\\n             />\\r\\n        <span s-if=\\"{{ error }}\\" class=\\"{{ errorStyle }} etext\\">{{ errorMsg }}</span>\\r\\n    </div>\\r\\n</template>\\r\\n\\r\\n<script>\\r\\nexport default {\\r\\n    initData() {\\r\\n        return {\\r\\n            value: undefined, // @value, type:string, default:undefined\\r\\n            placeholder: undefined, // @placeholder, type:string, default:undefined\\r\\n            disabled: false, // @disabled, type:boolean, default:false\\r\\n            readonly: false, // @readonly, type:boolean, default:false\\r\\n            errorMsg: undefined, // @errorMsg, type:string, default:undefined\\r\\n            error:false // @ error, type:boolean, default:false\\r\\n        }\\r\\n    },\\r\\n    onInput(event){\\r\\n        // return event\\r\\n      this.fire(\'input\', event);\\r\\n      if (this.data.get(\'value\')) {\\r\\n          this.data.set(\'error\', false);\\r\\n      }\\r\\n    },\\r\\n    onFocus(event){\\r\\n        // return event\\r\\n      this.fire(\'focus\', event);\\r\\n    },\\r\\n    onBlur(event){\\r\\n        // return event\\r\\n      this.fire(\'blur\', event);\\r\\n        console.log(this.data.get(\'value\'))\\r\\n      if (this.data.get(\'value\') === \\"\\" || this.data.get(\'value\') === undefined) {\\r\\n          this.data.set(\'error\', true);\\r\\n      }\\r\\n    },\\r\\n}\\r\\n<\/script>\\r\\n\\r\\n<style scoped>\\r\\ninput{\\r\\n    box-sizing: border-box;\\r\\n    width: 100%;\\r\\n    display: inline-block;\\r\\n    padding:8px;\\r\\n    color: #666;\\r\\n    font-size: 1rem;\\r\\n    border:solid 1px #dbdbdb;\\r\\n}\\r\\ninput:hover{\\r\\n    border:solid 1px #999;\\r\\n}\\r\\ninput:focus{\\r\\n    border:solid 1px #999;\\r\\n    color: #727272;\\r\\n    outline:none;\\r\\n}\\r\\ninput::placeholder {\\r\\ncolor: #999;\\r\\n}\\r\\n\\r\\ninput:disabled {\\r\\nbackground: #f7f7f7;\\r\\ncolor:#b8b8b8\\r\\n}\\r\\ninput.error{\\r\\n    border:solid 1px #fb5d5f;\\r\\n}\\r\\n.input{position: relative;}\\r\\n.etext{\\r\\n    color:#fb5d5f;white-space: nowrap;font-size:.9rem;padding-left:8px;\\r\\n    position: absolute;left: 0;}\\r\\n.eright{left: 100%;padding-left:12px;}\\r\\n.ebottom{top:42px; line-height:1}\\r\\n.etop{\\r\\n    display:inline-block;\\r\\n    top:-45px;\\r\\n    padding:0 15px;\\r\\n    height:35px;line-height:35px;\\r\\n    background:#ffefef;\\r\\n    }\\r\\n.etop::after{\\r\\n    content:\'\';\\r\\n    position:absolute;\\r\\n    top: 35px;left: 50%;\\r\\n    width:0;height:0;\\r\\n    border-width:5px;border-style:solid;\\r\\n    border-color: #ffefef transparent transparent transparent;\\r\\n}\\r\\n</style>","\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\r\\ninput[sss4701a95c]{\\r\\n    box-sizing: border-box;\\r\\n    width: 100%;\\r\\n    display: inline-block;\\r\\n    padding:8px;\\r\\n    color: #666;\\r\\n    font-size: 1rem;\\r\\n    border:solid 1px #dbdbdb;\\r\\n}\\r\\ninput[sss4701a95c]:hover{\\r\\n    border:solid 1px #999;\\r\\n}\\r\\ninput[sss4701a95c]:focus{\\r\\n    border:solid 1px #999;\\r\\n    color: #727272;\\r\\n    outline:none;\\r\\n}\\r\\ninput[sss4701a95c]::placeholder {\\r\\ncolor: #999;\\r\\n}\\r\\n\\r\\ninput[sss4701a95c]:disabled {\\r\\nbackground: #f7f7f7;\\r\\ncolor:#b8b8b8\\r\\n}\\r\\ninput.error[sss4701a95c]{\\r\\n    border:solid 1px #fb5d5f;\\r\\n}\\r\\n.input[sss4701a95c]{position: relative;}\\r\\n.etext[sss4701a95c]{\\r\\n    color:#fb5d5f;white-space: nowrap;font-size:.9rem;padding-left:8px;\\r\\n    position: absolute;left: 0;}\\r\\n.eright[sss4701a95c]{left: 100%;padding-left:12px;}\\r\\n.ebottom[sss4701a95c]{top:42px; line-height:1}\\r\\n.etop[sss4701a95c]{\\r\\n    display:inline-block;\\r\\n    top:-45px;\\r\\n    padding:0 15px;\\r\\n    height:35px;line-height:35px;\\r\\n    background:#ffefef;\\r\\n    }\\r\\n.etop[sss4701a95c]::after{\\r\\n    content:\'\';\\r\\n    position:absolute;\\r\\n    top: 35px;left: 50%;\\r\\n    width:0;height:0;\\r\\n    border-width:5px;border-style:solid;\\r\\n    border-color: #ffefef transparent transparent transparent;\\r\\n}\\r\\n"]}]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n    value: true\n});\n// <template>\n//     <div class="input">\n//         <input \n//             class="{{ error ? \'error\' : \'\'}}"\n//             value="{= value =}"\n//             placeholder="{{ placeholder }}"\n//             disabled="{{ disabled }}" \n//             readonly="{{ readonly }}"\n//             on-input="onInput($event)"\n//             on-focus="onFocus($event)"\n//             on-blur="onBlur($event)"\n//              />\n//         <span s-if="{{ error }}" class="{{ errorStyle }} etext">{{ errorMsg }}</span>\n//     </div>\n// </template>\n//\n// <script>\nexports.default = {\n    initData: function initData() {\n        return {\n            value: undefined, // @value, type:string, default:undefined\n            placeholder: undefined, // @placeholder, type:string, default:undefined\n            disabled: false, // @disabled, type:boolean, default:false\n            readonly: false, // @readonly, type:boolean, default:false\n            errorMsg: undefined, // @errorMsg, type:string, default:undefined\n            error: false // @ error, type:boolean, default:false\n        };\n    },\n    onInput: function onInput(event) {\n        // return event\n        this.fire(\'input\', event);\n        if (this.data.get(\'value\')) {\n            this.data.set(\'error\', false);\n        }\n    },\n    onFocus: function onFocus(event) {\n        // return event\n        this.fire(\'focus\', event);\n    },\n    onBlur: function onBlur(event) {\n        // return event\n        this.fire(\'blur\', event);\n        console.log(this.data.get(\'value\'));\n        if (this.data.get(\'value\') === "" || this.data.get(\'value\') === undefined) {\n            this.data.set(\'error\', true);\n        }\n    }\n};\n// <\/script>\n//\n// <style scoped>\n// input{\n//     box-sizing: border-box;\n//     width: 100%;\n//     display: inline-block;\n//     padding:8px;\n//     color: #666;\n//     font-size: 1rem;\n//     border:solid 1px #dbdbdb;\n// }\n// input:hover{\n//     border:solid 1px #999;\n// }\n// input:focus{\n//     border:solid 1px #999;\n//     color: #727272;\n//     outline:none;\n// }\n// input::placeholder {\n// color: #999;\n// }\n//\n// input:disabled {\n// background: #f7f7f7;\n// color:#b8b8b8\n// }\n// input.error{\n//     border:solid 1px #fb5d5f;\n// }\n// .input{position: relative;}\n// .etext{\n//     color:#fb5d5f;white-space: nowrap;font-size:.9rem;padding-left:8px;\n//     position: absolute;left: 0;}\n// .eright{left: 100%;padding-left:12px;}\n// .ebottom{top:42px; line-height:1}\n// .etop{\n//     display:inline-block;\n//     top:-45px;\n//     padding:0 15px;\n//     height:35px;line-height:35px;\n//     background:#ffefef;\n//     }\n// .etop::after{\n//     content:\'\';\n//     position:absolute;\n//     top: 35px;left: 50%;\n//     width:0;height:0;\n//     border-width:5px;border-style:solid;\n//     border-color: #ffefef transparent transparent transparent;\n// }\n// </style>\n/* generated by san-loader *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vSW5wdXQuc2FuPzU5ZDUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQkFpQkE7QUFDQSxZQURBLHNCQUNBO0FBQ0E7QUFDQSw0QkFEQSxFQUNBO0FBQ0Esa0NBRkEsRUFFQTtBQUNBLDJCQUhBLEVBR0E7QUFDQSwyQkFKQSxFQUlBO0FBQ0EsK0JBTEEsRUFLQTtBQUNBLHdCQU5BLENBTUE7QUFOQTtBQVFBLEtBVkE7QUFXQSxXQVhBLG1CQVdBLEtBWEEsRUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQWpCQTtBQWtCQSxXQWxCQSxtQkFrQkEsS0FsQkEsRUFrQkE7QUFDQTtBQUNBO0FBQ0EsS0FyQkE7QUFzQkEsVUF0QkEsa0JBc0JBLEtBdEJBLEVBc0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUE3QkEsQyIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJpbnB1dFwiPlxyXG4gICAgICAgIDxpbnB1dCBcclxuICAgICAgICAgICAgY2xhc3M9XCJ7eyBlcnJvciA/ICdlcnJvcicgOiAnJ319XCJcclxuICAgICAgICAgICAgdmFsdWU9XCJ7PSB2YWx1ZSA9fVwiXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwie3sgcGxhY2Vob2xkZXIgfX1cIlxyXG4gICAgICAgICAgICBkaXNhYmxlZD1cInt7IGRpc2FibGVkIH19XCIgXHJcbiAgICAgICAgICAgIHJlYWRvbmx5PVwie3sgcmVhZG9ubHkgfX1cIlxyXG4gICAgICAgICAgICBvbi1pbnB1dD1cIm9uSW5wdXQoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgIG9uLWZvY3VzPVwib25Gb2N1cygkZXZlbnQpXCJcclxuICAgICAgICAgICAgb24tYmx1cj1cIm9uQmx1cigkZXZlbnQpXCJcclxuICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgPHNwYW4gcy1pZj1cInt7IGVycm9yIH19XCIgY2xhc3M9XCJ7eyBlcnJvclN0eWxlIH19IGV0ZXh0XCI+e3sgZXJyb3JNc2cgfX08L3NwYW4+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGluaXREYXRhKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsIC8vIEB2YWx1ZSwgdHlwZTpzdHJpbmcsIGRlZmF1bHQ6dW5kZWZpbmVkXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiB1bmRlZmluZWQsIC8vIEBwbGFjZWhvbGRlciwgdHlwZTpzdHJpbmcsIGRlZmF1bHQ6dW5kZWZpbmVkXHJcbiAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSwgLy8gQGRpc2FibGVkLCB0eXBlOmJvb2xlYW4sIGRlZmF1bHQ6ZmFsc2VcclxuICAgICAgICAgICAgcmVhZG9ubHk6IGZhbHNlLCAvLyBAcmVhZG9ubHksIHR5cGU6Ym9vbGVhbiwgZGVmYXVsdDpmYWxzZVxyXG4gICAgICAgICAgICBlcnJvck1zZzogdW5kZWZpbmVkLCAvLyBAZXJyb3JNc2csIHR5cGU6c3RyaW5nLCBkZWZhdWx0OnVuZGVmaW5lZFxyXG4gICAgICAgICAgICBlcnJvcjpmYWxzZSAvLyBAIGVycm9yLCB0eXBlOmJvb2xlYW4sIGRlZmF1bHQ6ZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgb25JbnB1dChldmVudCl7XHJcbiAgICAgICAgLy8gcmV0dXJuIGV2ZW50XHJcbiAgICAgIHRoaXMuZmlyZSgnaW5wdXQnLCBldmVudCk7XHJcbiAgICAgIGlmICh0aGlzLmRhdGEuZ2V0KCd2YWx1ZScpKSB7XHJcbiAgICAgICAgICB0aGlzLmRhdGEuc2V0KCdlcnJvcicsIGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIG9uRm9jdXMoZXZlbnQpe1xyXG4gICAgICAgIC8vIHJldHVybiBldmVudFxyXG4gICAgICB0aGlzLmZpcmUoJ2ZvY3VzJywgZXZlbnQpO1xyXG4gICAgfSxcclxuICAgIG9uQmx1cihldmVudCl7XHJcbiAgICAgICAgLy8gcmV0dXJuIGV2ZW50XHJcbiAgICAgIHRoaXMuZmlyZSgnYmx1cicsIGV2ZW50KTtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmRhdGEuZ2V0KCd2YWx1ZScpKVxyXG4gICAgICBpZiAodGhpcy5kYXRhLmdldCgndmFsdWUnKSA9PT0gXCJcIiB8fCB0aGlzLmRhdGEuZ2V0KCd2YWx1ZScpID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHRoaXMuZGF0YS5zZXQoJ2Vycm9yJywgdHJ1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbn1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgc2NvcGVkPlxyXG5pbnB1dHtcclxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIHBhZGRpbmc6OHB4O1xyXG4gICAgY29sb3I6ICM2NjY7XHJcbiAgICBmb250LXNpemU6IDFyZW07XHJcbiAgICBib3JkZXI6c29saWQgMXB4ICNkYmRiZGI7XHJcbn1cclxuaW5wdXQ6aG92ZXJ7XHJcbiAgICBib3JkZXI6c29saWQgMXB4ICM5OTk7XHJcbn1cclxuaW5wdXQ6Zm9jdXN7XHJcbiAgICBib3JkZXI6c29saWQgMXB4ICM5OTk7XHJcbiAgICBjb2xvcjogIzcyNzI3MjtcclxuICAgIG91dGxpbmU6bm9uZTtcclxufVxyXG5pbnB1dDo6cGxhY2Vob2xkZXIge1xyXG5jb2xvcjogIzk5OTtcclxufVxyXG5cclxuaW5wdXQ6ZGlzYWJsZWQge1xyXG5iYWNrZ3JvdW5kOiAjZjdmN2Y3O1xyXG5jb2xvcjojYjhiOGI4XHJcbn1cclxuaW5wdXQuZXJyb3J7XHJcbiAgICBib3JkZXI6c29saWQgMXB4ICNmYjVkNWY7XHJcbn1cclxuLmlucHV0e3Bvc2l0aW9uOiByZWxhdGl2ZTt9XHJcbi5ldGV4dHtcclxuICAgIGNvbG9yOiNmYjVkNWY7d2hpdGUtc3BhY2U6IG5vd3JhcDtmb250LXNpemU6LjlyZW07cGFkZGluZy1sZWZ0OjhweDtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtsZWZ0OiAwO31cclxuLmVyaWdodHtsZWZ0OiAxMDAlO3BhZGRpbmctbGVmdDoxMnB4O31cclxuLmVib3R0b217dG9wOjQycHg7IGxpbmUtaGVpZ2h0OjF9XHJcbi5ldG9we1xyXG4gICAgZGlzcGxheTppbmxpbmUtYmxvY2s7XHJcbiAgICB0b3A6LTQ1cHg7XHJcbiAgICBwYWRkaW5nOjAgMTVweDtcclxuICAgIGhlaWdodDozNXB4O2xpbmUtaGVpZ2h0OjM1cHg7XHJcbiAgICBiYWNrZ3JvdW5kOiNmZmVmZWY7XHJcbiAgICB9XHJcbi5ldG9wOjphZnRlcntcclxuICAgIGNvbnRlbnQ6Jyc7XHJcbiAgICBwb3NpdGlvbjphYnNvbHV0ZTtcclxuICAgIHRvcDogMzVweDtsZWZ0OiA1MCU7XHJcbiAgICB3aWR0aDowO2hlaWdodDowO1xyXG4gICAgYm9yZGVyLXdpZHRoOjVweDtib3JkZXItc3R5bGU6c29saWQ7XHJcbiAgICBib3JkZXItY29sb3I6ICNmZmVmZWYgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7XHJcbn1cclxuPC9zdHlsZT4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///15\n')},function(module,exports){eval('module.exports = "\\n<div class=\\"input\\" sss4701a95c=\\"\\">\\n    <input class=\\"{{ error ? \'error\' : \'\'}}\\" value=\\"{= value =}\\" placeholder=\\"{{ placeholder }}\\" disabled=\\"{{ disabled }}\\" readonly=\\"{{ readonly }}\\" on-input=\\"onInput($event)\\" on-focus=\\"onFocus($event)\\" on-blur=\\"onBlur($event)\\" sss4701a95c=\\"\\">\\n    <span s-if=\\"{{ error }}\\" class=\\"{{ errorStyle }} etext\\" sss4701a95c=\\"\\">{{ errorMsg }}</span>\\n</div>\\n";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvSW5wdXQuc2FuPzg3Y2EiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUZBQWlGLHVCQUF1QixZQUFZLFVBQVUsbUJBQW1CLGVBQWUsZ0JBQWdCLFlBQVksZ0JBQWdCLFlBQVksOEhBQThILFNBQVMsYUFBYSxjQUFjLDRCQUE0QixZQUFZIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIlxcbjxkaXYgY2xhc3M9XFxcImlucHV0XFxcIiBzc3M0NzAxYTk1Yz1cXFwiXFxcIj5cXG4gICAgPGlucHV0IGNsYXNzPVxcXCJ7eyBlcnJvciA/ICdlcnJvcicgOiAnJ319XFxcIiB2YWx1ZT1cXFwiez0gdmFsdWUgPX1cXFwiIHBsYWNlaG9sZGVyPVxcXCJ7eyBwbGFjZWhvbGRlciB9fVxcXCIgZGlzYWJsZWQ9XFxcInt7IGRpc2FibGVkIH19XFxcIiByZWFkb25seT1cXFwie3sgcmVhZG9ubHkgfX1cXFwiIG9uLWlucHV0PVxcXCJvbklucHV0KCRldmVudClcXFwiIG9uLWZvY3VzPVxcXCJvbkZvY3VzKCRldmVudClcXFwiIG9uLWJsdXI9XFxcIm9uQmx1cigkZXZlbnQpXFxcIiBzc3M0NzAxYTk1Yz1cXFwiXFxcIj5cXG4gICAgPHNwYW4gcy1pZj1cXFwie3sgZXJyb3IgfX1cXFwiIGNsYXNzPVxcXCJ7eyBlcnJvclN0eWxlIH19IGV0ZXh0XFxcIiBzc3M0NzAxYTk1Yz1cXFwiXFxcIj57eyBlcnJvck1zZyB9fTwvc3Bhbj5cXG48L2Rpdj5cXG5cIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///16\n')},function(module,exports){eval('module.exports = "\\n<div>\\n\\n    <div class=\\"warp title \\">\\n        <h2>输入框<p><span>控件</span><br>Input</p></h2>\\n        <p>输入框</p>\\n    </div>\\n    <div class=\\"warp\\">\\n        <h3 class=\\"title2\\">基础状态</h3>\\n        <div class=\\"flex\\">\\n            <div>\\n                <div class=\\"item\\">\\n                    <san-input placeholder=\\"请输入\\" value=\\"{{value}}\\"/>\\n                    <p>常态</p>\\n                </div>\\n                <div class=\\"item\\">\\n                    <san-input\\n                        placeholder=\\"带事件触发\\"\\n                        value=\\"\\"\\n                        on-input=\\"onInput\\"\\n                        on-focus=\\"onFocus\\"\\n                        on-blur=\\"onBlur\\">\\n                    </san-input>\\n                    <p>点击输入</p>\\n                </div>\\n                <div class=\\"item\\">\\n                    <san-input value=\\"只读区域\\" readonly />\\n                    <p>失焦状态</p>\\n                </div>\\n                <div class=\\"item\\">\\n                    <san-input placeholder=\\"禁用\\" disabled />\\n                    <p>不可用</p>\\n                </div>\\n            </div>\\n            <div>\\n                <div class=\\"item\\">\\n                    <san-input placeholder=\\"请输入\\"\\n                    errorMsg=\\"错误提示文案\\" errorStyle=\\"eright\\" error/>\\n                </div>\\n                <div class=\\"item\\">\\n                    <san-input placeholder=\\"请输入\\"\\n                    errorMsg=\\"错误提示文案\\" errorStyle=\\"ebottom\\" error/>\\n                </div>\\n                <div class=\\"item\\" style=\\"padding-top:66px;\\">\\n                    <san-input placeholder=\\"请输入\\"\\n                    errorMsg=\\"错误提示文案\\" errorStyle=\\"etop\\" error/>\\n                </div>\\n            </div>\\n        </div>\\n    \\n    </div>\\n    <div class=\\"warp title \\">\\n        <h2>复选框<p><span>控件</span><br>Check Box</p></h2>\\n        <p>复选框（Check Box）用于在两个或两个以上有清晰差别的选项中进行选择。复选框的标签是对选中状态的描述，而清除状态的含义必须与选中状态明确相反。因此，复选框应当仅用于切换选项的开关状态，或者是选中/取消选中一个项目。</p>\\n    </div>\\n    <div class=\\"warp\\">\\n        <h3 class=\\"title2\\">基础形态、状态</h3>\\n    </div>\\n</div>\\n";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnNhbj9hNDA1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlXQUF5VyxPQUFPLHdzQ0FBd3NDIiwiZmlsZSI6IjE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIlxcbjxkaXY+XFxuXFxuICAgIDxkaXYgY2xhc3M9XFxcIndhcnAgdGl0bGUgXFxcIj5cXG4gICAgICAgIDxoMj7ovpPlhaXmoYY8cD48c3Bhbj7mjqfku7Y8L3NwYW4+PGJyPklucHV0PC9wPjwvaDI+XFxuICAgICAgICA8cD7ovpPlhaXmoYY8L3A+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ3YXJwXFxcIj5cXG4gICAgICAgIDxoMyBjbGFzcz1cXFwidGl0bGUyXFxcIj7ln7rnoYDnirbmgIE8L2gzPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmxleFxcXCI+XFxuICAgICAgICAgICAgPGRpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaXRlbVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8c2FuLWlucHV0IHBsYWNlaG9sZGVyPVxcXCLor7fovpPlhaVcXFwiIHZhbHVlPVxcXCJ7e3ZhbHVlfX1cXFwiLz5cXG4gICAgICAgICAgICAgICAgICAgIDxwPuW4uOaAgTwvcD5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIml0ZW1cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNhbi1pbnB1dFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVxcXCLluKbkuovku7bop6blj5FcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9XFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICBvbi1pbnB1dD1cXFwib25JbnB1dFxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICBvbi1mb2N1cz1cXFwib25Gb2N1c1xcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICBvbi1ibHVyPVxcXCJvbkJsdXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPC9zYW4taW5wdXQ+XFxuICAgICAgICAgICAgICAgICAgICA8cD7ngrnlh7vovpPlhaU8L3A+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpdGVtXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzYW4taW5wdXQgdmFsdWU9XFxcIuWPquivu+WMuuWfn1xcXCIgcmVhZG9ubHkgLz5cXG4gICAgICAgICAgICAgICAgICAgIDxwPuWkseeEpueKtuaAgTwvcD5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIml0ZW1cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNhbi1pbnB1dCBwbGFjZWhvbGRlcj1cXFwi56aB55SoXFxcIiBkaXNhYmxlZCAvPlxcbiAgICAgICAgICAgICAgICAgICAgPHA+5LiN5Y+v55SoPC9wPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpdGVtXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzYW4taW5wdXQgcGxhY2Vob2xkZXI9XFxcIuivt+i+k+WFpVxcXCJcXG4gICAgICAgICAgICAgICAgICAgIGVycm9yTXNnPVxcXCLplJnor6/mj5DnpLrmlofmoYhcXFwiIGVycm9yU3R5bGU9XFxcImVyaWdodFxcXCIgZXJyb3IvPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaXRlbVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8c2FuLWlucHV0IHBsYWNlaG9sZGVyPVxcXCLor7fovpPlhaVcXFwiXFxuICAgICAgICAgICAgICAgICAgICBlcnJvck1zZz1cXFwi6ZSZ6K+v5o+Q56S65paH5qGIXFxcIiBlcnJvclN0eWxlPVxcXCJlYm90dG9tXFxcIiBlcnJvci8+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpdGVtXFxcIiBzdHlsZT1cXFwicGFkZGluZy10b3A6NjZweDtcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNhbi1pbnB1dCBwbGFjZWhvbGRlcj1cXFwi6K+36L6T5YWlXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNc2c9XFxcIumUmeivr+aPkOekuuaWh+ahiFxcXCIgZXJyb3JTdHlsZT1cXFwiZXRvcFxcXCIgZXJyb3IvPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICBcXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcIndhcnAgdGl0bGUgXFxcIj5cXG4gICAgICAgIDxoMj7lpI3pgInmoYY8cD48c3Bhbj7mjqfku7Y8L3NwYW4+PGJyPkNoZWNrIEJveDwvcD48L2gyPlxcbiAgICAgICAgPHA+5aSN6YCJ5qGG77yIQ2hlY2sgQm9477yJ55So5LqO5Zyo5Lik5Liq5oiW5Lik5Liq5Lul5LiK5pyJ5riF5pmw5beu5Yir55qE6YCJ6aG55Lit6L+b6KGM6YCJ5oup44CC5aSN6YCJ5qGG55qE5qCH562+5piv5a+56YCJ5Lit54q25oCB55qE5o+P6L+w77yM6ICM5riF6Zmk54q25oCB55qE5ZCr5LmJ5b+F6aG75LiO6YCJ5Lit54q25oCB5piO56Gu55u45Y+N44CC5Zug5q2k77yM5aSN6YCJ5qGG5bqU5b2T5LuF55So5LqO5YiH5o2i6YCJ6aG555qE5byA5YWz54q25oCB77yM5oiW6ICF5piv6YCJ5LitL+WPlua2iOmAieS4reS4gOS4qumhueebruOAgjwvcD5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcIndhcnBcXFwiPlxcbiAgICAgICAgPGgzIGNsYXNzPVxcXCJ0aXRsZTJcXFwiPuWfuuehgOW9ouaAgeOAgeeKtuaAgTwvaDM+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17\n')}]);